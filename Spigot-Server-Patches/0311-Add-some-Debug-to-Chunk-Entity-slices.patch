From 56148e925de0b60c171955575e92691cf2fb5457 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Mon, 23 Jul 2018 22:44:23 -0400
Subject: [PATCH] Add some Debug to Chunk Entity slices

If we detect unexpected state, log and try to recover

This should hopefully avoid duplicate entities ever being created
if the entity was to end up in 2 different chunk slices

diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index aa75cc4205..56a74c6062 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -712,8 +712,33 @@ public class Chunk implements IChunkAccess {
         entity.ae = this.locX;
         entity.af = k;
         entity.ag = this.locZ;
-        this.entitySlices[k].add(entity);
+
         // Paper start
+        List<Entity> entitySlice = this.entitySlices[k];
+        boolean inThis = entitySlice.contains(entity);
+        if (entity.entitySlice != null || inThis) {
+            if (entity.entitySlice == entitySlice || inThis) {
+                LogManager.getLogger().warn(entity + " was already in this chunk section! Report this to https://github.com/PaperMC/Paper/issues/1223");
+                new Throwable().printStackTrace();
+                return;
+            } else {
+                LogManager.getLogger().warn(entity + " is still in another ChunkSection! Report this to https://github.com/PaperMC/Paper/issues/1223");
+
+                Chunk chunk = entity.getCurrentChunk();
+                if (chunk != null) {
+                    if (chunk != this) {
+                        LogManager.getLogger().warn(entity + " was in another chunk at that! " + chunk.locX + "," + chunk.locZ);
+                    }
+                    chunk.removeEntity(entity);
+                } else {
+                    removeEntity(entity);
+                }
+                new Throwable().printStackTrace();
+            }
+        }
+        entity.entitySlice = entitySlice;
+        entitySlice.add(entity);
+
         this.markDirty();
         if (entity instanceof EntityItem) {
             itemCounts[k]++;
@@ -746,6 +771,12 @@ public class Chunk implements IChunkAccess {
         if (!this.entitySlices[i].remove(entity)) {
             return;
         }
+        if (entitySlices[i] == entity.entitySlice) {
+            entity.entitySlice = null;
+        } else {
+            LogManager.getLogger().warn(entity + " was removed from a entitySlice we did not expect. Report this to https://github.com/PaperMC/Paper/issues/1223");
+            new Throwable().printStackTrace();
+        }
         this.markDirty();
         if (entity instanceof EntityItem) {
             itemCounts[i]--;
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index e657778469..85358902ff 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -63,6 +63,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
             }
         }
     };
+    Object entitySlice = null;
     // Paper end
     static boolean isLevelAtLeast(NBTTagCompound tag, int level) {
         return tag.hasKey("Bukkit.updateLevel") && tag.getInt("Bukkit.updateLevel") >= level;
-- 
2.18.0

