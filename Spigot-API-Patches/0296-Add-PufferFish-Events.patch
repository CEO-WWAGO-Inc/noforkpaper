From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: HexedHero <6012891+HexedHero@users.noreply.github.com>
Date: Mon, 10 May 2021 16:58:38 +0100
Subject: [PATCH] Add PufferFish Events


diff --git a/src/main/java/io/papermc/paper/event/entity/PufferFishDeflateEvent.java b/src/main/java/io/papermc/paper/event/entity/PufferFishDeflateEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..012bbd924ae064e95ef6895035b29a4df8a129e8
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/entity/PufferFishDeflateEvent.java
@@ -0,0 +1,60 @@
+package io.papermc.paper.event.entity;
+
+import org.bukkit.entity.PufferFish;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.EntityEvent;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called just before a {@link PufferFish} deflates.
+ */
+public class PufferFishDeflateEvent extends EntityEvent implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+    private boolean cancelled;
+    private int newPuffState;
+
+    public PufferFishDeflateEvent(@NotNull PufferFish entity, int newPuffState) {
+        super(entity);
+    }
+
+    @NotNull
+    @Override
+    public PufferFish getEntity() {
+        return (PufferFish) entity;
+    }
+
+    /**
+     * Get the <strong>new</strong> puff state of the {@link PufferFish}.
+     * @return The <strong>new</strong> puff state, 0 being fully deflated and 1 being slightly deflated.
+     */
+    public int getNewPuffState() {
+        return this.newPuffState;
+    }
+
+    /**
+     * Set whether or not to cancel the {@link PufferFish} deflating.
+     *
+     * @param cancel true if you wish to cancel the deflation
+     */
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/event/entity/PufferFishInflateEvent.java b/src/main/java/io/papermc/paper/event/entity/PufferFishInflateEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..8e0825be639eaf2a658a7a76ae002c32c5960180
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/entity/PufferFishInflateEvent.java
@@ -0,0 +1,60 @@
+package io.papermc.paper.event.entity;
+
+import org.bukkit.entity.PufferFish;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.EntityEvent;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called just before a {@link PufferFish} inflates.
+ */
+public class PufferFishInflateEvent extends EntityEvent implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+    private boolean cancelled;
+    private int newPuffState;
+
+    public PufferFishInflateEvent(@NotNull PufferFish entity, int newPuffState) {
+        super(entity);
+    }
+
+    @NotNull
+    @Override
+    public PufferFish getEntity() {
+        return (PufferFish) entity;
+    }
+
+    /**
+     * Get the <strong>new</strong> puff state of the {@link PufferFish}.
+     * @return The <strong>new</strong> puff state, 1 being slightly inflated and 2 being fully inflated.
+     */
+    public int getNewPuffState() {
+        return this.newPuffState;
+    }
+
+    /**
+     * Set whether or not to cancel the {@link PufferFish} inflating.
+     *
+     * @param cancel true if you wish to cancel the inflation
+     */
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
