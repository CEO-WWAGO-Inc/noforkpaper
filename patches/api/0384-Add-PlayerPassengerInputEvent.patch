From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: leChapelierFou-D <regisgaia@hotmail.fr>
Date: Sun, 8 May 2022 23:43:15 +0000
Subject: [PATCH] Add PlayerPassengerInputEvent


diff --git a/src/main/java/io/papermc/paper/event/player/PlayerPassengerInputEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerPassengerInputEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..2b4ebf46a6173934adae76d59c3abef76e239dc8
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/player/PlayerPassengerInputEvent.java
@@ -0,0 +1,121 @@
+
+package io.papermc.paper.event.player;
+
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when player uses inputs when riding entity.
+ */
+public class PlayerPassengerInputEvent extends PlayerEvent implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+
+    @NotNull
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+    private float coefVelocityX;
+    private float coefVelocityZ;
+    private boolean jumping;
+    private boolean crouching;
+    private boolean cancel;
+
+    public PlayerPassengerInputEvent(@NotNull Player who,
+                                     float coefVelocityX,
+                                     float coefVelocityZ,
+                                     boolean jumping,
+                                     boolean crouching) {
+        super(who);
+        this.coefVelocityX = coefVelocityX;
+        this.coefVelocityZ = coefVelocityZ;
+        this.jumping = jumping;
+        this.crouching = crouching;
+    }
+
+    /**
+     * Velocity coefficient for the X axis
+     * @return value of X axis
+     */
+    public float getCoefVelocityX() {
+        return coefVelocityX;
+    }
+
+    /**
+     * Set velocity coefficient for the Y axis
+     * Ignored if not between -1 to 1 include
+     * @param coefVelocityX between -1 to 1
+     */
+    public void setCoefVelocityX(float coefVelocityX) {
+        this.coefVelocityX = coefVelocityX;
+    }
+
+    /**
+     * Velocity coefficient for the Z axis
+     * @return value of Z axis
+     */
+    public float getCoefVelocityZ() {
+        return coefVelocityZ;
+    }
+
+    /**
+     * Set velocity coefficient for the Y axis
+     * Ignored if not between -1 to 1 include
+     * @param coefVelocityZ between -1 to 1
+     */
+    public void setCoefVelocityZ(float coefVelocityZ) {
+        this.coefVelocityZ = coefVelocityZ;
+    }
+
+    /**
+     * Get jump state of the player
+     * @return True if jumping
+     */
+    public boolean isJumping() {
+        return jumping;
+    }
+
+    /**
+     * Set the jump state
+     * @param jumping True to jump
+     */
+    public void setJumping(boolean jumping) {
+        this.jumping = jumping;
+    }
+
+    /**
+     * Get crouch state of the player
+     * @return True if crouching
+     */
+    public boolean isCrouching() {
+        return crouching;
+    }
+
+    /**
+     * Set the crouch state
+     * @param crouching True to crouch
+     */
+    public void setCrouching(boolean crouching) {
+        this.crouching = crouching;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancel;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancel = cancel;
+    }
+}
+
+
