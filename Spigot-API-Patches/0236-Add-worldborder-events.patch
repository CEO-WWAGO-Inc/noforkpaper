From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jacob <jacobblair6789@gmail.com>
Date: Mon, 16 Nov 2020 10:43:34 -0700
Subject: [PATCH] Add worldborder events


diff --git a/src/main/java/io/papermc/paper/event/world/StaticWorldBorderChangeEvent.java b/src/main/java/io/papermc/paper/event/world/StaticWorldBorderChangeEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..14f6c11bee7a4eacd6d47c8f507be3c139ab0098
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/world/StaticWorldBorderChangeEvent.java
@@ -0,0 +1,40 @@
+package io.papermc.paper.event.world;
+
+import org.bukkit.World;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.world.WorldEvent;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when the World Border is changed with a delay of {@code 0}
+ * Also called when {@code /worldborder add} is run
+ */
+public class StaticWorldBorderChangeEvent extends WorldEvent {
+
+    private static final HandlerList HANDLERS = new HandlerList();
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLERS;
+    }
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLERS;
+    }
+
+    private final double oldSize, newSize;
+
+    public StaticWorldBorderChangeEvent(@NotNull World world, double oldSize, double newSize) {
+        super(world);
+        this.oldSize = oldSize;
+        this.newSize = newSize;
+    }
+
+    public double getOldSize() {
+        return oldSize;
+    }
+    public double getNewSize() {
+        return newSize;
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/event/world/WorldBorderCenterChangeEvent.java b/src/main/java/io/papermc/paper/event/world/WorldBorderCenterChangeEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..7a895d0b2edbb917f4704798eb639ae93f106a12
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/world/WorldBorderCenterChangeEvent.java
@@ -0,0 +1,53 @@
+package io.papermc.paper.event.world;
+
+import org.bukkit.Location;
+import org.bukkit.World;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.world.WorldEvent;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+
+public class WorldBorderCenterChangeEvent extends WorldEvent implements Cancellable {
+
+    private static final HandlerList HANDLERS = new HandlerList();
+    private boolean cancelled = false;
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLERS;
+    }
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLERS;
+    }
+
+    private final Location oldLocation;
+    private final Location newLocation;
+
+    public WorldBorderCenterChangeEvent(@NotNull World world, @Nullable Location oldLocation, @NotNull Location newLocation) {
+       super(world);
+       this.oldLocation=oldLocation;
+       this.newLocation=newLocation;
+    }
+
+    @Nullable
+    public Location getOldLocation() {
+        return oldLocation;
+    }
+    @NotNull
+    public Location getNewLocation() {
+        return newLocation;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled=cancel;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/event/world/WorldBorderChangeEvent.java b/src/main/java/io/papermc/paper/event/world/WorldBorderChangeEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..fb96a1f654f59ba48711efab5c48f5f64088b108
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/world/WorldBorderChangeEvent.java
@@ -0,0 +1,69 @@
+package io.papermc.paper.event.world;
+
+import org.bukkit.World;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.world.WorldEvent;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when the world border ticks over to a new size in a transition. Not called when you provide a delay of {@code 0} in {@code /worldborder set}.
+ */
+public class WorldBorderChangeEvent extends WorldEvent implements Cancellable {
+
+    private static final HandlerList HANDLERS = new HandlerList();
+
+    private boolean cancelled = false;
+
+    private final double minX;
+    private final double maxX;
+    private final double minZ;
+    private final double maxZ;
+    private final double size;
+
+    public WorldBorderChangeEvent(@NotNull World world, double minX, double maxX, double minZ, double maxZ, double size) {
+        super(world);
+        this.minX = minX;
+        this.maxX = maxX;
+        this.minZ = minZ;
+        this.maxZ = maxZ;
+        this.size = size;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLERS;
+    }
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLERS;
+    }
+
+
+    public double getMinX() {
+        return this.minX;
+    }
+    public double getMaxX() {
+        return this.maxX;
+    }
+    public double getMinZ() {
+        return this.minZ;
+    }
+    public double getMaxZ() {
+        return this.maxZ;
+    }
+    public double getSize() {
+        return this.size;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled=cancel;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/event/world/WorldBorderFinishChangeEvent.java b/src/main/java/io/papermc/paper/event/world/WorldBorderFinishChangeEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..6b17d4f3ddbf9e37510ce7be527a450e13416914
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/world/WorldBorderFinishChangeEvent.java
@@ -0,0 +1,39 @@
+package io.papermc.paper.event.world;
+
+import org.bukkit.World;
+import org.bukkit.WorldBorder;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.world.WorldEvent;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when the World Border finishes a transition. **Not** called on a static change (when the delay in {@code /worldborder set} is specified as {@code 0})
+ */
+public class WorldBorderFinishChangeEvent extends WorldEvent {
+
+    private static final HandlerList HANDLERS = new HandlerList();
+
+    private final WorldBorder border;
+
+    public WorldBorderFinishChangeEvent(@NotNull World world, @NotNull WorldBorder border) {
+        super(world);
+        this.border=border;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLERS;
+    }
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLERS;
+    }
+
+    @NotNull
+    public WorldBorder getWorldBorder() {
+        return border;
+    }
+
+
+}
diff --git a/src/main/java/io/papermc/paper/event/world/WorldBorderStartChangeEvent.java b/src/main/java/io/papermc/paper/event/world/WorldBorderStartChangeEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..8c89c29335c9f59c5a6e259eb3bfeeedeb40fe90
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/world/WorldBorderStartChangeEvent.java
@@ -0,0 +1,45 @@
+package io.papermc.paper.event.world;
+
+import org.bukkit.World;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.world.WorldEvent;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when the World Border starts a transition. **Not** called on a static change (when the delay in {@code /worldborder set} is specified as {@code 0})
+ */
+public class WorldBorderStartChangeEvent extends WorldEvent {
+
+    private static final HandlerList HANDLERS = new HandlerList();
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLERS;
+    }
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLERS;
+    }
+
+    private final double oldSize;
+    private final double newSize;
+    private final double timeTaken;
+
+    public WorldBorderStartChangeEvent(@NotNull World world, double oldSize, double newSize, double timeTaken) {
+        super(world);
+        this.oldSize = oldSize;
+        this.newSize = newSize;
+        this.timeTaken = timeTaken;
+    }
+    public double getOldSize() {
+        return oldSize;
+    }
+    public double getNewSize() {
+        return newSize;
+    }
+    public double getTimeTaken() {
+        return timeTaken;
+    }
+
+}
