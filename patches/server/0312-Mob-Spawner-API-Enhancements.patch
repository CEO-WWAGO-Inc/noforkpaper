From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: William Blake Galbreath <blake.galbreath@gmail.com>
Date: Fri, 19 Apr 2019 12:41:13 -0500
Subject: [PATCH] Mob Spawner API Enhancements

== AT ==
public net.minecraft.world.level.BaseSpawner isNearPlayer(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)Z
public net.minecraft.world.level.BaseSpawner delay(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;)V
public net.minecraft.world.level.BaseSpawner setNextSpawnData(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/SpawnData;)V

diff --git a/src/main/java/net/minecraft/world/level/BaseSpawner.java b/src/main/java/net/minecraft/world/level/BaseSpawner.java
index 6ba97a0b4f2cb15d5435657c8e8f5c71c6fee3db..c5a117308f051c20b81818ad91e0ca40177feb69 100644
--- a/src/main/java/net/minecraft/world/level/BaseSpawner.java
+++ b/src/main/java/net/minecraft/world/level/BaseSpawner.java
@@ -239,7 +239,13 @@ public abstract class BaseSpawner {
     }
 
     public void load(@Nullable Level world, BlockPos pos, CompoundTag nbt) {
+        // Paper start - use larger int if set
+        if (nbt.contains("Paper.Delay")) {
+            this.spawnDelay = nbt.getInt("Paper.Delay");
+        } else {
         this.spawnDelay = nbt.getShort("Delay");
+        }
+        // Paper end
         boolean flag = nbt.contains("SpawnData", 10);
 
         if (flag) {
@@ -262,9 +268,15 @@ public abstract class BaseSpawner {
             this.spawnPotentials = SimpleWeightedRandomList.single(this.nextSpawnData != null ? this.nextSpawnData : new SpawnData());
         }
 
+        // Paper start - use ints if set
+        if (nbt.contains("Paper.MinSpawnDelay", 99)) {
+            this.minSpawnDelay = nbt.getInt("Paper.MinSpawnDelay");
+            this.maxSpawnDelay = nbt.getInt("Paper.MaxSpawnDelay");
+            this.spawnCount = nbt.getShort("SpawnCount");
+        } else // Paper end
         if (nbt.contains("MinSpawnDelay", 99)) {
-            this.minSpawnDelay = nbt.getShort("MinSpawnDelay");
-            this.maxSpawnDelay = nbt.getShort("MaxSpawnDelay");
+            this.minSpawnDelay = nbt.getInt("MinSpawnDelay"); // Paper - short -> int
+            this.maxSpawnDelay = nbt.getInt("MaxSpawnDelay"); // Paper - short -> int
             this.spawnCount = nbt.getShort("SpawnCount");
         }
 
@@ -281,9 +293,20 @@ public abstract class BaseSpawner {
     }
 
     public CompoundTag save(CompoundTag nbt) {
-        nbt.putShort("Delay", (short) this.spawnDelay);
-        nbt.putShort("MinSpawnDelay", (short) this.minSpawnDelay);
-        nbt.putShort("MaxSpawnDelay", (short) this.maxSpawnDelay);
+        // Paper start
+        if (spawnDelay > Short.MAX_VALUE) {
+            nbt.putInt("Paper.Delay", this.spawnDelay);
+        }
+        nbt.putShort("Delay", (short) Math.min(Short.MAX_VALUE, this.spawnDelay));
+
+        if (minSpawnDelay > Short.MAX_VALUE || maxSpawnDelay > Short.MAX_VALUE) {
+            nbt.putInt("Paper.MinSpawnDelay", this.minSpawnDelay);
+            nbt.putInt("Paper.MaxSpawnDelay", this.maxSpawnDelay);
+        }
+
+        nbt.putShort("MinSpawnDelay", (short) Math.min(Short.MAX_VALUE, this.minSpawnDelay));
+        nbt.putShort("MaxSpawnDelay", (short) Math.min(Short.MAX_VALUE, this.maxSpawnDelay));
+        // Paper nbt
         nbt.putShort("SpawnCount", (short) this.spawnCount);
         nbt.putShort("MaxNearbyEntities", (short) this.maxNearbyEntities);
         nbt.putShort("RequiredPlayerRange", (short) this.requiredPlayerRange);
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftCreatureSpawner.java b/src/main/java/org/bukkit/craftbukkit/block/CraftCreatureSpawner.java
index e8f888b9e37454d9863fbaf0f0c3dc982d582f1e..95b01ddddb1ba90da495927099147e775fb4f7aa 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftCreatureSpawner.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftCreatureSpawner.java
@@ -129,4 +129,28 @@ public class CraftCreatureSpawner extends CraftBlockEntityState<SpawnerBlockEnti
     public void setSpawnRange(int spawnRange) {
         this.getSnapshot().getSpawner().spawnRange = spawnRange;
     }
+
+    // Paper start
+    @Override
+    public boolean isActivated() {
+        this.requirePlaced();
+        return this.getSnapshot().getSpawner().isNearPlayer(this.world.getHandle(), this.getPosition());
+    }
+
+    @Override
+    public void resetTimer() {
+        this.requirePlaced();
+        this.getSnapshot().getSpawner().delay(this.world.getHandle(), this.getPosition());
+    }
+
+    @Override
+    public void setSpawnedItem(org.bukkit.inventory.ItemStack itemStack) {
+        Preconditions.checkArgument(itemStack != null && !itemStack.getType().isAir(), "spawners cannot spawn air");
+        net.minecraft.world.item.ItemStack item = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(itemStack);
+        net.minecraft.nbt.CompoundTag entity = new net.minecraft.nbt.CompoundTag();
+        entity.putString("id", net.minecraft.core.registries.BuiltInRegistries.ENTITY_TYPE.getKey(net.minecraft.world.entity.EntityType.ITEM).toString());
+        entity.put("Item", item.save(new net.minecraft.nbt.CompoundTag()));
+        this.getSnapshot().getSpawner().setNextSpawnData(this.isPlaced() ? this.world.getHandle() : null, this.getPosition(), new net.minecraft.world.level.SpawnData(entity, java.util.Optional.empty()));
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartMobSpawner.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartMobSpawner.java
index cc55a78d899c2b1e740e6364eb4c1d08b7bdf737..617a4d896bfbbadc727a1ef6d7e666eb045a2a5b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartMobSpawner.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartMobSpawner.java
@@ -19,4 +19,123 @@ final class CraftMinecartMobSpawner extends CraftMinecart implements SpawnerMine
     public EntityType getType() {
         return EntityType.MINECART_MOB_SPAWNER;
     }
+
+    // Paper start
+    @Override
+    public MinecartSpawner getHandle() {
+        return (MinecartSpawner) super.getHandle();
+    }
+
+    @Override
+    public EntityType getSpawnedType() {
+        var spawnData = getHandle().getSpawner().nextSpawnData;
+        if (spawnData == null) {
+            return EntityType.PIG;
+        }
+
+        var type = net.minecraft.world.entity.EntityType.by(spawnData.getEntityToSpawn());
+        return type.isEmpty() ? EntityType.PIG : EntityType.fromName(net.minecraft.world.entity.EntityType.getKey(type.get()).getPath());
+    }
+
+    @Override
+    public void setSpawnedType(EntityType entityType) {
+        if (entityType == null || entityType.getName() == null) {
+            throw new IllegalArgumentException("Can't spawn EntityType " + entityType + " from mobspawners!");
+        }
+
+        getHandle().getSpawner().setEntityId(net.minecraft.world.entity.EntityType.byString(entityType.getName()).get(),
+            getHandle().getLevel(), getHandle().getLevel().getRandom(), getHandle().blockPosition());
+    }
+
+    @Override
+    public int getDelay() {
+        return getHandle().getSpawner().spawnDelay;
+    }
+
+    @Override
+    public void setDelay(int delay) {
+        getHandle().getSpawner().spawnDelay = delay;
+    }
+
+    @Override
+    public int getMinSpawnDelay() {
+        return getHandle().getSpawner().minSpawnDelay;
+    }
+
+    @Override
+    public void setMinSpawnDelay(int delay) {
+        getHandle().getSpawner().minSpawnDelay = delay;
+    }
+
+    @Override
+    public int getMaxSpawnDelay() {
+        return getHandle().getSpawner().maxSpawnDelay;
+    }
+
+    @Override
+    public void setMaxSpawnDelay(int delay) {
+        getHandle().getSpawner().maxSpawnDelay = delay;
+    }
+
+    @Override
+    public int getSpawnCount() {
+        return getHandle().getSpawner().spawnCount;
+    }
+
+    @Override
+    public void setSpawnCount(int spawnCount) {
+        getHandle().getSpawner().spawnCount = spawnCount;
+    }
+
+    @Override
+    public int getMaxNearbyEntities() {
+        return getHandle().getSpawner().maxNearbyEntities;
+    }
+
+    @Override
+    public void setMaxNearbyEntities(int maxNearbyEntities) {
+        getHandle().getSpawner().maxNearbyEntities = maxNearbyEntities;
+    }
+
+    @Override
+    public int getRequiredPlayerRange() {
+        return getHandle().getSpawner().requiredPlayerRange;
+    }
+
+    @Override
+    public void setRequiredPlayerRange(int requiredPlayerRange) {
+        getHandle().getSpawner().requiredPlayerRange = requiredPlayerRange;
+    }
+
+    @Override
+    public int getSpawnRange() {
+        return getHandle().getSpawner().spawnRange;
+    }
+
+    @Override
+    public void setSpawnRange(int spawnRange) {
+        getHandle().getSpawner().spawnRange = spawnRange;
+    }
+
+    @Override
+    public boolean isActivated() {
+        return getHandle().getSpawner().isNearPlayer(getHandle().getLevel(), getHandle().blockPosition());
+    }
+
+    @Override
+    public void resetTimer() {
+        getHandle().getSpawner().delay(getHandle().getLevel(), getHandle().blockPosition());
+    }
+
+    @Override
+    public void setSpawnedItem(org.bukkit.inventory.ItemStack itemStack) {
+        com.google.common.base.Preconditions.checkArgument(itemStack != null && !itemStack.getType().isAir(),
+            "spawners cannot spawn air");
+        net.minecraft.world.item.ItemStack item = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(itemStack);
+        net.minecraft.nbt.CompoundTag entity = new net.minecraft.nbt.CompoundTag();
+        entity.putString("id", net.minecraft.core.registries.BuiltInRegistries.ENTITY_TYPE.getKey(net.minecraft.world.entity.EntityType.ITEM).toString());
+        entity.put("Item", item.save(new net.minecraft.nbt.CompoundTag()));
+        getHandle().getSpawner().setNextSpawnData(getHandle().getLevel(), getHandle().blockPosition(),
+            new net.minecraft.world.level.SpawnData(entity, java.util.Optional.empty()));
+    }
 }
