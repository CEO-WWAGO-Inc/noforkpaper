From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tassu <git@tassu.me>
Date: Thu, 13 Sep 2018 08:45:21 +0300
Subject: [PATCH] Implement furnace cook speed multiplier API

Signed-off-by: Tassu <git@tassu.me

Fixed an issue where a furnace's cook-speed multiplier rounds down
to the nearest Integer when updating its current cook time.

Modified by: Eric Su <ericsu@alumni.usc.edu>

diff --git a/src/main/java/net/minecraft/server/TileEntityFurnace.java b/src/main/java/net/minecraft/server/TileEntityFurnace.java
index 99b20fa5feff0f766124d4ec9474852e33e329f2..75b499bcefe48c868397fa435b204895c873eb77 100644
--- a/src/main/java/net/minecraft/server/TileEntityFurnace.java
+++ b/src/main/java/net/minecraft/server/TileEntityFurnace.java
@@ -10,6 +10,8 @@ import java.util.List;
 import java.util.Map;
 import javax.annotation.Nullable;
 // CraftBukkit start
+import java.util.List;
+
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
@@ -28,6 +30,7 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I
     protected NonNullList<ItemStack> items;
     public int burnTime;
     private int ticksForCurrentFuel;
+    public double cookSpeedMultiplier = 1.0; // Paper - cook speed multiplier API
     public int cookTime;
     public int cookTimeTotal;
     protected final IContainerProperties b;
@@ -228,6 +231,11 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I
             this.n.put(new MinecraftKey(s), nbttagcompound1.getInt(s));
         }
 
+        // Paper start - cook speed API
+        if (nbttagcompound.hasKey("Paper.CookSpeedMultiplier")) {
+            this.cookSpeedMultiplier = nbttagcompound.getDouble("Paper.CookSpeedMultiplier");
+        }
+        // Paper end
     }
 
     @Override
@@ -236,6 +244,7 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I
         nbttagcompound.setShort("BurnTime", (short) this.burnTime);
         nbttagcompound.setShort("CookTime", (short) this.cookTime);
         nbttagcompound.setShort("CookTimeTotal", (short) this.cookTimeTotal);
+        nbttagcompound.setDouble("Paper.CookSpeedMultiplier", this.cookSpeedMultiplier); // Paper - cook speed multiplier API
         ContainerUtil.a(nbttagcompound, this.items);
         NBTTagCompound nbttagcompound1 = new NBTTagCompound();
 
@@ -295,13 +304,18 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I
                 }
 
                 if (this.isBurning() && this.canBurn(irecipe)) {
+                    // Paper start
                     ++this.cookTime;
-                    if (this.cookTime == this.cookTimeTotal) {
+                    /* Scales cookTimeTotal to the current cookSpeedMultiplier.
+                     * Math.ceil is used  to replicate the previous behavior
+                     * of incrementing cookTime by the its cookSpeedMultiplier. */
+                    if (this.cookTime >= (int) Math.ceil(this.cookTimeTotal / this.cookSpeedMultiplier)) { // Paper - cook speed multiplier API
                         this.cookTime = 0;
                         this.cookTimeTotal = this.getRecipeCookingTime();
                         this.burn(irecipe);
                         flag1 = true;
                     }
+                    // Paper end
                 } else {
                     this.cookTime = 0;
                 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java b/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
index e0e10feeb1608c46effd6104f64db50977f468fe..231c115635c4b4ecf1c2201a9e5a55fea98be080 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
@@ -63,4 +63,18 @@ public abstract class CraftFurnace<T extends TileEntityFurnace> extends CraftCon
     public void setCookTimeTotal(int cookTimeTotal) {
         this.getSnapshot().cookTimeTotal = cookTimeTotal;
     }
+
+    // Paper start - cook speed multiplier API
+    @Override
+    public double getCookSpeedMultiplier() {
+        return this.getSnapshot().cookSpeedMultiplier;
+    }
+
+    @Override
+    public void setCookSpeedMultiplier(double multiplier) {
+        com.google.common.base.Preconditions.checkArgument(multiplier >= 0, "Furnace speed multiplier cannot be negative");
+        com.google.common.base.Preconditions.checkArgument(multiplier <= 200, "Furnace speed multiplier cannot more than 200");
+        this.getSnapshot().cookSpeedMultiplier = multiplier;
+    }
+    // Paper end
 }
