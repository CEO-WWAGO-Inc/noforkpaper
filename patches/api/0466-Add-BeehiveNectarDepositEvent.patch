From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: maxcom1 <46265094+maxcom1@users.noreply.github.com>
Date: Fri, 8 Mar 2024 18:05:05 +0100
Subject: [PATCH] Add BeehiveNectarDepositEvent


diff --git a/src/main/java/io/papermc/paper/event/block/BeehiveNectarDepositEvent.java b/src/main/java/io/papermc/paper/event/block/BeehiveNectarDepositEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..8feaee4bb79fbf4c03e11f383d4b79f2f67883af
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/block/BeehiveNectarDepositEvent.java
@@ -0,0 +1,115 @@
+package io.papermc.paper.event.block;
+
+import org.bukkit.block.Block;
+import org.bukkit.entity.Bee;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.block.BlockEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Fired when Bee's nectar is deposited into the Beehive.
+ * <p>
+ * The event is fired right after the bee is released, only if there is a space in the hive for new nectar
+ */
+public class BeehiveNectarDepositEvent extends BlockEvent implements Cancellable {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    private final Bee bee;
+    private final int depositedNectar;
+    private final int oldHoneyLevel;
+    private int newHoneyLevel;
+
+    private boolean cancelled;
+
+    @ApiStatus.Internal
+    public BeehiveNectarDepositEvent(@NotNull Bee bee, @NotNull Block block, int depositedNectar, int oldHoneyLevel, int newHoneyLevel) {
+        super(block);
+
+        this.bee = bee;
+        this.depositedNectar = depositedNectar;
+        this.oldHoneyLevel = oldHoneyLevel;
+        this.newHoneyLevel = newHoneyLevel;
+    }
+
+    /**
+     * Returns the bee whose nectar has been deposited in the hive
+     *
+     * @return Bee that filled the hive with nectar
+     */
+    @NotNull
+    public Bee getEntity() {
+        return this.bee;
+    }
+
+    /**
+     * Returns the amount of nectar that the bee deposits to the hive
+     * <p>
+     * The honey level of the hive will be increased by this number, up to a maximum of level 5.
+     * The amount may be 1 or 2
+     *
+     * @return Deposited nectar amount
+     */
+    public int getDepositedNectar() {
+        return this.depositedNectar;
+    }
+
+    /**
+     * Returns the honey level of the hive before depositing nectar
+     *
+     * @return Hive's honey level before depositing
+     */
+    public int getOldHoneyLevel() {
+        return this.oldHoneyLevel;
+    }
+
+    /**
+     * Returns the honey level of the hive after depositing nectar
+     * <p>
+     * The hive's honey level will be set to this value if this event is not cancelled
+     *
+     * @return Hive's honey level after depositing
+     */
+    public int getNewHoneyLevel() {
+        return this.newHoneyLevel;
+    }
+
+    /**
+     * Sets the honey level of the hive after depositing nectar
+     * <p>
+     * The hive's honey level will be set to this value if this event is not cancelled
+     *
+     * @param honeyLevel new hive's honey level. Must be greater than or equal to 0 and less than or equal to 5
+     */
+    public void setNewHoneyLevel(int honeyLevel) {
+        if (honeyLevel > 5) {
+            throw new IllegalArgumentException("Honey level can't be larger than 5. Provided: " + honeyLevel);
+        }
+
+        this.newHoneyLevel = honeyLevel;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+
+}
