From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Color_yr <402067010@qq.com>
Date: Thu, 28 Dec 2023 20:28:40 +0800
Subject: [PATCH] full support for UnixDomainSocketAddress


diff --git a/src/main/java/com/destroystokyo/paper/network/PaperLegacyStatusClient.java b/src/main/java/com/destroystokyo/paper/network/PaperLegacyStatusClient.java
index cc54b1c207981235b5160e8773b27cf9a5dcd4d5..5570a2ce2d0488caeaed57c93e302e6340b60890 100644
--- a/src/main/java/com/destroystokyo/paper/network/PaperLegacyStatusClient.java
+++ b/src/main/java/com/destroystokyo/paper/network/PaperLegacyStatusClient.java
@@ -7,16 +7,17 @@ import net.minecraft.server.MinecraftServer;
 import org.apache.commons.lang3.StringUtils;
 
 import java.net.InetSocketAddress;
+import java.net.SocketAddress;
 
 import javax.annotation.Nullable;
 
 public final class PaperLegacyStatusClient implements StatusClient {
 
-    private final InetSocketAddress address;
+    private final SocketAddress address;
     private final int protocolVersion;
-    @Nullable private final InetSocketAddress virtualHost;
+    @Nullable private final SocketAddress virtualHost;
 
-    private PaperLegacyStatusClient(InetSocketAddress address, int protocolVersion, @Nullable InetSocketAddress virtualHost) {
+    private PaperLegacyStatusClient(SocketAddress address, int protocolVersion, @Nullable SocketAddress virtualHost) {
         this.address = address;
         this.protocolVersion = protocolVersion;
         this.virtualHost = virtualHost;
@@ -24,6 +25,15 @@ public final class PaperLegacyStatusClient implements StatusClient {
 
     @Override
     public InetSocketAddress getAddress() {
+        if (this.address instanceof InetSocketAddress inet) {
+            return inet;
+        } else {
+            throw new UnsupportedOperationException("Address is UnixDomainSocketAddress");
+        }
+    }
+
+    @Override
+    public SocketAddress getSocketAddress() {
         return this.address;
     }
 
@@ -35,6 +45,15 @@ public final class PaperLegacyStatusClient implements StatusClient {
     @Nullable
     @Override
     public InetSocketAddress getVirtualHost() {
+        if (this.virtualHost instanceof InetSocketAddress inet) {
+            return inet;
+        }
+        return null;
+    }
+
+    // for UnixDomainSocketAddress
+    @Override
+    public SocketAddress getSocketVirtualHost() {
         return this.virtualHost;
     }
 
@@ -44,7 +63,7 @@ public final class PaperLegacyStatusClient implements StatusClient {
     }
 
     public static PaperServerListPingEvent processRequest(MinecraftServer server,
-            InetSocketAddress address, int protocolVersion, @Nullable InetSocketAddress virtualHost) {
+            SocketAddress address, int protocolVersion, @Nullable InetSocketAddress virtualHost) {
 
         PaperServerListPingEvent event =  new PaperServerListPingEventImpl(server,
                 new PaperLegacyStatusClient(address, protocolVersion, virtualHost), Byte.MAX_VALUE, null);
diff --git a/src/main/java/com/destroystokyo/paper/network/PaperNetworkClient.java b/src/main/java/com/destroystokyo/paper/network/PaperNetworkClient.java
index a5a7624f1f372a26b982836cd31cff15e2589e9b..8b63cebea509c59d722bfcdca940640866beca2d 100644
--- a/src/main/java/com/destroystokyo/paper/network/PaperNetworkClient.java
+++ b/src/main/java/com/destroystokyo/paper/network/PaperNetworkClient.java
@@ -1,9 +1,11 @@
 package com.destroystokyo.paper.network;
 
 import java.net.InetSocketAddress;
+import java.net.SocketAddress;
 
 import javax.annotation.Nullable;
 import net.minecraft.network.Connection;
+import org.jetbrains.annotations.NotNull;
 
 public class PaperNetworkClient implements NetworkClient {
 
@@ -15,7 +17,17 @@ public class PaperNetworkClient implements NetworkClient {
 
     @Override
     public InetSocketAddress getAddress() {
-        return (InetSocketAddress) this.networkManager.getRemoteAddress();
+        SocketAddress socket = this.networkManager.getRemoteAddress();
+        if (socket instanceof InetSocketAddress inet) {
+            return inet;
+        } else {
+            throw new UnsupportedOperationException("Address is UnixDomainSocketAddress");
+        }
+    }
+
+    @Override
+    public @NotNull SocketAddress getSocketAddress() {
+        return this.networkManager.getRemoteAddress();
     }
 
     @Override
@@ -29,6 +41,11 @@ public class PaperNetworkClient implements NetworkClient {
         return this.networkManager.virtualHost;
     }
 
+    @Override
+    public SocketAddress getSocketVirtualHost() {
+        return this.networkManager.getRemoteAddress();
+    }
+
     public static InetSocketAddress prepareVirtualHost(String host, int port) {
         int len = host.length();
 
diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 2ae08b21c63490bbf8cd870f9585d82ed131f815..5b62385cf3e8c9b34224b926689b596c4be863a3 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -843,7 +843,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
                     /* Player was logged in, either game listener or configuration listener */
                     final com.mojang.authlib.GameProfile profile = commonPacketListener.getOwner();
                     new com.destroystokyo.paper.event.player.PlayerConnectionCloseEvent(profile.getId(),
-                        profile.getName(), ((java.net.InetSocketAddress)address).getAddress(), false).callEvent();
+                        profile.getName(), address, false).callEvent(); // Paper - for UnixDomainSocketAddress
                 } else if (packetListener instanceof net.minecraft.server.network.ServerLoginPacketListenerImpl loginListener) {
                     /* Player is login stage */
                     switch (loginListener.state) {
@@ -852,8 +852,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
                         case PROTOCOL_SWITCHING:
                         case ACCEPTED:
                             final com.mojang.authlib.GameProfile profile = loginListener.authenticatedProfile; /* Should be non-null at this stage */
-                            new com.destroystokyo.paper.event.player.PlayerConnectionCloseEvent(profile.getId(), profile.getName(),
-                                ((java.net.InetSocketAddress)address).getAddress(), false).callEvent();
+                            new com.destroystokyo.paper.event.player.PlayerConnectionCloseEvent(profile.getId(), profile.getName(), address, false).callEvent(); // Paper - for UnixDomainSocketAddress
                     }
                 }
                 // Paper end
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 0eb3384df396508c3d26d1e155cd0e6d64251346..c0a61a99ee7a27bf70c9225f3309da2453f91eae 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -17,6 +17,7 @@ import java.util.OptionalInt;
 import java.util.Set;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
+import io.netty.channel.unix.DomainSocketAddress;
 import net.minecraft.BlockUtil;
 import net.minecraft.ChatFormatting;
 import net.minecraft.CrashReport;
@@ -2116,7 +2117,13 @@ public class ServerPlayer extends Player {
             InetSocketAddress inetsocketaddress = (InetSocketAddress) socketaddress;
 
             return InetAddresses.toAddrString(inetsocketaddress.getAddress());
-        } else {
+        }
+        // Paper start - for UnixDomainSocketAddress
+        else if(socketaddress instanceof DomainSocketAddress address) {
+            return address.toString();
+        }
+        // Paper end
+        else {
             return "<unknown>";
         }
     }
diff --git a/src/main/java/net/minecraft/server/network/LegacyQueryHandler.java b/src/main/java/net/minecraft/server/network/LegacyQueryHandler.java
index 8f4a964a0863b1be834c1ea1e3d49092516f9258..3339ed2f78f61ceb68f825dd8323145164ac69de 100644
--- a/src/main/java/net/minecraft/server/network/LegacyQueryHandler.java
+++ b/src/main/java/net/minecraft/server/network/LegacyQueryHandler.java
@@ -211,7 +211,7 @@ public class LegacyQueryHandler extends ChannelInboundHandlerAdapter {
 
         java.net.InetSocketAddress virtualHost = com.destroystokyo.paper.network.PaperNetworkClient.prepareVirtualHost(host, port);
         com.destroystokyo.paper.event.server.PaperServerListPingEvent event = com.destroystokyo.paper.network.PaperLegacyStatusClient.processRequest(
-                server, (java.net.InetSocketAddress) ctx.channel().remoteAddress(), protocolVersion, virtualHost);
+                server, ctx.channel().remoteAddress(), protocolVersion, virtualHost); // Paper - for UnixDomainSocketAddress
         if (event == null) {
             ctx.close();
             return null;
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 30ccbab1586a656e0ae41d7406525fb02d9e025b..7982c5f352cde0f192dec6bbb8f4ac9e9a3eb438 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -2658,9 +2658,9 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
     public SocketAddress getRawAddress()
     {
         // Paper start - this can be nullable in the case of a Unix domain socket, so if it is, fake something
-        if (connection.channel.remoteAddress() == null) {
-            return new java.net.InetSocketAddress(java.net.InetAddress.getLoopbackAddress(), 0);
-        }
+        // if (connection.channel.remoteAddress() == null) {
+        //     return new java.net.InetSocketAddress(java.net.InetAddress.getLoopbackAddress(), 0);
+        // }
         // Paper end
         return this.connection.channel.remoteAddress();
     }
diff --git a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
index d2edc000f34d7f07a840bb8012c6f884f37e387b..d59aca30b040c0ecd9aadbefa639c3d25e031572 100644
--- a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
@@ -1,5 +1,6 @@
 package net.minecraft.server.network;
 
+import io.netty.channel.unix.DomainSocketAddress;
 import net.minecraft.SharedConstants;
 import net.minecraft.network.Connection;
 import net.minecraft.network.chat.Component;
@@ -120,7 +121,13 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
                                 packet.intention()
                             );
                         }
-                        if (event.getSocketAddressHostname() != null) this.connection.address = new java.net.InetSocketAddress(event.getSocketAddressHostname(), socketAddress instanceof java.net.InetSocketAddress ? ((java.net.InetSocketAddress) socketAddress).getPort() : 0);
+                        if (event.getSocketAddressHostname() != null) {
+                            if (event.getSocketAddressHostname().startsWith("unix:")) {
+                                this.connection.address = new DomainSocketAddress(event.getSocketAddressHostname().substring("unix:".length()));
+                            } else {
+                                this.connection.address = new java.net.InetSocketAddress(event.getSocketAddressHostname(), socketAddress instanceof java.net.InetSocketAddress ? ((java.net.InetSocketAddress) socketAddress).getPort() : 0);
+                            }
+                        }
                         this.connection.spoofedUUID = event.getUniqueId();
                         this.connection.spoofedProfile = gson.fromJson(event.getPropertiesJson(), com.mojang.authlib.properties.Property[].class);
                         handledByEvent = true; // Hooray, we did it!
@@ -136,9 +143,13 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
                             // Paper start - Unix domain socket support
                             java.net.SocketAddress socketAddress = this.connection.getRemoteAddress();
                             this.connection.hostname = split[0];
-                            this.connection.address = new java.net.InetSocketAddress(split[1], socketAddress instanceof java.net.InetSocketAddress ? ((java.net.InetSocketAddress) socketAddress).getPort() : 0);
+                            if (socketAddress instanceof DomainSocketAddress) {
+                                this.connection.address = new DomainSocketAddress(split[1]);
+                            } else {
+                                this.connection.address = new java.net.InetSocketAddress(split[1], socketAddress instanceof java.net.InetSocketAddress ? ((java.net.InetSocketAddress) socketAddress).getPort() : 0);
+                            }
                             // Paper end
-                            this.connection.spoofedUUID = com.mojang.util.UndashedUuid.fromStringLenient( split[2] );
+                            this.connection.spoofedUUID = com.mojang.util.UndashedUuid.fromStringLenient(split[2]);
                         } else
                         {
                             Component chatmessage = Component.literal("If you wish to use IP forwarding, please enable it in your BungeeCord config as well!");
diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index 8ce2fd887d9c2cf86fa4ec0332b70681f1572911..6040323e99cf42885bc62a7d26fd680b13fda7f1 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -304,8 +304,8 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
                         }
                         // Paper end
                         String playerName = gameprofile.getName();
-                        java.net.InetAddress address = ((java.net.InetSocketAddress) ServerLoginPacketListenerImpl.this.connection.getRemoteAddress()).getAddress();
-                        java.net.InetAddress rawAddress = ((java.net.InetSocketAddress) ServerLoginPacketListenerImpl.this.connection.channel.remoteAddress()).getAddress(); // Paper
+                        java.net.SocketAddress address = ServerLoginPacketListenerImpl.this.connection.getRemoteAddress(); // Paper - for UnixDomainSocketAddress
+                        java.net.SocketAddress rawAddress = ServerLoginPacketListenerImpl.this.connection.channel.remoteAddress(); // Paper - for UnixDomainSocketAddress
                         java.util.UUID uniqueId = gameprofile.getId();
                         final org.bukkit.craftbukkit.CraftServer server = ServerLoginPacketListenerImpl.this.server.server;
 
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index e98a455b6bca9d094d0da323bddd7b3f2c07bb23..edc7d66d58fcc8eb5c95cabb7bfb0f4d9e9f55b9 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -724,7 +724,7 @@ public abstract class PlayerList {
 
         ServerPlayer entity = new ServerPlayer(this.server, this.server.getLevel(Level.OVERWORLD), gameprofile, ClientInformation.createDefault());
         Player player = entity.getBukkitEntity();
-        PlayerLoginEvent event = new PlayerLoginEvent(player, loginlistener.connection.hostname, ((java.net.InetSocketAddress) socketaddress).getAddress(), ((java.net.InetSocketAddress) loginlistener.connection.channel.remoteAddress()).getAddress());
+        PlayerLoginEvent event = new PlayerLoginEvent(player, loginlistener.connection.hostname, socketaddress, loginlistener.connection.channel.remoteAddress()); // Paper - for UnixDomainSocketAddress
 
         // Paper start - Fix MC-158900
         UserBanListEntry gameprofilebanentry;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 2ec8b8f65661001716d1cb34dcc21cda7286e5d7..ae32bef35c68df959bac3b930dcffe6abcbdb4da 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -298,6 +298,15 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
 
+    // Paper start - for UnixDomainSocketAddress
+    @Override
+    public @NotNull SocketAddress getSocketAddress() {
+        if (this.getHandle().connection == null) return null;
+
+        return this.getHandle().connection.getRemoteAddress();
+    }
+    // Paper end
+
     // Paper start - Implement NetworkClient
     @Override
     public int getProtocolVersion() {
@@ -310,6 +319,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         if (getHandle().connection == null) return null;
         return getHandle().connection.connection.virtualHost;
     }
+
+    // Paper start - for UnixDomainSocketAddress
+    @Override
+    public SocketAddress getSocketVirtualHost() {
+        return null;
+    }
     // Paper end
 
     @Override
@@ -3220,12 +3235,27 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private final Player.Spigot spigot = new Player.Spigot()
     {
 
+        // Paper start - for UnixDomainSocketAddress
         @Override
         public InetSocketAddress getRawAddress()
         {
-            return (InetSocketAddress) CraftPlayer.this.getHandle().connection.getRawAddress();
+            if (CraftPlayer.this.getHandle().connection.getRawAddress() instanceof InetSocketAddress address)
+            {
+                return address;
+            }
+            else
+            {
+                throw new UnsupportedOperationException("Address is UnixDomainSocketAddress");
+            }
         }
 
+        @Override
+        public SocketAddress getSocketRawAddress()
+        {
+            return CraftPlayer.this.getHandle().connection.getRawAddress();
+        }
+        // Paper end
+
         @Override
         public void respawn()
         {
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index f67ec3f5f4b7e2f678609f2387cc8afa2adce161..02a66e8e89fcf02c379bc92c6d1b9e93905b6058 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -1044,7 +1044,7 @@ public class CraftEventFactory {
      * Server methods
      */
     public static ServerListPingEvent callServerListPingEvent(SocketAddress address, String motd, int numPlayers, int maxPlayers) {
-        ServerListPingEvent event = new ServerListPingEvent("", ((InetSocketAddress) address).getAddress(), Bukkit.getServer().motd(), numPlayers, maxPlayers);
+        ServerListPingEvent event = new ServerListPingEvent("", address, Bukkit.getServer().motd(), numPlayers, maxPlayers); // Paper - for UnixDomainSocketAddress
         Bukkit.getServer().getPluginManager().callEvent(event);
         return event;
     }
