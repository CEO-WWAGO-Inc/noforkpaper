From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Flo0 <flo.roma@web.de>
Date: Sat, 6 Apr 2024 23:15:24 +0200
Subject: [PATCH] Add listing API for PlayerProfile


diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java
index 56eddd28429cf42c02d88b8bf79f8b616fa45289..04a7ad0381cfdb9d5ff913f82553ecbc5dfbc78f 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java
@@ -68,6 +68,30 @@ public class ClientboundPlayerInfoUpdatePacket implements Packet<ClientGamePacke
         return new ClientboundPlayerInfoUpdatePacket(enumSet, new ClientboundPlayerInfoUpdatePacket.Entry(playerInfoId, listed));
     }
     // Paper end - Add Listing API for Player
+    // Paper start - Add Listing API for PlayerProfile
+    public static ClientboundPlayerInfoUpdatePacket addAndList(UUID playerInfoId, int latency, GameType gameMode, @Nullable Component displayName) {
+        EnumSet<ClientboundPlayerInfoUpdatePacket.Action> enumSet = EnumSet.of(
+            ClientboundPlayerInfoUpdatePacket.Action.ADD_PLAYER,
+            ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LISTED,
+            ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LATENCY,
+            ClientboundPlayerInfoUpdatePacket.Action.UPDATE_GAME_MODE,
+            ClientboundPlayerInfoUpdatePacket.Action.UPDATE_DISPLAY_NAME
+        );
+        return new ClientboundPlayerInfoUpdatePacket(enumSet, new ClientboundPlayerInfoUpdatePacket.Entry(playerInfoId, true, latency, gameMode, displayName));
+    }
+    public static ClientboundPlayerInfoUpdatePacket updateLatency(UUID playerInfoId, int latency) {
+        EnumSet<ClientboundPlayerInfoUpdatePacket.Action> enumSet = EnumSet.of(ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LATENCY);
+        return new ClientboundPlayerInfoUpdatePacket(enumSet, new ClientboundPlayerInfoUpdatePacket.Entry(playerInfoId, true, latency, GameType.DEFAULT_MODE, null));
+    }
+    public static ClientboundPlayerInfoUpdatePacket updateGameMode(UUID playerInfoId, GameType gameMode) {
+        EnumSet<ClientboundPlayerInfoUpdatePacket.Action> enumSet = EnumSet.of(ClientboundPlayerInfoUpdatePacket.Action.UPDATE_GAME_MODE);
+        return new ClientboundPlayerInfoUpdatePacket(enumSet, new ClientboundPlayerInfoUpdatePacket.Entry(playerInfoId, true, 0, gameMode, null));
+    }
+    public static ClientboundPlayerInfoUpdatePacket updateDisplayName(UUID playerInfoId, @Nullable Component displayName) {
+        EnumSet<ClientboundPlayerInfoUpdatePacket.Action> enumSet = EnumSet.of(ClientboundPlayerInfoUpdatePacket.Action.UPDATE_DISPLAY_NAME);
+        return new ClientboundPlayerInfoUpdatePacket(enumSet, new ClientboundPlayerInfoUpdatePacket.Entry(playerInfoId, true, 0, GameType.DEFAULT_MODE, displayName));
+    }
+    // Paper end - Add Listing API for PlayerProfile
 
     public ClientboundPlayerInfoUpdatePacket(FriendlyByteBuf buf) {
         this.actions = buf.readEnumSet(ClientboundPlayerInfoUpdatePacket.Action.class);
@@ -188,6 +212,11 @@ public class ClientboundPlayerInfoUpdatePacket implements Packet<ClientGamePacke
             this(profileId, null, listed, 0, GameType.DEFAULT_MODE, null, null);
         }
         // Paper end - Add Listing API for Player
+        // Paper start - Add Listing API for PlayerProfile
+        Entry(UUID profileId, boolean listed, int latency, GameType gameMode, @Nullable Component displayName) {
+            this(profileId, null, listed, latency, gameMode, displayName, null);
+        }
+        // Paper end - Add Listing API for PlayerProfile
     }
 
     static class EntryBuilder {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 616d2e479d91673695ade0db151a0099b568904f..434cdeb719d6fdeeace2b632297cb63527619372 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -20,6 +20,7 @@ import java.time.Instant;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Date;
+import java.util.EnumSet;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.LinkedHashMap;
@@ -148,7 +149,6 @@ import org.bukkit.craftbukkit.map.CraftMapView;
 import org.bukkit.craftbukkit.map.RenderData;
 import org.bukkit.craftbukkit.potion.CraftPotionEffectType;
 import org.bukkit.craftbukkit.potion.CraftPotionUtil;
-import org.bukkit.craftbukkit.profile.CraftPlayerProfile;
 import org.bukkit.craftbukkit.scoreboard.CraftScoreboard;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.craftbukkit.util.CraftLocation;
@@ -161,7 +161,6 @@ import org.bukkit.event.player.PlayerExpCooldownChangeEvent;
 import org.bukkit.event.player.PlayerHideEntityEvent;
 import org.bukkit.event.player.PlayerRegisterChannelEvent;
 import org.bukkit.event.player.PlayerShowEntityEvent;
-import org.bukkit.event.player.PlayerSpawnChangeEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.event.player.PlayerUnregisterChannelEvent;
 import org.bukkit.inventory.EquipmentSlot;
@@ -174,7 +173,6 @@ import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.messaging.StandardMessenger;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
-import org.bukkit.profile.PlayerProfile;
 import org.bukkit.scoreboard.Scoreboard;
 import org.jetbrains.annotations.NotNull;
 
@@ -2190,6 +2188,60 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     // Paper end - Add Listing API for Player
 
+    // Paper start - Add Listing API for PlayerProfile
+    @Override
+    public void listProfile(@NotNull com.destroystokyo.paper.profile.PlayerProfile profile, int latency, GameMode gameMode, @Nullable net.kyori.adventure.text.Component displayName) {
+        Preconditions.checkNotNull(profile, "profile cannot be null");
+        Preconditions.checkArgument(isOfflineProfile(profile), "using the profile of an online player is not allowed");
+        EnumSet<ClientboundPlayerInfoUpdatePacket.Action> enumSet = EnumSet.of(
+            ClientboundPlayerInfoUpdatePacket.Action.ADD_PLAYER,
+            ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LISTED
+        );
+        UUID profileId = profile.getId();
+        GameType type = GameType.byId(gameMode.getValue());
+        net.minecraft.network.chat.Component name = io.papermc.paper.adventure.PaperAdventure.asVanilla(displayName);
+        ClientboundPlayerInfoUpdatePacket packet = ClientboundPlayerInfoUpdatePacket.addAndList(profileId, latency, type, name);
+        this.getHandle().connection.send(packet);
+    }
+
+    @Override
+    public void updateListedProfileLatency(@NotNull com.destroystokyo.paper.profile.PlayerProfile profile, int latency) {
+        Preconditions.checkNotNull(profile, "profile cannot be null");
+        Preconditions.checkArgument(isOfflineProfile(profile), "using the profile of an online player is not allowed");
+        if (this.getHandle().connection == null) return;
+        this.getHandle().connection.send(ClientboundPlayerInfoUpdatePacket.updateLatency(profile.getId(), latency));
+    }
+
+    @Override
+    public void updateListedProfileGameMode(@NotNull com.destroystokyo.paper.profile.PlayerProfile profile, GameMode gameMode) {
+        Preconditions.checkNotNull(profile, "profile cannot be null");
+        Preconditions.checkArgument(isOfflineProfile(profile), "using the profile of an online player is not allowed");
+        if (this.getHandle().connection == null) return;
+        this.getHandle().connection.send(ClientboundPlayerInfoUpdatePacket.updateGameMode(profile.getId(), GameType.byId(gameMode.getValue())));
+    }
+
+    @Override
+    public void updateListedProfileDisplayName(@NotNull com.destroystokyo.paper.profile.PlayerProfile profile, @Nullable net.kyori.adventure.text.Component displayName) {
+        Preconditions.checkNotNull(profile, "profile cannot be null");
+        Preconditions.checkArgument(isOfflineProfile(profile), "using the profile of an online player is not allowed");
+        if (this.getHandle().connection == null) return;
+        this.getHandle().connection.send(ClientboundPlayerInfoUpdatePacket.updateDisplayName(profile.getId(), io.papermc.paper.adventure.PaperAdventure.asVanilla(displayName)));
+    }
+
+    @Override
+    public void unlistProfile(@NotNull com.destroystokyo.paper.profile.PlayerProfile profile) {
+        Preconditions.checkNotNull(profile, "profile cannot be null");
+        Preconditions.checkArgument(isOfflineProfile(profile), "using the profile of an online player is not allowed");
+        if (this.getHandle().connection == null) return;
+        this.getHandle().connection.send(ClientboundPlayerInfoUpdatePacket.updateListed(profile.getId(), false));
+    }
+
+    private boolean isOfflineProfile(@NotNull com.destroystokyo.paper.profile.PlayerProfile profile) {
+        UUID profileId = profile.getId();
+        return Bukkit.getPlayer(profileId) == null;
+    }
+    // Paper end - Add Listing API for PlayerProfile
+
     @Override
     public Map<String, Object> serialize() {
         Map<String, Object> result = new LinkedHashMap<String, Object>();
