From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: TheFruxz <cedricspitzer@outlook.de>
Date: Sun, 13 Jun 2021 15:02:50 +0200
Subject: [PATCH] Add enhanced Material/Item Color(Type)-API


diff --git a/src/main/java/io/papermc/paper/item/ColorType.java b/src/main/java/io/papermc/paper/item/ColorType.java
new file mode 100644
index 0000000000000000000000000000000000000000..868bcef247431b8b3dfcc47d742fd76baaccc87b
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/ColorType.java
@@ -0,0 +1,309 @@
+package io.papermc.paper.item;
+
+import net.kyori.adventure.text.format.TextColor;
+import net.md_5.bungee.api.ChatColor;
+import org.bukkit.Color;
+import org.bukkit.DyeColor;
+import org.bukkit.Material;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Set;
+
+/**
+ * Represents different kind of possible Colors, which colorable {@link Material}s also/and {@link DyeableMaterial}s can have
+ */
+public enum ColorType {
+
+    NONE,
+    WHITE,
+    ORANGE,
+    MAGENTA,
+    LIGHT_BLUE,
+    YELLOW,
+    LIME,
+    PINK,
+    GRAY,
+    LIGHT_GRAY,
+    CYAN,
+    PURPLE,
+    BLUE,
+    BROWN,
+    GREEN,
+    RED,
+    BLACK;
+
+    /**
+     * Gets all supported colored {@link Material}s, which can be used
+     * @return all possible colored {@link Material}s
+     */
+    public static Set<Material> getAllVariants() {
+        Set<Material> result = new java.util.HashSet<>(Collections.emptySet());
+
+        for (ColorType colorType : values()) {
+            result.addAll(
+                Arrays.asList(
+                    colorType.getWool(),
+                    colorType.getTerracotta(),
+                    colorType.getConcrete(),
+                    colorType.getConcretePowder(),
+                    colorType.getCarpet(),
+                    colorType.getStainedGlass(),
+                    colorType.getStainedGlassPane(),
+                    colorType.getShulkerBox(),
+                    colorType.getGlazedTerracotta(),
+                    colorType.getBed(),
+                    colorType.getBanner(),
+                    colorType.getBannerWall(),
+                    colorType.getDye()
+                )
+            );
+        }
+
+        return result;
+    }
+
+    /**
+     * Gets the {@link ColorType} of an {@link Material}
+     * @param material The {@link Material}, where the {@link ColorType} will come from
+     * @return the {@link ColorType} of the {@link Material} <i>material</i>, or null if it has no supported color
+     */
+    @Nullable
+    public static ColorType getColorType(Material material) {
+        Set<Material> allVariants = getAllVariants();
+        if (allVariants.stream().anyMatch(it -> it == material)) {
+            for (Material loopMaterial : allVariants) {
+                if (loopMaterial == material) {
+                    return valueOf(loopMaterial.name().split("_")[0]);
+                }
+            }
+        }
+        return null;
+    }
+
+    /**
+     * Gets this {@link ColorType} color as an {@link DyeColor}
+     * @return the {@link DyeColor} of this {@link ColorType}
+     */
+    public DyeColor getDyeColor() {
+        if (this == NONE) {
+            return DyeColor.WHITE;
+        } else
+            return DyeColor.valueOf(name());
+    }
+
+    /**
+     * Gets this {@link ColorType} color as an {@link Color}, maybe for particles
+     * @return the {@link Color} of this {@link ColorType}
+     */
+    public Color getParticleColor() {
+        Color result;
+        switch (this) {
+            case NONE:
+            case WHITE:         { result = Color.WHITE;     break; }
+            case ORANGE:        { result = Color.ORANGE;    break; }
+            case MAGENTA:       { result = Color.FUCHSIA;   break; }
+            case YELLOW:        { result = Color.YELLOW;    break; }
+            case LIME:          { result = Color.LIME;      break; }
+            case PINK:          { result = Color.fromRGB(255, 20, 147); break; }
+            case GRAY:          { result = Color.GRAY;      break; }
+            case LIGHT_GRAY:    { result = Color.SILVER;    break; }
+            case CYAN:          { result = Color.TEAL;      break; }
+            case PURPLE:        { result = Color.PURPLE;    break; }
+            case BLUE:          { result = Color.BLUE;      break; }
+            case BROWN:         { result = Color.MAROON;    break; }
+            case GREEN:         { result = Color.GREEN;     break; }
+            case RED:           { result = Color.RED;       break; }
+            case BLACK:         { result = Color.BLACK;     break; }
+            case LIGHT_BLUE:    { result = Color.AQUA;      break; }
+            default:
+                throw new IllegalStateException("Unexpected value: " + this);
+        }
+        return result;
+    }
+
+    /**
+     * Gets this {@link ColorType} color as an {@link TextColor}
+     * @return the {@link TextColor} of this {@link ColorType}
+     */
+    public TextColor getTextColor() {
+        Color convertColor = getParticleColor();
+        return TextColor.color(
+            convertColor.getRed(),
+            convertColor.getGreen(),
+            convertColor.getBlue()
+        );
+    }
+
+    /**
+     * Gets this {@link ColorType} color as an {@link ChatColor},
+     * but please keep in mind, please use Adventure-Chat components!
+     * @return the {@link ChatColor} of this {@link ColorType}
+     */
+    public ChatColor getChatColor() {
+        return ChatColor.of(new java.awt.Color(getParticleColor().asRGB()));
+    }
+
+    /**
+     * Gets this {@link ColorType} color as an colored Wool-{@link Material}
+     * @return the colored Wool of this {@link ColorType}
+     */
+    public Material getWool() {
+        if (this == ColorType.NONE) {
+            return DyeableMaterial.WOOL.getDefaultMaterial();
+        } else {
+            return Material.matchMaterial(this.name() + "_WOOL");
+        }
+    }
+
+    /**
+     * Gets this {@link ColorType} color as an colored Terracotta-{@link Material}
+     * @return the colored Terracotta of this {@link ColorType}
+     */
+    public Material getTerracotta() {
+        if (this == ColorType.NONE) {
+            return DyeableMaterial.TERRACOTTA.getDefaultMaterial();
+        } else {
+            return Material.matchMaterial(this.name() + "_TERRACOTTA");
+        }
+    }
+
+    /**
+     * Gets this {@link ColorType} color as an colored Concrete-{@link Material}
+     * @return the colored Concrete of this {@link ColorType}
+     */
+    public Material getConcrete() {
+        if (this == ColorType.NONE) {
+            return DyeableMaterial.CONCRETE.getDefaultMaterial();
+        } else {
+            return Material.matchMaterial(this.name() + "_CONCRETE");
+        }
+    }
+
+    /**
+     * Gets this {@link ColorType} color as an colored Concrete-Powder-{@link Material}
+     * @return the colored Concrete-Powder of this {@link ColorType}
+     */
+    public Material getConcretePowder() {
+        if (this == ColorType.NONE) {
+            return DyeableMaterial.CONCRETE_POWDER.getDefaultMaterial();
+        } else {
+            return Material.matchMaterial(this.name() + "_CONCRETE_POWDER");
+        }
+    }
+
+    /**
+     * Gets this {@link ColorType} color as an colored Carpet-{@link Material}
+     * @return the colored Carpet of this {@link ColorType}
+     */
+    public Material getCarpet() {
+        if (this == ColorType.NONE) {
+            return DyeableMaterial.CARPET.getDefaultMaterial();
+        } else {
+            return Material.matchMaterial(this.name() + "_CARPET");
+        }
+    }
+
+    /**
+     * Gets this {@link ColorType} color as an colored Stained-Glass-{@link Material}
+     * @return the colored Stained-Glass of this {@link ColorType}
+     */
+    public Material getStainedGlass() {
+        if (this == ColorType.NONE) {
+            return DyeableMaterial.STAINED_GLASS.getDefaultMaterial();
+        } else {
+            return Material.matchMaterial(this.name() + "_STAINED_GLASS");
+        }
+    }
+
+    /**
+     * Gets this {@link ColorType} color as an colored Stained-Glass-Pane-{@link Material}
+     * @return the colored Stained-Glass-Pane of this {@link ColorType}
+     */
+    public Material getStainedGlassPane() {
+        if (this == ColorType.NONE) {
+            return DyeableMaterial.STAINED_GLASS_PANE.getDefaultMaterial();
+        } else {
+            return Material.matchMaterial(this.name() + "_STAINED_GLASS_PANE");
+        }
+    }
+
+    /**
+     * Gets this {@link ColorType} color as an colored Shulker-Box-{@link Material}
+     * @return the colored Shulker-Box of this {@link ColorType}
+     */
+    public Material getShulkerBox() {
+        if (this == ColorType.NONE) {
+            return DyeableMaterial.SHULKER_BOX.getDefaultMaterial();
+        } else {
+            return Material.matchMaterial(this.name() + "_SHULKER_BOX");
+        }
+    }
+
+    /**
+     * Gets this {@link ColorType} color as an colored Glazed-Terracotta-{@link Material}
+     * @return the colored Glazed-Terracotta of this {@link ColorType}
+     */
+    public Material getGlazedTerracotta() {
+        if (this == ColorType.NONE) {
+            return DyeableMaterial.GLAZED_TERRACOTTA.getDefaultMaterial();
+        } else {
+            return Material.matchMaterial(this.name() + "_GLAZED_TERRACOTTA");
+        }
+    }
+
+    /**
+     * Gets this {@link ColorType} color as an colored Bed-{@link Material}
+     * @return the colored Bed of this {@link ColorType}
+     */
+    public Material getBed() {
+        if (this == ColorType.NONE) {
+            return DyeableMaterial.BED.getDefaultMaterial();
+        } else {
+            return Material.matchMaterial(this.name() + "_BED");
+        }
+    }
+
+    /**
+     * Gets this {@link ColorType} color as an colored Banner-{@link Material}
+     * @return the colored Banner of this {@link ColorType}
+     */
+    public Material getBanner() {
+        if (this == ColorType.NONE) {
+            return DyeableMaterial.BANNER.getDefaultMaterial();
+        } else {
+            return Material.matchMaterial(this.name() + "_BANNER");
+        }
+    }
+
+    /**
+     * Gets this {@link ColorType} color as an colored Banner-Wall-{@link Material}
+     * @return the colored Banner-Wall of this {@link ColorType}
+     */
+    public Material getBannerWall() {
+        if (this == ColorType.NONE) {
+            return DyeableMaterial.BANNER_WALL.getDefaultMaterial();
+        } else {
+            return Material.matchMaterial(this.name() + "_BANNER_WALL");
+        }
+    }
+
+    /**
+     * Gets this {@link ColorType} color as an colored Dye-{@link Material}
+     * @return the colored Dye of this {@link ColorType}
+     */
+    public Material getDye() {
+        if (this == ColorType.NONE) {
+            return DyeableMaterial.DYE.getDefaultMaterial();
+        } else {
+            return Material.matchMaterial(this.name() + "_DYE");
+        }
+    }
+
+    @Override
+    public String toString() {
+        return "" + getChatColor();
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/item/DyeableMaterial.java b/src/main/java/io/papermc/paper/item/DyeableMaterial.java
new file mode 100644
index 0000000000000000000000000000000000000000..530b9d9f7e1836a79f2edb340e7388994bfa7743
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/DyeableMaterial.java
@@ -0,0 +1,96 @@
+package io.papermc.paper.item;
+
+import org.bukkit.Material;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Arrays;
+import java.util.Set;
+import java.util.function.Function;
+import java.util.stream.Collectors;
+
+/**
+ * Represents groups of different {@link Material}s, that can have different kind of colors ({@link ColorType}s)
+ */
+public enum DyeableMaterial {
+
+    WOOL(ColorType::getWool),
+    TERRACOTTA(ColorType::getTerracotta),
+    CONCRETE(ColorType::getConcrete),
+    CONCRETE_POWDER(ColorType::getConcretePowder),
+    CARPET(ColorType::getCarpet),
+    STAINED_GLASS(ColorType::getStainedGlass),
+    STAINED_GLASS_PANE(ColorType::getStainedGlassPane),
+    SHULKER_BOX(ColorType::getShulkerBox),
+    GLAZED_TERRACOTTA(ColorType::getGlazedTerracotta),
+    BED(ColorType::getBed),
+    BANNER(ColorType::getBanner),
+    BANNER_WALL(ColorType::getBannerWall),
+    DYE(ColorType::getDye);
+
+    public Function<ColorType, Material> colorToMaterialProcess;
+
+    DyeableMaterial(Function<ColorType, Material> colorToMaterialProcess) {
+        this.colorToMaterialProcess = colorToMaterialProcess;
+    }
+
+    /**
+     * Generates the colored {@link Material} using the current {@link DyeableMaterial} and
+     * the target-{@link ColorType}
+     * @param colorType the color, which the {@link Material} will become
+     * @return the colored {@link DyeableMaterial}
+     */
+    public Material withColor(ColorType colorType) {
+        return colorToMaterialProcess.apply(colorType);
+    }
+
+    /**
+     * A {@link Set<Material>} of all possible colored {@link Material}-variants of this {@link DyeableMaterial} (material-group)
+     * @return all possible {@link Material}s in their colors of this {@link DyeableMaterial}.
+     */
+    public Set<Material> getAllVariants() {
+        return Arrays.stream(ColorType.values()).map(colorToMaterialProcess).collect(Collectors.toSet());
+    }
+
+    /**
+     * The default {@link Material} of this {@link DyeableMaterial}, also the default colored-{@link Material}
+     * @return the default {@link Material} of this {@link DyeableMaterial} (material-group)
+     */
+    public Material getDefaultMaterial() {
+        Material result;
+        switch (this) {
+            case WOOL:                  { result = Material.WHITE_WOOL; break; }
+            case TERRACOTTA:            { result = Material.WHITE_TERRACOTTA; break; }
+            case CONCRETE:              { result = Material.WHITE_CONCRETE; break; }
+            case CONCRETE_POWDER:       { result = Material.WHITE_CONCRETE_POWDER; break; }
+            case CARPET:                { result = Material.WHITE_CARPET; break; }
+            case STAINED_GLASS:         { result = Material.WHITE_STAINED_GLASS; break; }
+            case STAINED_GLASS_PANE:    { result = Material.WHITE_STAINED_GLASS_PANE; break; }
+            case SHULKER_BOX:           { result = Material.SHULKER_BOX; break; }
+            case GLAZED_TERRACOTTA:     { result = Material.WHITE_GLAZED_TERRACOTTA; break; }
+            case BED:                   { result = Material.WHITE_BED; break; }
+            case BANNER:                { result = Material.WHITE_BANNER; break; }
+            case BANNER_WALL:           { result = Material.WHITE_WALL_BANNER; break; }
+            case DYE:                   { result = Material.WHITE_DYE; break; }
+            default:
+                throw new IllegalStateException("Unexpected value: " + this);
+        }
+        return result;
+    }
+
+    /**
+     * Returns the non-colored version of the {@link Material} <i>material</i> as
+     * an {@link DyeableMaterial}.
+     * @param material the {@link Material}, which will lose its color
+     * @return the non-colored {@link DyeableMaterial} of the <i>material</i>, or null if the <i>material</i> has no {@link DyeableMaterial}-group
+     */
+    @Nullable
+    public static DyeableMaterial fromMaterial(Material material) {
+        for (DyeableMaterial dyeableMaterial : values()) {
+            if (material.name().endsWith(dyeableMaterial.name())) {
+                return dyeableMaterial;
+            }
+        }
+        return null;
+    }
+
+}
diff --git a/src/main/java/org/bukkit/Material.java b/src/main/java/org/bukkit/Material.java
index e2b3470e3c9a97671723f5a67f722fb86fb07fbf..b4cb136d18fa8b0c75eecf288a3b464bad178cb3 100644
--- a/src/main/java/org/bukkit/Material.java
+++ b/src/main/java/org/bukkit/Material.java
@@ -5,6 +5,8 @@ import java.lang.reflect.Constructor;
 import java.util.Locale;
 import java.util.Map;
 import java.util.function.Consumer;
+import io.papermc.paper.item.ColorType; // Paper
+import io.papermc.paper.item.DyeableMaterial; // Paper
 import org.apache.commons.lang.Validate;
 import org.bukkit.block.data.Ageable;
 import org.bukkit.block.data.AnaloguePowerable;
@@ -8731,4 +8733,67 @@ public enum Material implements Keyed {
             // </editor-fold>
         }
     }
+    // Paper start
+
+    /**
+     * Gets the {@link ColorType} of this {@link Material}
+     * @return the {@link ColorType} of this {@link Material}, or null if it has no supported {@link ColorType} color
+     */
+    @Nullable
+    public ColorType getColorType() {
+        return ColorType.getColorType(this);
+    }
+
+    /**
+     * Gets the {@link ColorType} of this {@link Material}
+     * @return the {@link ColorType} of this {@link Material}, or <i>other</i> if it has no supported {@link ColorType} color
+     */
+    @NotNull
+    public ColorType getColorTypeOrOther(ColorType other) {
+        ColorType currentType = getColorType();
+        return currentType != null ? currentType : other;
+    }
+
+    /**
+     * Gets the {@link ColorType} of this {@link Material}
+     * @return the {@link ColorType} of this {@link Material}, or {@link ColorType#NONE} if it has no supported {@link ColorType} color
+     */
+    @NotNull
+    public ColorType getColorTypeOrNone() {
+        return getColorTypeOrOther(ColorType.NONE);
+    }
+
+    /**
+     * Gets the {@link ColorType} of this {@link Material}
+     * @return the {@link ColorType} of this {@link Material}, or {@link ColorType#WHITE} if it has no supported {@link ColorType} color
+     */
+    @NotNull
+    public ColorType getColorTypeOrWhite() {
+        return getColorTypeOrOther(ColorType.WHITE);
+    }
+
+    /**
+     * Gets the uncolored {@link DyeableMaterial} of this {@link Material}
+     * @return the {@link DyeableMaterial} of this {@link Material}, or null if it has no {@link DyeableMaterial}-group
+     */
+    @Nullable
+    public DyeableMaterial getDyeableMaterial() {
+        return DyeableMaterial.fromMaterial(this);
+    }
+
+    /**
+     * Gets the {@link Material} with a different kind of {@link ColorType} using the {@link #getDyeableMaterial()}-Function
+     * @param newColor the new color, which the {@link Material} will become
+     * @return the new colored {@link Material}
+     * @throws IllegalArgumentException if the material has no {@link DyeableMaterial}-group
+     */
+    @NotNull
+    public Material changeColor(ColorType newColor) throws IllegalArgumentException {
+            DyeableMaterial material = getDyeableMaterial();
+            if (material != null) {
+                return material.withColor(newColor);
+            } else
+                throw new IllegalArgumentException("The material " + this.name() + " does not have color-support!");
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index a7909406e9d54c1ab4789b984ed6b1da50837fce..d1891b8085b10adc11c940485ab57ef11b3e83a9 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -5,6 +5,8 @@ import java.util.LinkedHashMap;
 import java.util.List; // Paper
 import java.util.Map;
 import java.util.Set; // Paper
+import io.papermc.paper.item.ColorType; // Paper
+import io.papermc.paper.item.DyeableMaterial; // Paper
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
@@ -920,5 +922,52 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
     public boolean canRepair(@NotNull ItemStack toBeRepaired) {
         return Bukkit.getUnsafe().isValidRepairItemStack(toBeRepaired, this);
     }
+
+    /**
+     * Gets the {@link ColorType} of this {@link ItemStack}s-{@link Material}
+     * @return the color of this {@link ItemStack}s-{@link Material}, or null if it has no supported color
+     */
+    @Nullable
+    public ColorType getColorType() {
+        return ColorType.getColorType(type);
+    }
+
+    /**
+     * Gets the {@link ColorType} of this {@link ItemStack}s-{@link Material}
+     * @return the color of this {@link ItemStack}s-Material, or <i>other</i> if it has no supported color
+     */
+    @NotNull
+    public ColorType getColorTypeOrOther(ColorType other) {
+        ColorType output = getColorType();
+        return output != null ? output : other;
+    }
+
+    /**
+     * Gets the {@link ColorType} of this {@link ItemStack}s-{@link Material}
+     * @return the color of this {@link ItemStack}s-{@link Material}, or {@link ColorType#NONE} if it has no supported color
+     */
+    @NotNull
+    public ColorType getColorTypeOrNone() {
+        return getColorTypeOrOther(ColorType.NONE);
+    }
+
+    /**
+     * Gets the {@link ColorType} of this {@link ItemStack}s-{@link Material}
+     * @return the color of this {@link ItemStack}s-{@link Material}, or {@link ColorType#WHITE} if it has no supported color
+     */
+    @NotNull
+    public ColorType getColorTypeOrWhite() {
+        return getColorTypeOrOther(ColorType.WHITE);
+    }
+
+    /**
+     * Changes the Material-{@link ColorType} of this {@link ItemStack} using the {@link Material#getDyeableMaterial()}
+     * @param newColor the new color, which the {@link Material} will become
+     * @throws IllegalArgumentException if the {@link ItemStack} {@link Material} has no {@link DyeableMaterial}-group
+     */
+    public void changeColor(ColorType newColor) throws IllegalArgumentException {
+        type = type.changeColor(newColor);
+    }
+
     // Paper end
 }
