From da7880ca6732b6f859467ba9a7097ae3562c8b34 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Fri, 18 Mar 2016 20:16:03 -0400
Subject: [PATCH] Add World Util Methods

Methods that can be used for other patches to help improve logic.

diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 68f8459861..dcd122d8b5 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -639,6 +639,7 @@ public class Chunk implements IChunkAccess {
         }
     }
 
+    public final int getLightSubtracted(BlockPosition blockposition, int i) { return this.a(blockposition, i); } // Paper - OBFHELPER
     public int a(BlockPosition blockposition, int i) {
         return this.a(blockposition, i, this.world.o().g());
     }
diff --git a/src/main/java/net/minecraft/server/IWorldReader.java b/src/main/java/net/minecraft/server/IWorldReader.java
index ac85986a1a..06c5a54254 100644
--- a/src/main/java/net/minecraft/server/IWorldReader.java
+++ b/src/main/java/net/minecraft/server/IWorldReader.java
@@ -35,6 +35,22 @@ public interface IWorldReader extends IBlockAccess {
     }
 
     int getLightLevel(BlockPosition var1, int var2);
+    // Paper start
+    default @Nullable
+    IBlockData getTypeIfLoaded(BlockPosition var1) {
+        return isLoaded(var1) ? getType(var1) : null;
+    }
+
+    default @Nullable
+    Block getBlockIfLoaded(BlockPosition var1) {
+        return isLoaded(var1) ? getType(var1).getBlock() : null;
+    }
+
+    default @Nullable
+    Material getMaterialIfLoaded(BlockPosition var1) {
+        return isLoaded(var1) ? getType(var1).getMaterial() : null;
+    }
+    // Paper end
 
     boolean isChunkLoaded(int var1, int var2, boolean var3);
 
@@ -100,7 +116,7 @@ public interface IWorldReader extends IBlockAccess {
         WorldBorder worldborder = this.getWorldBorder();
         boolean flag1 = worldborder.b() < (double)i && (double)j < worldborder.d() && worldborder.c() < (double)i1 && (double)j1 < worldborder.e();
         VoxelShapeBitSet voxelshapebitset = new VoxelShapeBitSet(j - i, l - k, j1 - i1);
-        Predicate predicate = (voxelshape3) -> {
+        Predicate<VoxelShape> predicate = (voxelshape3) -> { // Paper - decompile fix
             return !voxelshape3.b() && VoxelShapes.c(voxelshape, voxelshape3, OperatorBoolean.AND);
         };
         Stream stream = StreamSupport.stream(BlockPosition.MutableBlockPosition.b(i, k, i1, j - 1, l - 1, j1 - 1).spliterator(), false).map((blockposition$mutableblockposition) -> {
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 561bcd07b3..94872593b1 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -84,7 +84,7 @@ public abstract class World implements IEntityAccess, GeneratorAccess, IIBlockAc
     public final List<Entity> k = Lists.newArrayList();
     protected final IntHashMap<Entity> entitiesById = new IntHashMap();
     private final long F = 16777215L;
-    private int G;
+    private int G; public int getSkylightSubtracted() { return this.G; } public void setSkylightSubtracted(int value) { this.G = value;} // Paper - OBFHELPER
     protected int m = (new Random()).nextInt();
     protected final int n = 1013904223;
     protected float o;
@@ -274,6 +274,77 @@ public abstract class World implements IEntityAccess, GeneratorAccess, IIBlockAc
         return this.getType(blockposition).isAir();
     }
 
+    // Paper start
+    public Chunk getChunkIfLoaded(BlockPosition blockposition) {
+        return getChunkIfLoaded(blockposition.getX() >> 4, blockposition.getZ() >> 4);
+    }
+    // test if meets light level, return faster
+    // logic copied from below
+    public boolean isLightLevel(BlockPosition blockposition, int level) {
+        if (isValidLocation(blockposition)) {
+            if (this.getType(blockposition).c(this, blockposition)) {
+                int sky = getSkylightSubtracted();
+                if (this.getLightLevel(blockposition.up(), sky) >= level) {
+                    return true;
+                }
+                if (this.getLightLevel(blockposition.east(), sky) >= level) {
+                    return true;
+                }
+                if (this.getLightLevel(blockposition.west(), sky) >= level) {
+                    return true;
+                }
+                if (this.getLightLevel(blockposition.south(), sky) >= level) {
+                    return true;
+                }
+                if (this.getLightLevel(blockposition.north(), sky) >= level) {
+                    return true;
+                }
+                return false;
+            } else {
+                if (blockposition.getY() >= 256) {
+                    blockposition = new BlockPosition(blockposition.getX(), 255, blockposition.getZ());
+                }
+
+                Chunk chunk = this.getChunkAtWorldCoords(blockposition);
+                return chunk.getLightSubtracted(blockposition, this.getSkylightSubtracted()) >= level;
+            }
+        } else {
+            return true;
+        }
+    }
+    //  reduces need to do isLoaded before getType
+    public IBlockData getTypeIfLoaded(BlockPosition blockposition) {
+        // CraftBukkit start - tree generation
+        if (captureTreeGeneration) {
+            for (CraftBlockState previous : capturedBlockStates) {
+                if (previous.getX() == blockposition.getX() && previous.getY() == blockposition.getY() && previous.getZ() == blockposition.getZ()) {
+                    return previous.getHandle();
+                }
+            }
+        }
+        // CraftBukkit end
+        Chunk chunk = this.getChunkIfLoaded(blockposition);
+        if (chunk != null) {
+            return isValidLocation(blockposition) ? chunk.getBlockData(blockposition) : Blocks.AIR.getBlockData();
+        }
+        return null;
+    }
+    public Block getBlockIfLoaded(BlockPosition blockposition) {
+        IBlockData type = getTypeIfLoaded(blockposition);
+        if (type == null) {
+            return null;
+        }
+        return type.getBlock();
+    }
+    public Material getMaterialIfLoaded(BlockPosition blockposition) {
+        IBlockData type = getTypeIfLoaded(blockposition);
+        if (type == null) {
+            return null;
+        }
+        return type.getBlock().material;
+    }
+    // Paper end
+
     public Chunk getChunkAtWorldCoords(BlockPosition blockposition) {
         return this.getChunkAt(blockposition.getX() >> 4, blockposition.getZ() >> 4);
     }
-- 
2.18.0

