From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mariell Hoversholm <proximyst@proximyst.com>
Date: Sun, 24 Oct 2021 16:19:26 -0400
Subject: [PATCH] Add Raw Byte Entity Serialization

Co-authored-by: SoSeDiK <mrsosedik@gmail.com>

diff --git a/src/main/java/io/papermc/paper/entity/EntitySerializationFlag.java b/src/main/java/io/papermc/paper/entity/EntitySerializationFlag.java
new file mode 100644
index 0000000000000000000000000000000000000000..ae8551566c67130a6d88d4d7a22a60cdf381fa81
--- /dev/null
+++ b/src/main/java/io/papermc/paper/entity/EntitySerializationFlag.java
@@ -0,0 +1,34 @@
+package io.papermc.paper.entity;
+
+import org.bukkit.UnsafeValues;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.Player;
+
+/**
+ * Represents flags for entity serialization.
+ *
+ * @see UnsafeValues#serializeEntity(Entity, EntitySerializationFlag... serializationFlags)
+ */
+public enum EntitySerializationFlag {
+
+    /**
+     * Serialize invalid (dead, unloaded, etc.) entities.
+     *
+     * @see Entity#isValid()
+     */
+    FORCE,
+    /**
+     * Serialize misc non-savable entities like lighting bolts, fishing bobbers, etc.
+     */
+    MISC,
+    /**
+     * Include passengers in the serialized data.
+     */
+    PASSENGERS,
+    /**
+     * Allow serializing {@link Player}s.
+     * <p>Note: deserializing player data will always fail.
+     */
+    PLAYER;
+
+}
diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index ca0b126bff245ed3fe69bc49c28499f7a7aa9556..08ad8372b55618243d9909354f9dd5e72d7fee73 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -158,6 +158,77 @@ public interface UnsafeValues {
 
     ItemStack deserializeItem(byte[] data);
 
+    // Paper start - raw entity serialization API
+    /**
+     * Serializes the provided entity.
+     *
+     * @param entity entity
+     * @return serialized entity data
+     * @see #serializeEntity(org.bukkit.entity.Entity, io.papermc.paper.entity.EntitySerializationFlag...)
+     * @see #deserializeEntity(byte[], World, boolean, boolean)
+     */
+    default byte[] serializeEntity(@org.jetbrains.annotations.NotNull org.bukkit.entity.Entity entity) {
+        return serializeEntity(entity, new io.papermc.paper.entity.EntitySerializationFlag[0]);
+    }
+
+    /**
+     * Serializes the provided entity.
+     *
+     * @param entity entity
+     * @param serializationFlags serialization flags
+     * @return serialized entity data
+     * @see #deserializeEntity(byte[], World, boolean, boolean)
+     */
+    byte[] serializeEntity(@org.jetbrains.annotations.NotNull org.bukkit.entity.Entity entity, @org.jetbrains.annotations.NotNull io.papermc.paper.entity.EntitySerializationFlag... serializationFlags);
+
+    /**
+     * Deserializes the entity from data.
+     * The entity's {@link java.util.UUID} as well as passengers will not be preserved.
+     *
+     * @param data serialized entity data
+     * @param world world
+     * @return deserialized entity
+     *
+     * @see #deserializeEntity(byte[], World, boolean, boolean)
+     * @see #serializeEntity(org.bukkit.entity.Entity, io.papermc.paper.entity.EntitySerializationFlag...)
+     * @see org.bukkit.entity.Entity#spawnAt(Location, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason)
+     */
+    default org.bukkit.entity.Entity deserializeEntity(byte[] data, @org.jetbrains.annotations.NotNull World world) {
+        return deserializeEntity(data, world, false);
+    }
+
+    /**
+     * Deserializes the entity from data.
+     * The entity's passengers will not be preserved.
+     *
+     * @param data serialized entity data
+     * @param world world
+     * @param preserveUUID whether to preserve uuid
+     * @return deserialized entity
+     *
+     * @see #deserializeEntity(byte[], World, boolean, boolean)
+     * @see #serializeEntity(org.bukkit.entity.Entity, io.papermc.paper.entity.EntitySerializationFlag...)
+     * @see org.bukkit.entity.Entity#spawnAt(Location, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason)
+     */
+    default org.bukkit.entity.Entity deserializeEntity(byte[] data, @org.jetbrains.annotations.NotNull World world, boolean preserveUUID) {
+        return deserializeEntity(data, world, preserveUUID, false);
+    }
+
+    /**
+     * Deserializes the entity from data.
+     *
+     * @param data serialized entity data
+     * @param world world
+     * @param preserveUUID whether to preserve uuids of the entity and its passengers
+     * @param preservePassengers whether to preserve passengers
+     * @return deserialized entity
+     *
+     * @see #serializeEntity(org.bukkit.entity.Entity, io.papermc.paper.entity.EntitySerializationFlag...)
+     * @see org.bukkit.entity.Entity#spawnAt(Location, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason)
+     */
+    org.bukkit.entity.Entity deserializeEntity(byte[] data, @org.jetbrains.annotations.NotNull World world, boolean preserveUUID, boolean preservePassengers);
+    // Paper end - raw entity serialization API
+
     /**
      * Creates and returns the next EntityId available.
      * <p>
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index b2466aa08ebb26f3a5edd6a4b2c7e12f7a90ef0a..14e411af33f7366b9d77d071cf03b068321d30d3 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -932,4 +932,33 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
     @Deprecated
     @NotNull Set<Player> getTrackedPlayers();
     // Paper end
+
+    // Paper start - raw entity serialization API
+    /**
+     * Spawns the entity in the world at the given {@link Location} with the default spawn reason.
+     * <p>
+     * This will not spawn the entity if the entity is already spawned or has previously been despawned.
+     * <p>
+     * Also, this method will fire the same events as a normal entity spawn.
+     *
+     * @param location the location to spawn the entity at
+     * @return whether the entity was successfully spawned
+     */
+    default boolean spawnAt(@NotNull Location location) {
+        return spawnAt(location, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
+    }
+
+    /**
+     * Spawns the entity in the world at the given {@link Location} with the reason given.
+     * <p>
+     * This will not spawn the entity if the entity is already spawned or has previously been despawned.
+     * <p>
+     * Also, this method will fire the same events as a normal entity spawn.
+     *
+     * @param location the location to spawn the entity at
+     * @param reason the reason for the entity being spawned
+     * @return whether the entity was successfully spawned
+     */
+    boolean spawnAt(@NotNull Location location, @NotNull org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason reason);
+    // Paper end - raw entity serialization API
 }
