From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Flo0 <flo.roma@web.de>
Date: Mon, 8 Apr 2024 16:43:16 +0200
Subject: [PATCH] API for checking sent chunks


diff --git a/src/main/java/io/papermc/paper/chunk/system/RegionizedPlayerChunkLoader.java b/src/main/java/io/papermc/paper/chunk/system/RegionizedPlayerChunkLoader.java
index 1b090f1e79b996e52097afc49c1cec85936653e6..ee5ff8fe18c51e93646753ea06c067277cca7b34 100644
--- a/src/main/java/io/papermc/paper/chunk/system/RegionizedPlayerChunkLoader.java
+++ b/src/main/java/io/papermc/paper/chunk/system/RegionizedPlayerChunkLoader.java
@@ -1107,6 +1107,11 @@ public class RegionizedPlayerChunkLoader {
 
             // now all tickets should be removed, which is all of our external state
         }
+
+        // For external checks
+        public java.util.Set<Long> getSentChunksRaw() {
+            return this.sentChunks;
+        }
     }
 
     // TODO rebase into util patch
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 4aa6084fb3540f7811f13e09b5d11e2e0cf48220..e57f06d68d8593444408df81e462536a0cbf82d9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -3390,6 +3390,33 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     // Paper end
 
+    // Paper start - Add chunk view API
+    @Override
+    public Set<java.lang.Long> getSentChunkKeys() {
+        org.spigotmc.AsyncCatcher.catchOp("accessing sent chunks");
+        return it.unimi.dsi.fastutil.longs.LongSets.unmodifiable(
+            new it.unimi.dsi.fastutil.longs.LongOpenHashSet(this.getHandle().chunkLoader.getSentChunksRaw())
+        );
+    }
+
+    @Override
+    public Set<org.bukkit.Chunk> getSentChunks() {
+        org.spigotmc.AsyncCatcher.catchOp("accessing sent chunks");
+        final it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<org.bukkit.Chunk> chunks = new it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<>();
+        final org.bukkit.World world = this.getWorld();
+        for (final long chunkKey : this.getHandle().chunkLoader.getSentChunksRaw()) {
+            chunks.add(world.getChunkAt(chunkKey, false));
+        }
+        return it.unimi.dsi.fastutil.objects.ObjectSets.unmodifiable(chunks);
+    }
+
+    @Override
+    public boolean isChunkSent(final long chunkKey) {
+        org.spigotmc.AsyncCatcher.catchOp("accessing sent chunks");
+        return this.getHandle().chunkLoader.getSentChunksRaw().contains(chunkKey);
+    }
+    // Paper end
+
     public Player.Spigot spigot()
     {
         return this.spigot;
