From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Denery <dorofeevij@gmail.com>
Date: Wed, 22 Feb 2023 14:15:28 +0300
Subject: [PATCH] Biome creation API


diff --git a/src/main/java/io/papermc/paper/registry/ExtendedRegistry.java b/src/main/java/io/papermc/paper/registry/ExtendedRegistry.java
index ed524fe97d999f0adaebb0445f4a668a228e1fd2..04c47697c1b3fd813d54cb2e3e63eb01716c1e45 100644
--- a/src/main/java/io/papermc/paper/registry/ExtendedRegistry.java
+++ b/src/main/java/io/papermc/paper/registry/ExtendedRegistry.java
@@ -23,6 +23,8 @@ import java.util.stream.StreamSupport;
 public interface ExtendedRegistry<T> extends ResourceKeyed<ExtendedRegistry<T>>, Iterable<T> {
     Key ROOT_REGISTRY_KEY = Key.key("root");
 
+    RegistryKey.EnumMutableRegistryKey<RegistryKey.RegistryLayerType.WORLDGEN, Biome> BIOME_REGISTRY_KEY = API.registryKeyFactory.createEnumMutable(Biome.class, RegistryKey.RegistryLayerType.WORLDGEN.class);
+
     static <T extends Enum<T> & Keyed> void register(RegistryKey.EnumMutableRegistryKey<?, T> registryKey, T value) {
         API.simpleRegistry.register(registryKey, value);
     }
diff --git a/src/main/java/io/papermc/paper/world/biome/BiomeSpecialEffects.java b/src/main/java/io/papermc/paper/world/biome/BiomeSpecialEffects.java
new file mode 100644
index 0000000000000000000000000000000000000000..b6606698bb5119f2edb2d19542b544e79858b7a6
--- /dev/null
+++ b/src/main/java/io/papermc/paper/world/biome/BiomeSpecialEffects.java
@@ -0,0 +1,65 @@
+package io.papermc.paper.world.biome;
+
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Optional;
+
+/**
+ *
+ */
+public interface BiomeSpecialEffects {
+    int skyColor();
+
+    int fogColor();
+
+    int waterColor();
+
+    int waterFogColor();
+
+    @NotNull
+    Optional<Integer> overriddenGrassColor();
+
+    @NotNull
+    Optional<Integer> overriddenFoliageColor();
+
+    @NotNull
+    static Builder builder() {
+        return API.builderFactory.builder();
+    }
+
+    interface Builder {
+
+        @NotNull
+        Builder skyColor(int skyColor);
+
+        @NotNull
+        Builder fogColor(int fogColor);
+
+        @NotNull
+        Builder waterColor(int waterColor);
+
+        @NotNull
+        Builder waterFogColor(int waterFogColor);
+
+        @NotNull
+        Builder grassColor(int grassColor);
+
+        @NotNull
+        Builder foliageColor(int foliageColor);
+
+        /**
+         * @return Constructed instance of biome special effects.
+         */
+        @NotNull
+        BiomeSpecialEffects build();
+    }
+
+    interface BuilderFactory {
+        @NotNull
+        Builder builder();
+    }
+
+    final class API {
+        static BuilderFactory builderFactory;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/world/biome/ClimateSettings.java b/src/main/java/io/papermc/paper/world/biome/ClimateSettings.java
new file mode 100644
index 0000000000000000000000000000000000000000..b331d56f3780618fdde5ef083b616b933e0df19d
--- /dev/null
+++ b/src/main/java/io/papermc/paper/world/biome/ClimateSettings.java
@@ -0,0 +1,66 @@
+package io.papermc.paper.world.biome;
+
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.Experimental
+public interface ClimateSettings {
+    float temperature();
+
+    float downfall();
+
+    @NotNull
+    Precipitation precipitation();
+
+    enum Precipitation {
+        NONE,
+        RAIN,
+        SNOW
+    }
+
+    @NotNull
+    static Builder builder() {
+        return API.builderFactory.create();
+    }
+
+    interface Builder {
+        /**
+         * Sets 0.7F by default.
+         * @param temperature temperature your biome has.
+         * @return builder
+         */
+        @NotNull
+        Builder temperature(float temperature);
+
+        /**
+         * Sets 0.8F by default.
+         * @param downfall downfall your biome has.
+         * @return builder
+         */
+        @NotNull
+        Builder downfall(float downfall);
+
+        /**
+         * Sets NONE by default.
+         * @param precipitation precipitation your biome has.
+         * @return builder
+         */
+        @NotNull
+        Builder precipitation(@NotNull Precipitation precipitation);
+
+        /**
+         * @return Constructed instance of climate settings.
+         */
+        @NotNull
+        ClimateSettings build();
+    }
+
+    interface BuilderFactory {
+        @NotNull
+        Builder create();
+    }
+
+    final class API {
+        static BuilderFactory builderFactory;
+    }
+}
diff --git a/src/main/java/org/bukkit/block/Biome.java b/src/main/java/org/bukkit/block/Biome.java
index d56e1b50dd7da18f40278cec4bfdc9414aae0be1..a6843389eb78431f9932925aede7ca8e34251e44 100644
--- a/src/main/java/org/bukkit/block/Biome.java
+++ b/src/main/java/org/bukkit/block/Biome.java
@@ -78,9 +78,17 @@ public enum Biome implements Keyed, net.kyori.adventure.translation.Translatable
     CUSTOM;
 
     private final NamespacedKey key;
+    // Paper start - biome API
+    private final java.util.function.Supplier<io.papermc.paper.world.biome.ClimateSettings> climateSettings;
+    private final java.util.function.Supplier<io.papermc.paper.world.biome.BiomeSpecialEffects> biomeSpecialEffects;
+    // Paper end
 
     private Biome() {
         this.key = NamespacedKey.minecraft(name().toLowerCase(Locale.ROOT));
+        // Paper start - biome API
+        this.climateSettings = API.enumCreator.param(io.papermc.paper.registry.ExtendedRegistry.BIOME_REGISTRY_KEY, io.papermc.paper.world.biome.ClimateSettings.class, this.key);
+        this.biomeSpecialEffects = API.enumCreator.param(io.papermc.paper.registry.ExtendedRegistry.BIOME_REGISTRY_KEY, io.papermc.paper.world.biome.BiomeSpecialEffects.class, this.key);
+        // Paper end
     }
 
     @NotNull
@@ -94,5 +102,34 @@ public enum Biome implements Keyed, net.kyori.adventure.translation.Translatable
     public @NotNull String translationKey() {
         return "biome.minecraft." + this.key.getKey();
     }
+
+    public @NotNull io.papermc.paper.world.biome.ClimateSettings getClimateSettings() {
+        return this.climateSettings.get();
+    }
+
+    public @NotNull io.papermc.paper.world.biome.BiomeSpecialEffects getBiomeSpecialEffects() {
+        return this.biomeSpecialEffects.get();
+    }
+
+    Biome(@NotNull NamespacedKey key, @NotNull io.papermc.paper.world.biome.ClimateSettings climateSettings, @NotNull io.papermc.paper.world.biome.BiomeSpecialEffects biomeSpecialEffects) {
+        this.key = key;
+        this.climateSettings = com.google.common.base.Suppliers.memoize(() -> climateSettings);
+        this.biomeSpecialEffects = com.google.common.base.Suppliers.memoize(() -> biomeSpecialEffects);
+    }
+
+    @NotNull
+    public static Biome create(@NotNull io.papermc.paper.registry.key.ResourceKey<Biome> resourceKey, @NotNull io.papermc.paper.world.biome.ClimateSettings climateSettings, @NotNull io.papermc.paper.world.biome.BiomeSpecialEffects biomeSpecialEffects) {
+        return API.enumCreator.create(resourceKey, climateSettings, biomeSpecialEffects);
+    }
+
+    @NotNull
+    public static Biome create(@NotNull net.kyori.adventure.key.Key key, @NotNull io.papermc.paper.world.biome.ClimateSettings biomeConfiguration, @NotNull io.papermc.paper.world.biome.BiomeSpecialEffects biomeSpecialEffects) {
+        return API.enumCreator.create(key, biomeConfiguration, biomeSpecialEffects);
+    }
+
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public static class API {
+        public static io.papermc.paper.registry.enums.EnumCreator<Biome> enumCreator;
+    }
     // Paper end
 }
