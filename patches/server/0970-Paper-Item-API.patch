From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Owen1212055 <23108066+Owen1212055@users.noreply.github.com>
Date: Mon, 17 Oct 2022 18:00:34 -0400
Subject: [PATCH] Paper Item API

== AT ==
public net.minecraft.nbt.ListTag list

diff --git a/src/main/java/io/papermc/paper/item/PaperMetaRegistry.java b/src/main/java/io/papermc/paper/item/PaperMetaRegistry.java
new file mode 100644
index 0000000000000000000000000000000000000000..03034495818a32889a7266f2844e12cc1c7c5e83
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/PaperMetaRegistry.java
@@ -0,0 +1,325 @@
+package io.papermc.paper.item;
+
+import io.papermc.paper.item.meta.MetaAxolotlBucket;
+import io.papermc.paper.item.meta.MetaBanner;
+import io.papermc.paper.item.meta.MetaBlockState;
+import io.papermc.paper.item.meta.MetaBookSigned;
+import io.papermc.paper.item.meta.MetaBundle;
+import io.papermc.paper.item.meta.MetaCompass;
+import io.papermc.paper.item.meta.MetaEnchantmentStorage;
+import io.papermc.paper.item.meta.MetaFirework;
+import io.papermc.paper.item.meta.MetaFireworkEffect;
+import io.papermc.paper.item.meta.MetaKnowledgeBook;
+import io.papermc.paper.item.meta.MetaLeatherArmor;
+import io.papermc.paper.item.meta.MetaMap;
+import io.papermc.paper.item.meta.MetaMusicInstrument;
+import io.papermc.paper.item.meta.MetaPlayerHead;
+import io.papermc.paper.item.meta.MetaPotion;
+import io.papermc.paper.item.meta.MetaSpawnEgg;
+import io.papermc.paper.item.meta.MetaSuspiciousStew;
+import io.papermc.paper.item.meta.MetaTropicalFishBucket;
+import io.papermc.paper.item.meta.PaperMeta;
+import io.papermc.paper.property.MutablePropertyView;
+import org.bukkit.Material;
+import org.bukkit.inventory.meta.ItemMeta;
+
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+
+public class PaperMetaRegistry {
+
+    public static ItemMeta getItemMeta(MutablePropertyView propertyHolder, Material material) {
+        MetaSupplier supplier = SUPPLIERS.get(material);
+        return Objects.requireNonNullElse(supplier, DEFAULT_META).create(propertyHolder, material);
+    }
+
+    // Registry
+    interface MetaSupplier {
+        ItemMeta create(MutablePropertyView view, Material material);
+    }
+
+    public static final MetaSupplier DEFAULT_META = PaperMeta::new;
+    public static final Map<Material, MetaSupplier> SUPPLIERS = new HashMap<>();
+
+    static {
+        register(Material.WRITTEN_BOOK, MetaBookSigned::new);
+        register(Material.WRITABLE_BOOK, MetaBookSigned::new);
+        //register(MaterialTags.SKULLS.getValues(), MetaPlayerHead::new);
+        register(List.of(Material.CREEPER_HEAD,
+            Material.CREEPER_WALL_HEAD,
+            Material.DRAGON_HEAD,
+            Material.DRAGON_WALL_HEAD,
+            Material.PIGLIN_HEAD,
+            Material.PIGLIN_WALL_HEAD,
+            Material.PLAYER_HEAD,
+            Material.PLAYER_WALL_HEAD,
+            Material.SKELETON_SKULL,
+            Material.SKELETON_WALL_SKULL,
+            Material.WITHER_SKELETON_SKULL,
+            Material.WITHER_SKELETON_WALL_SKULL,
+            Material.ZOMBIE_HEAD,
+            Material.ZOMBIE_WALL_HEAD), MetaPlayerHead::new);
+        register(List.of(Material.LEATHER_HELMET,
+            Material.LEATHER_HORSE_ARMOR,
+            Material.LEATHER_CHESTPLATE,
+            Material.LEATHER_LEGGINGS,
+            Material.LEATHER_BOOTS), MetaLeatherArmor::new);
+        register(List.of(Material.POTION,
+            Material.SPLASH_POTION,
+            Material.LINGERING_POTION,
+            Material.TIPPED_ARROW), MetaPotion::new);
+        register(Material.FILLED_MAP, MetaMap::new);
+        register(Material.FIREWORK_ROCKET, MetaFirework::new);
+        register(Material.FIREWORK_STAR, MetaFireworkEffect::new);
+        register(Material.ENCHANTED_BOOK, MetaEnchantmentStorage::new);
+        register(List.of(
+            Material.BLACK_BANNER,
+            Material.BLACK_WALL_BANNER,
+            Material.BLUE_BANNER,
+            Material.BLUE_WALL_BANNER,
+            Material.BROWN_BANNER,
+            Material.BROWN_WALL_BANNER,
+            Material.CYAN_BANNER,
+            Material.CYAN_WALL_BANNER,
+            Material.GRAY_BANNER,
+            Material.GRAY_WALL_BANNER,
+            Material.GREEN_BANNER,
+            Material.GREEN_WALL_BANNER,
+            Material.LIGHT_BLUE_BANNER,
+            Material.LIGHT_BLUE_WALL_BANNER,
+            Material.LIGHT_GRAY_BANNER,
+            Material.LIGHT_GRAY_WALL_BANNER,
+            Material.LIME_BANNER,
+            Material.LIME_WALL_BANNER,
+            Material.MAGENTA_BANNER,
+            Material.MAGENTA_WALL_BANNER,
+            Material.ORANGE_BANNER,
+            Material.ORANGE_WALL_BANNER,
+            Material.PINK_BANNER,
+            Material.PINK_WALL_BANNER,
+            Material.PURPLE_BANNER,
+            Material.PURPLE_WALL_BANNER,
+            Material.RED_BANNER,
+            Material.RED_WALL_BANNER,
+            Material.WHITE_BANNER,
+            Material.WHITE_WALL_BANNER,
+            Material.YELLOW_BANNER,
+            Material.YELLOW_WALL_BANNER
+        ), MetaBanner::new);
+//        register(MaterialTags.BANNERS.getValues(), MetaBanner::new);
+//        register(MaterialTags.SPAWN_EGGS.getValues(), MetaSpawnEgg::new);
+
+        register(List.of(Material.ALLAY_SPAWN_EGG,
+            Material.AXOLOTL_SPAWN_EGG,
+            Material.BAT_SPAWN_EGG,
+            Material.BEE_SPAWN_EGG,
+            Material.BLAZE_SPAWN_EGG,
+            Material.CAT_SPAWN_EGG,
+            Material.CAMEL_SPAWN_EGG,
+            Material.CAVE_SPIDER_SPAWN_EGG,
+            Material.CHICKEN_SPAWN_EGG,
+            Material.COD_SPAWN_EGG,
+            Material.COW_SPAWN_EGG,
+            Material.CREEPER_SPAWN_EGG,
+            Material.DOLPHIN_SPAWN_EGG,
+            Material.DONKEY_SPAWN_EGG,
+            Material.DROWNED_SPAWN_EGG,
+            Material.ELDER_GUARDIAN_SPAWN_EGG,
+            Material.ENDER_DRAGON_SPAWN_EGG,
+            Material.ENDERMAN_SPAWN_EGG,
+            Material.ENDERMITE_SPAWN_EGG,
+            Material.EVOKER_SPAWN_EGG,
+            Material.FOX_SPAWN_EGG,
+            Material.FROG_SPAWN_EGG,
+            Material.GHAST_SPAWN_EGG,
+            Material.GLOW_SQUID_SPAWN_EGG,
+            Material.GOAT_SPAWN_EGG,
+            Material.GUARDIAN_SPAWN_EGG,
+            Material.HOGLIN_SPAWN_EGG,
+            Material.HORSE_SPAWN_EGG,
+            Material.HUSK_SPAWN_EGG,
+            Material.IRON_GOLEM_SPAWN_EGG,
+            Material.LLAMA_SPAWN_EGG,
+            Material.MAGMA_CUBE_SPAWN_EGG,
+            Material.MOOSHROOM_SPAWN_EGG,
+            Material.MULE_SPAWN_EGG,
+            Material.OCELOT_SPAWN_EGG,
+            Material.PANDA_SPAWN_EGG,
+            Material.PARROT_SPAWN_EGG,
+            Material.PHANTOM_SPAWN_EGG,
+            Material.PIGLIN_BRUTE_SPAWN_EGG,
+            Material.PIGLIN_SPAWN_EGG,
+            Material.PIG_SPAWN_EGG,
+            Material.PILLAGER_SPAWN_EGG,
+            Material.POLAR_BEAR_SPAWN_EGG,
+            Material.PUFFERFISH_SPAWN_EGG,
+            Material.RABBIT_SPAWN_EGG,
+            Material.RAVAGER_SPAWN_EGG,
+            Material.SALMON_SPAWN_EGG,
+            Material.SHEEP_SPAWN_EGG,
+            Material.SHULKER_SPAWN_EGG,
+            Material.SILVERFISH_SPAWN_EGG,
+            Material.SKELETON_HORSE_SPAWN_EGG,
+            Material.SKELETON_SPAWN_EGG,
+            Material.SLIME_SPAWN_EGG,
+            Material.SNIFFER_SPAWN_EGG,
+            Material.SNOW_GOLEM_SPAWN_EGG,
+            Material.SPIDER_SPAWN_EGG,
+            Material.SQUID_SPAWN_EGG,
+            Material.STRAY_SPAWN_EGG,
+            Material.STRIDER_SPAWN_EGG,
+            Material.TADPOLE_SPAWN_EGG,
+            Material.TRADER_LLAMA_SPAWN_EGG,
+            Material.TROPICAL_FISH_SPAWN_EGG,
+            Material.TURTLE_SPAWN_EGG,
+            Material.VEX_SPAWN_EGG,
+            Material.VILLAGER_SPAWN_EGG,
+            Material.VINDICATOR_SPAWN_EGG,
+            Material.WARDEN_SPAWN_EGG,
+            Material.WANDERING_TRADER_SPAWN_EGG,
+            Material.WITCH_SPAWN_EGG,
+            Material.WITHER_SPAWN_EGG,
+            Material.WITHER_SKELETON_SPAWN_EGG,
+            Material.WOLF_SPAWN_EGG,
+            Material.ZOGLIN_SPAWN_EGG,
+            Material.ZOMBIE_HORSE_SPAWN_EGG,
+            Material.ZOMBIE_SPAWN_EGG,
+            Material.ZOMBIE_VILLAGER_SPAWN_EGG,
+            Material.ZOMBIFIED_PIGLIN_SPAWN_EGG), MetaSpawnEgg::new);
+        register(Material.ARMOR_STAND, DEFAULT_META); // Todo
+        register(Material.KNOWLEDGE_BOOK, MetaKnowledgeBook::new);
+
+        // Block entities
+        // TODO: Figure out how to dynamically add
+//        for (Material blockEntity : CraftBlockStates.FACTORIES.keySet()) {
+//            // Ignore skulls, banners, they have their own meta
+//            if (!MaterialTags.SKULLS.isTagged(blockEntity) && !MaterialTags.BANNERS.isTagged(blockEntity)) {
+//                register(blockEntity, MetaBlockState::new);
+//            }
+//        }
+        register(List.of(
+            Material.SHULKER_BOX,
+            Material.WHITE_SHULKER_BOX,
+            Material.ORANGE_SHULKER_BOX,
+            Material.MAGENTA_SHULKER_BOX,
+            Material.LIGHT_BLUE_SHULKER_BOX,
+            Material.YELLOW_SHULKER_BOX,
+            Material.LIME_SHULKER_BOX,
+            Material.PINK_SHULKER_BOX,
+            Material.GRAY_SHULKER_BOX,
+            Material.LIGHT_GRAY_SHULKER_BOX,
+            Material.CYAN_SHULKER_BOX,
+            Material.PURPLE_SHULKER_BOX,
+            Material.BLUE_SHULKER_BOX,
+            Material.BROWN_SHULKER_BOX,
+            Material.GREEN_SHULKER_BOX,
+            Material.RED_SHULKER_BOX,
+            Material.BLACK_SHULKER_BOX,
+            Material.FURNACE,
+            Material.CHEST,
+            Material.TRAPPED_CHEST,
+            Material.JUKEBOX,
+            Material.DISPENSER,
+            Material.DROPPER,
+            Material.ACACIA_HANGING_SIGN,
+            Material.ACACIA_SIGN,
+            Material.ACACIA_WALL_HANGING_SIGN,
+            Material.ACACIA_WALL_SIGN,
+            Material.BAMBOO_HANGING_SIGN,
+            Material.BAMBOO_SIGN,
+            Material.BAMBOO_WALL_HANGING_SIGN,
+            Material.BAMBOO_WALL_SIGN,
+            Material.BIRCH_HANGING_SIGN,
+            Material.BIRCH_SIGN,
+            Material.BIRCH_WALL_HANGING_SIGN,
+            Material.BIRCH_WALL_SIGN,
+            Material.CHERRY_HANGING_SIGN,
+            Material.CHERRY_SIGN,
+            Material.CHERRY_WALL_HANGING_SIGN,
+            Material.CHERRY_WALL_SIGN,
+            Material.CRIMSON_HANGING_SIGN,
+            Material.CRIMSON_SIGN,
+            Material.CRIMSON_WALL_HANGING_SIGN,
+            Material.CRIMSON_WALL_SIGN,
+            Material.DARK_OAK_HANGING_SIGN,
+            Material.DARK_OAK_SIGN,
+            Material.DARK_OAK_WALL_HANGING_SIGN,
+            Material.DARK_OAK_WALL_SIGN,
+            Material.JUNGLE_HANGING_SIGN,
+            Material.JUNGLE_SIGN,
+            Material.JUNGLE_WALL_HANGING_SIGN,
+            Material.JUNGLE_WALL_SIGN,
+            Material.MANGROVE_HANGING_SIGN,
+            Material.MANGROVE_SIGN,
+            Material.MANGROVE_WALL_HANGING_SIGN,
+            Material.MANGROVE_WALL_SIGN,
+            Material.OAK_HANGING_SIGN,
+            Material.OAK_SIGN,
+            Material.OAK_WALL_HANGING_SIGN,
+            Material.OAK_WALL_SIGN,
+            Material.SPRUCE_HANGING_SIGN,
+            Material.SPRUCE_SIGN,
+            Material.SPRUCE_WALL_HANGING_SIGN,
+            Material.SPRUCE_WALL_SIGN,
+            Material.WARPED_HANGING_SIGN,
+            Material.WARPED_SIGN,
+            Material.WARPED_WALL_HANGING_SIGN,
+            Material.WARPED_WALL_SIGN,
+            Material.SPAWNER,
+            Material.BREWING_STAND,
+            Material.ENCHANTING_TABLE,
+            Material.COMMAND_BLOCK,
+            Material.REPEATING_COMMAND_BLOCK,
+            Material.CHAIN_COMMAND_BLOCK,
+            Material.BEACON,
+            Material.DAYLIGHT_DETECTOR,
+            Material.HOPPER,
+            Material.COMPARATOR,
+            Material.SHIELD,
+            Material.STRUCTURE_BLOCK,
+            Material.ENDER_CHEST,
+            Material.BARREL,
+            Material.BELL,
+            Material.BLAST_FURNACE,
+            Material.CAMPFIRE,
+            Material.SOUL_CAMPFIRE,
+            Material.JIGSAW,
+            Material.LECTERN,
+            Material.SMOKER,
+            Material.BEEHIVE,
+            Material.BEE_NEST,
+            Material.SCULK_CATALYST,
+            Material.SCULK_SHRIEKER,
+            Material.SCULK_SENSOR,
+            Material.CHISELED_BOOKSHELF,
+            Material.DECORATED_POT,
+            Material.SUSPICIOUS_SAND
+        ), MetaBlockState::new);
+
+        register(Material.TROPICAL_FISH_BUCKET, MetaTropicalFishBucket::new);
+        register(Material.AXOLOTL_BUCKET, MetaAxolotlBucket::new);
+        register(Material.SUSPICIOUS_STEW, MetaSuspiciousStew::new);
+        register(Material.COMPASS, MetaCompass::new);
+        register(Material.BUNDLE, MetaBundle::new);
+        register(Material.GOAT_HORN, MetaMusicInstrument::new);
+    }
+
+
+    static void register(Collection<Material> materials, MetaSupplier supplier) {
+        for (Material material : materials) {
+            register(material, supplier);
+        }
+    }
+
+    static void register(Material material, MetaSupplier supplier) {
+        if (SUPPLIERS.containsKey(material)) {
+            throw new IllegalArgumentException("Provided duplicate material " + material);
+        }
+
+        SUPPLIERS.put(material, supplier);
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/item/PaperMetaSerialization.java b/src/main/java/io/papermc/paper/item/PaperMetaSerialization.java
new file mode 100644
index 0000000000000000000000000000000000000000..e3c37b89481bcff88280a17a74f0f4963b8f17aa
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/PaperMetaSerialization.java
@@ -0,0 +1,85 @@
+package io.papermc.paper.item;
+
+import io.papermc.paper.item.meta.PaperMeta;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.SnbtPrinterTagVisitor;
+import net.minecraft.nbt.TagParser;
+import net.minecraft.world.item.Items;
+import org.bukkit.Bukkit;
+import org.bukkit.Material;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.inventory.CraftMetaItem;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.ItemMeta;
+
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
+import java.util.Base64;
+import java.util.HashMap;
+import java.util.Map;
+
+/*
+This is meant to convert the legacy manually upkept bukkit crud into a minecraft backed format.
+
+This will delegate the legacy serialization logic onto the old meta classes, and then will
+convert them to the paper meta class.
+
+When serializing, we will serialize with type "PAPER_META" and simply write a dummy item into the storage.
+This allows us to store in the NBT default format, and have auto version updating.... preventing us from upkeeping our own format.
+ */
+public class PaperMetaSerialization {
+
+    // Convert the craft meta into a paper meta
+    public static ItemMeta deserialize(String type, Constructor<? extends CraftMetaItem> constructor, Map<String, Object> map) throws Throwable {
+        if (type.equals("PAPER_META")) {
+            // Represents our custom paper meta type
+            String snbt = (String) map.get("snbt");
+            // Decode the meta
+            return CraftItemStack.getItemMeta(net.minecraft.world.item.ItemStack.of(TagParser.parseTag(snbt)));
+        }
+
+        if (constructor == null) {
+            throw new IllegalArgumentException(type + " is not a valid meta type");
+        }
+
+        try {
+            // CONVERT LEGACY META ITEM
+            constructor.setAccessible(true);
+            return convertBukkitToPaper(constructor.newInstance(map));
+        } catch (final InstantiationException | IllegalAccessException e) {
+            throw new AssertionError(e);
+        } catch (final InvocationTargetException e) {
+            throw e.getCause();
+        }
+    }
+
+    // We need to serialize metadata under our own "custom" metadata.
+    public static Map<String, Object> serialize(PaperMeta paperMeta) {
+        Map<String, Object> meta = new HashMap<>();
+        meta.put("meta-type", "PAPER_META");
+
+        CraftItemStack itemStack = CraftItemStack.asCraftCopy(new ItemStack(paperMeta.getMaterial()));
+        // Manually set the tag, bypassing any sort of checks
+        itemStack.handle.setTag(paperMeta.getPropertyHolder().getCompoundTag());
+        // Serialze the itemstack.
+        // We really don't care about the type/count, we just want to be able to serialize the main data in order to use the
+        // datafixer system
+        CompoundTag tag = new CompoundTag();
+        itemStack.handle.save(tag);
+        meta.put("snbt", new SnbtPrinterTagVisitor().visit(tag));
+
+        return meta;
+    }
+
+    public static Map<String, Object> serialize(CraftMetaItem paperMeta) {
+        return serialize(convertBukkitToPaper(paperMeta));
+    }
+
+    public static PaperMeta convertBukkitToPaper(CraftMetaItem meta) {
+        CompoundTag compoundTag = new CompoundTag();
+        meta.apply(compoundTag);
+
+        return new PaperMeta(io.papermc.paper.property.nbt.NbtPropertyHolder.itemHolder(compoundTag), Material.STONE);
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/PaperMeta.java b/src/main/java/io/papermc/paper/item/meta/PaperMeta.java
new file mode 100644
index 0000000000000000000000000000000000000000..a4fa68af979b3e27155dc885a6f420064e672dbe
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/PaperMeta.java
@@ -0,0 +1,742 @@
+package io.papermc.paper.item.meta;
+
+import com.destroystokyo.paper.Namespaced;
+import com.google.common.collect.LinkedHashMultimap;
+import com.google.common.collect.Multimap;
+import com.google.common.collect.SetMultimap;
+import com.google.common.collect.Sets;
+import io.papermc.paper.inventory.item.properties.AttributePair;
+import io.papermc.paper.inventory.item.properties.EnchantmentPair;
+import io.papermc.paper.item.PaperMetaSerialization;
+import io.papermc.paper.property.MutablePropertyView;
+import io.papermc.paper.property.PropertyKey;
+import io.papermc.paper.property.nbt.AdapterContext;
+import io.papermc.paper.property.nbt.NbtPropertyHolder;
+import io.papermc.paper.property.nbt.pdc.LivePersistentDataContainer;
+import io.papermc.paper.property.types.EnchantmentPairImpl;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.minecraft.world.item.BlockItem;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.attribute.Attribute;
+import org.bukkit.attribute.AttributeModifier;
+import org.bukkit.block.data.BlockData;
+import org.bukkit.configuration.serialization.ConfigurationSerializable;
+import org.bukkit.configuration.serialization.DelegateDeserialization;
+import org.bukkit.craftbukkit.Overridden;
+import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.bukkit.craftbukkit.inventory.CraftItemFactory;
+import org.bukkit.craftbukkit.inventory.CraftMetaItem;
+import org.bukkit.craftbukkit.inventory.tags.DeprecatedCustomTagContainer;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.enchantments.Enchantment;
+import org.bukkit.inventory.EquipmentSlot;
+import org.bukkit.inventory.ItemFlag;
+import org.bukkit.inventory.meta.BlockDataMeta;
+import org.bukkit.inventory.meta.Damageable;
+import org.bukkit.inventory.meta.ItemMeta;
+import org.bukkit.inventory.meta.Repairable;
+import org.bukkit.inventory.meta.tags.CustomItemTagContainer;
+import org.bukkit.persistence.PersistentDataContainer;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Set;
+
+import static io.papermc.paper.inventory.item.properties.ItemProperties.*;
+
+@DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
+public class PaperMeta implements ItemMeta, Damageable, Repairable, BlockDataMeta, ConfigurationSerializable {
+
+    private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
+
+    protected final NbtPropertyHolder propertyHolder;
+    protected final Material material;
+
+    public PaperMeta(MutablePropertyView propertyHolder, Material material) {
+        this.propertyHolder = (NbtPropertyHolder) propertyHolder;
+        this.material = material;
+    }
+
+    protected boolean hasInPropertyPath(PropertyKey<MutablePropertyView> outer, PropertyKey<?> inner) {
+        MutablePropertyView holder = this.propertyHolder.get(outer);
+        if (holder != null) {
+            return holder.hasProperty(inner);
+        }
+
+        return false;
+    }
+
+    protected <T> T getFromPropertyPath(PropertyKey<MutablePropertyView> outer, PropertyKey<T> inner) {
+        MutablePropertyView holder = this.propertyHolder.get(outer);
+        if (holder != null) {
+            return holder.get(inner);
+        }
+
+        return null;
+    }
+
+    @Contract("_,_m,,!null -> !null")
+    protected <T> T getFromPropertyPathOrElse(PropertyKey<MutablePropertyView> outer, PropertyKey<T> inner, T defaultValue) {
+        MutablePropertyView holder = this.propertyHolder.get(outer);
+        if (holder != null) {
+            return holder.getOrDefault(inner, defaultValue);
+        }
+
+        return defaultValue;
+    }
+
+    protected <T> void unsetInPropertyPath(PropertyKey<MutablePropertyView> outer, PropertyKey<T> inner) {
+        MutablePropertyView holder = this.propertyHolder.get(outer);
+        if (holder != null) {
+            holder.unset(inner);
+        }
+    }
+
+    protected <T> void setFromPropertyPath(PropertyKey<MutablePropertyView> outer, PropertyKey<T> inner, T value) {
+        MutablePropertyView holder = this.propertyHolder.getOrCreate(outer);
+        holder.set(inner, value);
+    }
+
+    @Override
+    public boolean hasDisplayName() {
+        return this.hasInPropertyPath(DISPLAY, DISPLAY_NAME);
+    }
+
+    @Nullable
+    @Override
+    public Component displayName() {
+        return this.getFromPropertyPath(DISPLAY, DISPLAY_NAME);
+    }
+
+    @Override
+    public void displayName(@Nullable Component displayName) {
+        this.setFromPropertyPath(DISPLAY, DISPLAY_NAME, displayName);
+    }
+
+    @Override
+    public @NotNull String getDisplayName() {
+        Component displayName = this.displayName();
+        if (displayName == null) {
+            return "";
+        }
+        String gson = GsonComponentSerializer.gson().serialize(displayName);
+        return CraftChatMessage.fromJSONComponent(gson);
+    }
+
+    @Override
+    public void setDisplayName(@Nullable String name) {
+        // TODO: test null strings
+        this.displayName(GsonComponentSerializer.gson().deserialize(CraftChatMessage.fromStringOrNullToJSON(name)));
+    }
+
+    @NotNull
+    @Override
+    public BaseComponent[] getDisplayNameComponent() {
+        Component displayName = this.displayName();
+        if (displayName == null) {
+            return new BaseComponent[0];
+        }
+
+        return net.md_5.bungee.chat.ComponentSerializer.parse(GsonComponentSerializer.gson().serialize(displayName));
+    }
+
+    @Override
+    public void setDisplayNameComponent(@Nullable BaseComponent[] component) {
+        String gson = net.md_5.bungee.chat.ComponentSerializer.toString(component);
+        this.displayName(GsonComponentSerializer.gson().deserialize(gson));
+    }
+
+    @Override
+    public boolean hasLocalizedName() {
+        return this.hasInPropertyPath(DISPLAY, LOC_NAME);
+    }
+
+    @Override
+    public @NotNull String getLocalizedName() {
+        return this.getFromPropertyPath(DISPLAY, LOC_NAME);
+    }
+
+    @Override
+    public void setLocalizedName(@Nullable String name) {
+        this.setFromPropertyPath(DISPLAY, LOC_NAME, name);
+    }
+
+    @Override
+    public boolean hasLore() {
+        return this.hasInPropertyPath(DISPLAY, LORE);
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public @Nullable List<Component> lore() {
+        return (List<Component>) this.getFromPropertyPath(DISPLAY, LORE);
+    }
+
+    @Override
+    public void lore(@Nullable List<? extends Component> lore) {
+        this.setFromPropertyPath(DISPLAY, LORE, lore);
+    }
+
+    @Override
+    public @Nullable List<String> getLore() {
+        return null;
+    }
+
+    @Override
+    public void setLore(@Nullable List<String> lore) {
+
+    }
+
+    @Override
+    public @Nullable List<BaseComponent[]> getLoreComponents() {
+        return null;
+    }
+
+    @Override
+    public void setLoreComponents(@Nullable List<BaseComponent[]> lore) {
+
+    }
+
+    @Override
+    public boolean hasCustomModelData() {
+        return this.propertyHolder.hasProperty(CUSTOM_MODEL_DATA);
+    }
+
+    @Override
+    public int getCustomModelData() {
+        return this.propertyHolder.getOrDefault(CUSTOM_MODEL_DATA, 0);
+    }
+
+    @Override
+    public void setCustomModelData(@Nullable Integer data) {
+        this.propertyHolder.set(CUSTOM_MODEL_DATA, data);
+    }
+
+    @Override
+    public boolean hasEnchants() {
+        // Legacy reasons?
+        // TODO: check
+        return this.propertyHolder.hasProperty(ENCHANTMENTS) && !this.propertyHolder.get(ENCHANTMENTS).isEmpty();
+    }
+
+    @Override
+    public boolean hasEnchant(@NotNull Enchantment ench) {
+        List<EnchantmentPair> pairs = this.propertyHolder.get(ENCHANTMENTS);
+        if (pairs == null) {
+            return false;
+        }
+
+        for (EnchantmentPair next : pairs) {
+            if (next.enchantment() == ench) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    public int getEnchantLevel(@NotNull Enchantment ench) {
+        List<EnchantmentPair> pairs = this.propertyHolder.get(ENCHANTMENTS);
+        if (pairs == null) {
+            return 0;
+        }
+
+        for (EnchantmentPair next : pairs) {
+            if (next.enchantment() == ench) {
+                return next.level();
+            }
+        }
+
+        return 0;
+    }
+
+    @Override
+    public @NotNull Map<Enchantment, Integer> getEnchants() {
+        List<EnchantmentPair> pairs = this.propertyHolder.get(ENCHANTMENTS);
+        if (pairs == null) {
+            return Map.of();
+        }
+
+        Map<Enchantment, Integer> enchants = new HashMap<>();
+        for (EnchantmentPair next : pairs) {
+            enchants.put(next.enchantment(), next.level());
+        }
+
+        return enchants;
+    }
+
+    @Override
+    public boolean addEnchant(@NotNull Enchantment ench, int level, boolean ignoreLevelRestriction) {
+        if (ignoreLevelRestriction || level >= ench.getStartLevel() && level <= ench.getMaxLevel()) {
+            List<EnchantmentPair> enchantments = this.propertyHolder.getOrCreate(ENCHANTMENTS);
+
+            EnchantmentPair oldValue = null;
+            int oldIndex = 0;
+            for (int i = 0; i < enchantments.size(); i++) {
+                EnchantmentPair value = enchantments.get(i);
+                if (value.enchantment() == ench) {
+                    oldValue = value;
+                    oldIndex = i;
+                    break;
+                }
+            }
+
+            if (oldValue == null) {
+                enchantments.add(new EnchantmentPairImpl(ench, level));
+                return true;
+            } else {
+                enchantments.set(oldIndex, new EnchantmentPairImpl(ench, level));
+                return oldValue.level() != level;
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    public boolean removeEnchant(@NotNull Enchantment ench) {
+        List<EnchantmentPair> enchantmentMap = this.propertyHolder.get(ENCHANTMENTS);
+        if (enchantmentMap == null) {
+            return false;
+        }
+
+        Iterator<EnchantmentPair> iterator = enchantmentMap.listIterator();
+        while (iterator.hasNext()) {
+            EnchantmentPair next = iterator.next();
+            if (next.enchantment() == ench) {
+                iterator.remove();
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    public boolean hasConflictingEnchant(@NotNull Enchantment ench) {
+        if (!hasEnchants()) {
+            return false;
+        }
+
+        for (EnchantmentPair enchant : this.propertyHolder.getOrDefault(ENCHANTMENTS, List.of())) {
+            if (enchant.enchantment().conflictsWith(ench)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    public void addItemFlags(@NotNull ItemFlag... itemFlags) {
+        Set<ItemFlag> flagSetValue = this.propertyHolder.getOrCreate(HIDE_FLAGS);
+        flagSetValue.addAll(Arrays.asList(itemFlags));
+    }
+
+    @Override
+    public void removeItemFlags(@NotNull ItemFlag... itemFlags) {
+        Set<ItemFlag> flagSetValue = this.propertyHolder.get(HIDE_FLAGS);
+        if (flagSetValue == null) {
+            return;
+        }
+
+        for (ItemFlag flag : itemFlags) {
+            flagSetValue.remove(flag);
+        }
+    }
+
+    @Override
+    public @NotNull Set<ItemFlag> getItemFlags() {
+        return this.propertyHolder.getOrDefault(HIDE_FLAGS, Set.of());
+    }
+
+    @Override
+    public boolean hasItemFlag(@NotNull ItemFlag flag) {
+        return this.propertyHolder.hasProperty(HIDE_FLAGS);
+    }
+
+    @Override
+    public boolean isUnbreakable() {
+        return this.propertyHolder.hasProperty(UNBREAKABLE) && this.propertyHolder.get(UNBREAKABLE);
+    }
+
+    @Override
+    public void setUnbreakable(boolean unbreakable) {
+        this.propertyHolder.set(UNBREAKABLE, unbreakable);
+    }
+
+    @Override
+    public boolean hasAttributeModifiers() {
+        return this.propertyHolder.hasProperty(ATTRIBUTES);
+    }
+
+    @Override
+    public @Nullable Multimap<Attribute, AttributeModifier> getAttributeModifiers() {
+        return null;
+        // return this.propertyHolder.getOrDefault(ATTRIBUTES, LinkedHashMultimap.create());
+    }
+
+    @Override
+    public void setAttributeModifiers(@Nullable Multimap<Attribute, AttributeModifier> attributeModifiers) {
+        //this.propertyHolder.set(ATTRIBUTES, attributeModifiers);
+    }
+
+    @Override
+    public @NotNull Multimap<Attribute, AttributeModifier> getAttributeModifiers(@NotNull EquipmentSlot slot) {
+        SetMultimap<Attribute, AttributeModifier> result = LinkedHashMultimap.create();
+        for (AttributePair entry : this.propertyHolder.getOrCreate(ATTRIBUTES)) {
+            if (entry.modifier().getSlot() == null || entry.modifier().getSlot() == slot) {
+                result.put(entry.attribute(), entry.modifier());
+            }
+        }
+
+        return result;
+    }
+
+    @Override
+    public @Nullable Collection<AttributeModifier> getAttributeModifiers(@NotNull Attribute attribute) {
+        return this.propertyHolder.get(ATTRIBUTES).stream().filter((pair) -> pair.attribute() == attribute).map(AttributePair::modifier).toList();
+    }
+
+    @Override
+    public boolean addAttributeModifier(@NotNull Attribute attribute, @NotNull AttributeModifier modifier) {
+        return false; // TODO
+//        MultiMapValue<Attribute, AttributeModifier> attributes = this.propertyHolder.getOrCreate(ATTRIBUTES);
+//        for (Map.Entry<Attribute, AttributeModifier> entry : attributes.entries()) {
+//            Preconditions.checkArgument(!entry.getValue().getUniqueId().equals(modifier.getUniqueId()), "Cannot register AttributeModifier. Modifier is already applied! %s", modifier);
+//        }
+//
+//        return attributes.put(attribute, modifier);
+    }
+
+    @Override
+    public boolean removeAttributeModifier(@NotNull Attribute attribute) {
+        return false; // TODO
+//        this.propertyHolder.getOrCreate(ATTRIBUTES).
+//        return !this.attributeModifiers.removeAll(attribute).isEmpty();
+    }
+
+    @Override
+    public boolean removeAttributeModifier(@NotNull EquipmentSlot slot) {
+        return false; // TODO
+//        int removed = 0;
+//        Iterator<Map.Entry<Attribute, AttributeModifier>> iter = this.attributeModifiers.entries().iterator();
+//
+//        while (iter.hasNext()) {
+//            Map.Entry<Attribute, AttributeModifier> entry = iter.next();
+//            // Explicitly match against null because (as of MC 1.13) AttributeModifiers without a -
+//            // set slot are active in any slot.
+//            if (entry.getValue().getSlot() == null || entry.getValue().getSlot() == slot) {
+//                iter.remove();
+//                ++removed;
+//            }
+//        }
+//        return removed > 0;
+    }
+
+    @Override
+    public boolean removeAttributeModifier(@NotNull Attribute attribute, @NotNull AttributeModifier modifier) {
+        return false; // TODO
+//        int removed = 0;
+//        Iterator<Map.Entry<Attribute, AttributeModifier>> iter = this.attributeModifiers.entries().iterator();
+//
+//        while (iter.hasNext()) {
+//            Map.Entry<Attribute, AttributeModifier> entry = iter.next();
+//            if (entry.getKey() == null || entry.getValue() == null) {
+//                iter.remove();
+//                ++removed;
+//                continue; // remove all null values while we are here
+//            }
+//
+//            if (entry.getKey() == attribute && entry.getValue().getUniqueId().equals(modifier.getUniqueId())) {
+//                iter.remove();
+//                ++removed;
+//            }
+//        }
+//        return removed > 0;
+    }
+
+    @Override
+    public @NotNull CustomItemTagContainer getCustomTagContainer() {
+        return new DeprecatedCustomTagContainer(this.getPersistentDataContainer());
+    }
+
+    @Override
+    public void setVersion(int version) {
+        // TODO
+    }
+
+    @Override
+    public @NotNull PaperMeta clone() {
+        return new PaperMeta(propertyHolder, this.material);
+    }
+
+    @Override
+    public Set<Material> getCanDestroy() {
+        return !hasDestroyableKeys() ? Collections.emptySet() : legacyGetMatsFromKeys(this.getDestroyableKeys());
+    }
+
+    @Override
+    public void setCanDestroy(Set<Material> canDestroy) {
+        List<Namespaced> namespaced = new ArrayList<>();
+        legacyClearAndReplaceKeys(namespaced, canDestroy);
+        this.propertyHolder.set(CAN_DESTROY_BLOCK_LIST, namespaced);
+    }
+
+    @Override
+    public Set<Material> getCanPlaceOn() {
+        return !hasPlaceableKeys() ? Collections.emptySet() : legacyGetMatsFromKeys(this.getPlaceableKeys());
+    }
+
+    @Override
+    public void setCanPlaceOn(Set<Material> canPlaceOn) {
+        List<Namespaced> namespaced = new ArrayList<>();
+        legacyClearAndReplaceKeys(namespaced, canPlaceOn);
+        this.propertyHolder.set(CAN_PLACE_ON_BLOCK_LIST, namespaced);
+    }
+
+    @Deprecated
+    private void legacyClearAndReplaceKeys(Collection<Namespaced> toUpdate, Collection<Material> beingSet) {
+        if (beingSet.stream().anyMatch(Material::isLegacy)) {
+            throw new IllegalArgumentException("Set must not contain any legacy materials!");
+        }
+
+        toUpdate.clear();
+        toUpdate.addAll(beingSet.stream().map(Material::getKey).collect(java.util.stream.Collectors.toSet()));
+    }
+
+    @Deprecated
+    private Set<Material> legacyGetMatsFromKeys(Collection<Namespaced> names) {
+        Set<Material> mats = Sets.newHashSet();
+        for (Namespaced key : names) {
+            if (!(key instanceof org.bukkit.NamespacedKey)) {
+                continue;
+            }
+
+            Material material = Material.matchMaterial(key.toString(), false);
+            if (material != null) {
+                mats.add(material);
+            }
+        }
+
+        return mats;
+    }
+
+    @Override
+    public @NotNull Set<Namespaced> getDestroyableKeys() {
+        Set<Namespaced> namespaced = new HashSet<>();
+        for (Namespaced legacy : this.propertyHolder.getOrDefault(CAN_DESTROY_BLOCK_LIST, List.of())) {
+            namespaced.add(new NamespacedKey(legacy.getNamespace(), legacy.getKey()));
+        }
+        return namespaced;
+    }
+
+    @Override
+    public void setDestroyableKeys(@NotNull Collection<Namespaced> canDestroy) {
+        List<Namespaced> namespaced = new ArrayList<>();
+        for (Namespaced legacy : canDestroy) {
+            namespaced.add(legacy);
+        }
+        this.propertyHolder.set(CAN_DESTROY_BLOCK_LIST, namespaced);
+    }
+
+    @Override
+    public @NotNull Set<Namespaced> getPlaceableKeys() {
+        Set<Namespaced> namespaced = new HashSet<>();
+        for (Namespaced legacy : this.propertyHolder.getOrDefault(CAN_PLACE_ON_BLOCK_LIST, List.of())) {
+            namespaced.add(new NamespacedKey(legacy.getNamespace(), legacy.getKey()));
+        }
+        return namespaced;
+    }
+
+    @Override
+    public @NotNull void setPlaceableKeys(@NotNull Collection<Namespaced> canPlaceOn) {
+        List<Namespaced> namespaced = new ArrayList<>();
+        for (Namespaced legacy : canPlaceOn) {
+            namespaced.add(legacy);
+        }
+        this.propertyHolder.set(CAN_PLACE_ON_BLOCK_LIST, namespaced);
+    }
+
+    @Override
+    public boolean hasPlaceableKeys() {
+        return !this.propertyHolder.getOrDefault(CAN_PLACE_ON_BLOCK_LIST, List.of()).isEmpty();
+    }
+
+    @Override
+    public boolean hasDestroyableKeys() {
+        return !this.propertyHolder.getOrDefault(CAN_DESTROY_BLOCK_LIST, List.of()).isEmpty();
+    }
+
+    @Override
+    public @NotNull PersistentDataContainer getPersistentDataContainer() {
+        return new LivePersistentDataContainer(((NbtPropertyHolder) this.propertyHolder.getOrCreate(PUBLIC_BUKKIT_VALUES)).getCompoundTag(), DATA_TYPE_REGISTRY);
+    }
+
+    @Override
+    public @NotNull String getAsString() {
+        return this.toString();
+    }
+
+    public void migrateFrom(MutablePropertyView mutable) {
+    }
+
+    @NotNull
+    public NbtPropertyHolder getPropertyHolder() {
+        return propertyHolder;
+    }
+
+    // TODO
+
+    @Override
+    public String toString() {
+        return this.getClass().getName() + "{" +
+            "propertyHolder=" + propertyHolder +
+            '}';
+    }
+
+    // Block data meta
+    @Override
+    public boolean hasBlockData() {
+        return this.propertyHolder.hasProperty(BLOCK_STATE);
+    }
+
+    @Override
+    public BlockData getBlockData(Material material) {
+        // Paper start - fix NPE if this.blockData is null
+        final net.minecraft.world.level.block.state.BlockState defaultBlockState = CraftMagicNumbers.getBlock(material).defaultBlockState();
+        MutablePropertyView holder = this.propertyHolder.get(BLOCK_STATE);
+
+        return CraftBlockData.fromData(holder == null ? defaultBlockState : BlockItem.getBlockState(defaultBlockState, ((NbtPropertyHolder) holder).getCompoundTag()));
+        // Paper end
+    }
+
+    @Override
+    public void setBlockData(BlockData blockData) {
+        this.propertyHolder.set(BLOCK_STATE, NbtPropertyHolder.simpleBlob(((CraftBlockData) blockData).toStates(), AdapterContext.empty()));
+    }
+
+    // Damage meta
+
+    @Override
+    public boolean hasDamage() {
+        return this.propertyHolder.hasProperty(DAMAGE);
+    }
+
+    @Override
+    public int getDamage() {
+        return this.propertyHolder.getOrDefault(DAMAGE, 0);
+    }
+
+    @Override
+    public void setDamage(int damage) {
+        this.propertyHolder.set(DAMAGE, damage);
+    }
+
+    // REpair meta
+    @Override
+    public boolean hasRepairCost() {
+        return this.propertyHolder.hasProperty(REPAIR_COST);
+    }
+
+    @Override
+    public int getRepairCost() {
+        return this.propertyHolder.getOrDefault(REPAIR_COST, 0);
+    }
+
+    @Override
+    public void setRepairCost(int cost) {
+        this.propertyHolder.set(REPAIR_COST, cost);
+    }
+
+    @Override
+    public final boolean equals(Object object) {
+        if (object == null) {
+            return false;
+        }
+        if (object == this) {
+            return true;
+        }
+        if (!(object instanceof PaperMeta)) {
+            return false;
+        }
+        return CraftItemFactory.instance().equals(this, (ItemMeta) object);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(propertyHolder);
+    }
+
+    // Legacy crud
+    /*
+    Serialization strategy:
+    Load meta into legacy meta object, serialize into a "paper" format which uses byte serialization.
+     */
+    @Override
+    public @NotNull Map<String, Object> serialize() {
+        return PaperMetaSerialization.serialize(this);
+    }
+
+    // Equality checks
+    /**
+     * This method is almost as weird as notUncommon.
+     * Only return false if your common internals are unequal.
+     * Checking your own internals is redundant if you are not common, as notUncommon is meant for checking those 'not common' variables.
+     */
+    @Overridden
+    public boolean equalsCommon(PaperMeta that) {
+        return ((this.hasDisplayName() ? that.hasDisplayName() && this.getDisplayName().equals(that.getDisplayName()) : !that.hasDisplayName()))
+            && (this.hasLocalizedName() ? that.hasLocalizedName() && this.getLocalizedName().equals(that.getLocalizedName()) : !that.hasLocalizedName())
+            && (this.hasEnchants() ? that.hasEnchants() && this.getEnchants().equals(that.getEnchants()) : !that.hasEnchants())
+            && (Objects.equals(this.getLore(), that.getLore()))
+            && (this.hasCustomModelData() ? that.hasCustomModelData() && this.getCustomModelData() == that.getCustomModelData() : !that.hasCustomModelData())
+            && (this.hasBlockData() ? that.hasBlockData() && this.propertyHolder.get(BLOCK_STATE).equals(that.propertyHolder.get(BLOCK_STATE)) : !that.hasBlockData())
+            && (this.hasRepairCost() ? that.hasRepairCost() && this.getRepairCost() == that.getRepairCost() : !that.hasRepairCost())
+            && (this.hasAttributeModifiers() ? that.hasAttributeModifiers() && this.getAttributeModifiers().equals(that.getAttributeModifiers()) : !that.hasAttributeModifiers())
+            && (this.getPersistentDataContainer().equals(that.getPersistentDataContainer()))
+            && (this.getItemFlags().equals(that.getItemFlags())
+            && (this.isUnbreakable() == that.isUnbreakable())
+            && (this.hasDamage() ? that.hasDamage() && this.getDamage() == that.getDamage() : !that.hasDamage())
+            // Paper start - Implement an API for CanPlaceOn and CanDestroy NBT values
+            && (this.hasPlaceableKeys() ? that.hasPlaceableKeys() && this.getPlaceableKeys().equals(that.getPlaceableKeys()) : !that.hasPlaceableKeys())
+            && (this.hasDestroyableKeys() ? that.hasDestroyableKeys() && this.getDestroyableKeys().equals(that.getDestroyableKeys()) : !that.hasDestroyableKeys()));
+        // Paper end
+    }
+
+    /**
+     * This method is a bit weird...
+     * Return true if you are a common class OR your uncommon parts are empty.
+     * Empty uncommon parts implies the NBT data would be equivalent if both were applied to an item
+     */
+    @Overridden
+    public boolean notUncommon(PaperMeta meta) {
+        return true;
+    }
+
+    @Overridden
+    public boolean isEmpty() {
+        return !(this.hasDisplayName() || this.hasLocalizedName() || this.hasEnchants() || (this.getLore() != null) || this.hasCustomModelData() || this.hasBlockData() || this.hasRepairCost() || !this.getPersistentDataContainer().isEmpty() || !this.getItemFlags().isEmpty() || this.isUnbreakable() || this.hasDamage() || this.hasAttributeModifiers() || this.hasPlaceableKeys() || this.hasDestroyableKeys()); // Paper - Implement an API for CanPlaceOn and CanDestroy NBT values
+    }
+
+    public Material getMaterial() {
+        return material;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/PaperMetaProperties.java b/src/main/java/io/papermc/paper/item/meta/PaperMetaProperties.java
new file mode 100644
index 0000000000000000000000000000000000000000..6526eb8766d186c9617c59cc95693e984d1808b3
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/PaperMetaProperties.java
@@ -0,0 +1,31 @@
+package io.papermc.paper.item.meta;
+
+import io.leangen.geantyref.TypeFactory;
+import io.papermc.paper.property.PropertyKey;
+import io.papermc.paper.property.nbt.AdapterContext;
+import io.papermc.paper.property.nbt.primitives.StringPrimitive;
+import io.papermc.paper.property.nbt.types.AxolotlVariantNbt;
+import io.papermc.paper.property.nbt.types.DyeColorNbt;
+import org.bukkit.DyeColor;
+import org.bukkit.NamespacedKey;
+import org.bukkit.block.banner.Pattern;
+
+import java.util.List;
+
+class PaperMetaProperties {
+
+    // Banner Block Entity
+    static final PropertyKey<DyeColor> BASE = PropertyKey.of("Base", DyeColor.class);
+    static final PropertyKey<List<Pattern>> PATTERNS = PropertyKey.of("Patterns", TypeFactory.parameterizedClass(List.class, Pattern.class));
+
+    // Block Entity
+    static final PropertyKey<String> IDENTIFIER = PropertyKey.of("id", String.class);
+
+    // Register
+    public static void register(AdapterContext context) {
+        context.register(BASE, new DyeColorNbt());
+        // TODO: Patterns
+        context.register(IDENTIFIER, new StringPrimitive());
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/item/property/ItemPropertyRegistration.java b/src/main/java/io/papermc/paper/item/property/ItemPropertyRegistration.java
new file mode 100644
index 0000000000000000000000000000000000000000..338c2a6654cdf82de64486f77761d8a55802d53a
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/property/ItemPropertyRegistration.java
@@ -0,0 +1,107 @@
+package io.papermc.paper.item.property;
+
+import io.papermc.paper.inventory.item.properties.ItemProperties;
+import io.papermc.paper.property.nbt.AdapterContext;
+import io.papermc.paper.property.nbt.primitives.BlockPositionNbtPrimitive;
+import io.papermc.paper.property.nbt.primitives.BooleanPrimitive;
+import io.papermc.paper.property.nbt.primitives.BytePrimitive;
+import io.papermc.paper.property.nbt.primitives.ColorNbtPrimitive;
+import io.papermc.paper.property.nbt.primitives.ComponentNbtPrimitive;
+import io.papermc.paper.property.nbt.primitives.IntegerPrimitive;
+import io.papermc.paper.property.nbt.primitives.ItemStackNbtPrimitive;
+import io.papermc.paper.property.nbt.primitives.KeyedRegistryPrimitive;
+import io.papermc.paper.property.nbt.primitives.NamespaceKeyNbtPrimitive;
+import io.papermc.paper.property.nbt.primitives.StringPrimitive;
+import io.papermc.paper.property.nbt.types.AttributeMap;
+import io.papermc.paper.property.nbt.types.AxolotlVariantNbt;
+import io.papermc.paper.property.nbt.types.BlockStateConditionNamespaceHackNbt;
+import io.papermc.paper.property.nbt.types.CompoundTagNbt;
+import io.papermc.paper.property.nbt.types.CustomEffectNbt;
+import io.papermc.paper.property.nbt.types.EnchantmentList;
+import io.papermc.paper.property.nbt.types.FireworkEffectNbt;
+import io.papermc.paper.property.nbt.types.GameProfileNbt;
+import io.papermc.paper.property.nbt.types.ItemFlagBitset;
+import io.papermc.paper.property.nbt.types.PotionDataNbt;
+import io.papermc.paper.property.nbt.types.StewEffectsListNbt;
+import io.papermc.paper.property.nbt.types.TropicalFishVariantNbt;
+import io.papermc.paper.property.nbt.types.WrappedListNbt;
+import net.kyori.adventure.text.Component;
+import org.bukkit.MusicInstrument;
+
+public class ItemPropertyRegistration {
+
+    public static final AdapterContext ITEM_CONTEXT = new AdapterContext();
+    static  {
+        ITEM_CONTEXT.register(ItemProperties.ENCHANTMENTS, new EnchantmentList());
+        ITEM_CONTEXT.register(ItemProperties.UNBREAKABLE, new BooleanPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.CAN_PLACE_ON_BLOCK_LIST, new WrappedListNbt<>(new BlockStateConditionNamespaceHackNbt()));
+        ITEM_CONTEXT.register(ItemProperties.CAN_DESTROY_BLOCK_LIST, new WrappedListNbt<>(new BlockStateConditionNamespaceHackNbt()));
+        ITEM_CONTEXT.register(ItemProperties.HIDE_FLAGS, new ItemFlagBitset());
+        ITEM_CONTEXT.register(ItemProperties.REPAIR_COST, new IntegerPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.CUSTOM_MODEL_DATA, new IntegerPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.DAMAGE, new IntegerPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.ATTRIBUTES, new AttributeMap());
+        ITEM_CONTEXT.register(ItemProperties.BLOCK_STATE, new CompoundTagNbt(ITEM_CONTEXT));
+        ITEM_CONTEXT.register(ItemProperties.ENTITY_TAG, new CompoundTagNbt(ITEM_CONTEXT));
+
+        ITEM_CONTEXT.register(ItemProperties.DISPLAY, new CompoundTagNbt(ITEM_CONTEXT));
+        ITEM_CONTEXT.register(ItemProperties.DISPLAY_NAME, new ComponentNbtPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.LORE, new WrappedListNbt(new ComponentNbtPrimitive()));
+        ITEM_CONTEXT.register(ItemProperties.COLOR, new ColorNbtPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.MAP_COLOR, new ColorNbtPrimitive());
+
+        ITEM_CONTEXT.register(ItemProperties.PUBLIC_BUKKIT_VALUES, new CompoundTagNbt(ITEM_CONTEXT));
+        ITEM_CONTEXT.register(ItemProperties.LOC_NAME, new StringPrimitive());
+
+        ITEM_CONTEXT.register(ItemProperties.TROPICAL_FISH_BUCKET_VARIANT, new TropicalFishVariantNbt());
+
+        ITEM_CONTEXT.register(ItemProperties.STEW_EFFECTS, new StewEffectsListNbt());
+
+        ITEM_CONTEXT.register(ItemProperties.SKULL_OWNER, new GameProfileNbt());
+        ITEM_CONTEXT.register(ItemProperties.SKULL_OWNER_NAME, new StringPrimitive());
+
+        // TODO: Potion
+        ITEM_CONTEXT.register(ItemProperties.CUSTOM_POTION_EFFECTS, new WrappedListNbt<>(new CustomEffectNbt()));
+        ITEM_CONTEXT.register(ItemProperties.DEFAULT_POTION_TYPE, new PotionDataNbt());
+
+        ITEM_CONTEXT.register(ItemProperties.MAP_ID, new IntegerPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.MAP_SCALE_DIRECTION, new BytePrimitive());
+        ITEM_CONTEXT.register(ItemProperties.MAP_TO_LOCK, new BooleanPrimitive());
+
+        ITEM_CONTEXT.register(ItemProperties.RECIPES, new WrappedListNbt<>(new NamespaceKeyNbtPrimitive()));
+
+        ITEM_CONTEXT.register(ItemProperties.FIREWORKS, new CompoundTagNbt(ITEM_CONTEXT));
+        ITEM_CONTEXT.register(ItemProperties.FLIGHT, new BytePrimitive());
+        ITEM_CONTEXT.register(ItemProperties.EXPLOSIONS, new WrappedListNbt<>(new FireworkEffectNbt()));
+
+        ITEM_CONTEXT.register(ItemProperties.STORED_ENCHANTMENTS, new EnchantmentList());
+
+        ITEM_CONTEXT.register(ItemProperties.CHARGED, new BooleanPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.CHARGED_PROJECTILES, new WrappedListNbt<>(new ItemStackNbtPrimitive()));
+
+        ITEM_CONTEXT.register(ItemProperties.LODESTONE_POS, new BlockPositionNbtPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.LODESTONE_DIMENSION, new NamespaceKeyNbtPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.LODESTONE_TRACKED, new BooleanPrimitive());
+
+        ITEM_CONTEXT.register(ItemProperties.ITEMS, new WrappedListNbt<>(new ItemStackNbtPrimitive()));
+
+        ITEM_CONTEXT.register(ItemProperties.TITLE, new StringPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.TITLE_FILTERED, new StringPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.AUTHOR, new StringPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.PAGES, new WrappedListNbt<>(new ComponentNbtPrimitive()));
+        ITEM_CONTEXT.register(ItemProperties.PAGES_FILTERED, new WrappedListNbt<>(new ComponentNbtPrimitive()));
+        ITEM_CONTEXT.register(ItemProperties.GENERATION, new IntegerPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.RESOLVED, new BooleanPrimitive());
+
+        ITEM_CONTEXT.register(ItemProperties.PAGES_WRITTEN, new WrappedListNbt<>(new StringPrimitive()));
+        ITEM_CONTEXT.register(ItemProperties.BLOCK_ENTITY_TAG, new CompoundTagNbt(ITEM_CONTEXT));
+        ITEM_CONTEXT.register(ItemProperties.NOTE_BLOCK_SOUND, new NamespaceKeyNbtPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.VARIANT, new AxolotlVariantNbt());
+
+        ITEM_CONTEXT.register(ItemProperties.INSTRUMENT, new KeyedRegistryPrimitive<>(MusicInstrument::getByKey, MusicInstrument::getKey));
+
+        ITEM_CONTEXT.lockRegistration();
+    }
+
+
+}
diff --git a/src/main/java/io/papermc/paper/property/adapter/TypeAdapter.java b/src/main/java/io/papermc/paper/property/adapter/TypeAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..6f19ef7ac64677b08769c35cd805acb5edff69a7
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/adapter/TypeAdapter.java
@@ -0,0 +1,10 @@
+package io.papermc.paper.property.adapter;
+
+public interface TypeAdapter<PLATFORM_TYPE, RUNTIME_TYPE> {
+
+    PLATFORM_TYPE toPlatform(RUNTIME_TYPE runtimeType);
+
+    RUNTIME_TYPE toRuntime(PLATFORM_TYPE platformType);
+
+
+}
diff --git a/src/main/java/io/papermc/paper/property/adapter/ValueTypeAdapter.java b/src/main/java/io/papermc/paper/property/adapter/ValueTypeAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..16aea9c70aa79fe0120f23354e6a94974c62aeef
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/adapter/ValueTypeAdapter.java
@@ -0,0 +1,13 @@
+package io.papermc.paper.property.adapter;
+
+import io.papermc.paper.property.PropertyKey;
+import io.papermc.paper.property.PropertyView;
+
+public interface ValueTypeAdapter<RUNTIME_TYPE, HOLDER extends PropertyView> {
+
+    RUNTIME_TYPE getValue(HOLDER holder, PropertyKey<RUNTIME_TYPE> propertyKey);
+
+    void writeDirect(HOLDER holder, PropertyKey<?> propertyKey, RUNTIME_TYPE direct);
+
+    RUNTIME_TYPE getNewValue(HOLDER holder, PropertyKey<RUNTIME_TYPE> propertyKey);
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/AdapterContext.java b/src/main/java/io/papermc/paper/property/nbt/AdapterContext.java
new file mode 100644
index 0000000000000000000000000000000000000000..b8f9b584ca86b1348d0980a2ded20a555d36bc5f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/AdapterContext.java
@@ -0,0 +1,45 @@
+package io.papermc.paper.property.nbt;
+
+import io.papermc.paper.property.PropertyKey;
+import org.bukkit.util.Consumer;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class AdapterContext {
+
+    private final Map<PropertyKey<?>, NbtPlatformAdapter<?>> adapters = new HashMap<>();
+    private boolean locked = false;
+
+    public static AdapterContext empty() {
+        return new AdapterContext();
+    }
+
+    public <T> void register(PropertyKey<T> key, NbtPlatformAdapter<T> adapter) {
+        if (locked) {
+            throw new IllegalStateException("Cannot dynamically register property types");
+        }
+
+        this.adapters.put(key, adapter);
+    }
+
+    public void lockRegistration() {
+        this.locked = true;
+    }
+
+    public static AdapterContext of(Consumer<AdapterContext> consumer) {
+        AdapterContext context = new AdapterContext();
+        consumer.accept(context);
+        context.lockRegistration();
+        return context;
+    }
+
+
+    public NbtPlatformAdapter getAdapter(PropertyKey key) {
+        NbtPlatformAdapter adapter = this.adapters.get(key);
+        if (adapter == null) {
+            throw new UnsupportedOperationException("Unimplemented adapter for NBT tag: " + key);
+        }
+        return adapter;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/NbtPlatformAdapter.java b/src/main/java/io/papermc/paper/property/nbt/NbtPlatformAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..661bda75180e9a56ac21ad9b31a7eacae1fd50cf
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/NbtPlatformAdapter.java
@@ -0,0 +1,12 @@
+package io.papermc.paper.property.nbt;
+
+import io.papermc.paper.property.PropertyKey;
+import io.papermc.paper.property.adapter.ValueTypeAdapter;
+
+public interface NbtPlatformAdapter<TYPE> extends ValueTypeAdapter<TYPE, NbtPropertyHolder> {
+    int getTagType();
+
+    default void removeDirect(NbtPropertyHolder nbtPropertyHolder, PropertyKey<TYPE> propertyKey) {
+        nbtPropertyHolder.getCompoundTag().remove(propertyKey.getKey());
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/NbtPropertyHolder.java b/src/main/java/io/papermc/paper/property/nbt/NbtPropertyHolder.java
new file mode 100644
index 0000000000000000000000000000000000000000..15ebf2de47c4d5d7b831047258eec630d9517c87
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/NbtPropertyHolder.java
@@ -0,0 +1,152 @@
+package io.papermc.paper.property.nbt;
+
+import io.papermc.paper.item.property.ItemPropertyRegistration;
+import io.papermc.paper.property.MutablePropertyView;
+import io.papermc.paper.property.PropertyKey;
+import net.minecraft.nbt.CompoundTag;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Objects;
+import java.util.Set;
+
+@SuppressWarnings("unchecked")
+public class NbtPropertyHolder implements MutablePropertyView {
+
+    private final AdapterContext adapterContext;
+    private final CompoundTag compoundTag;
+
+    // TODO cleanup.
+    // Properly pass a context object in places
+    public static NbtPropertyHolder simpleBlob(CompoundTag compoundTag, AdapterContext context) {
+        return new NbtPropertyHolder(context, compoundTag);
+    }
+
+    NbtPropertyHolder(AdapterContext adapterContext, CompoundTag compoundTag) {
+        if (compoundTag == null) {
+            throw new IllegalArgumentException("Cannot have null compound tag.");
+        }
+
+        this.adapterContext = adapterContext;
+        this.compoundTag = compoundTag;
+    }
+
+    public static MutablePropertyView itemHolder(CompoundTag compoundTag) {
+        return io.papermc.paper.property.nbt.NbtPropertyHolder.simpleBlob(compoundTag, ItemPropertyRegistration.ITEM_CONTEXT);
+    }
+
+    public static MutablePropertyView empty() {
+        return new NbtPropertyHolder(AdapterContext.empty(), new CompoundTag());
+    }
+
+    @Override
+    public void unset(PropertyKey<?> key) {
+        this.compoundTag.remove(key.getKey());
+    }
+
+    @Override
+    public <T> void set(@NotNull PropertyKey<T> key, T value) {
+        NbtPlatformAdapter adapter = this.getAdapter(key);
+        if (value != null) {
+            adapter.writeDirect(this, key, value);
+        } else {
+            adapter.removeDirect(this, key);
+        }
+    }
+
+    @Override
+    public <T> @NotNull T create(@NotNull PropertyKey<T> key) {
+        NbtPlatformAdapter adapter = this.getAdapter(key);
+        return (T) adapter.getNewValue(this, key);
+    }
+
+    @Override
+    public <T> T getOrCreate(@NotNull PropertyKey<T> key) {
+        NbtPlatformAdapter adapter = this.getAdapter(key);
+
+        if (!this.compoundTag.contains(key.getKey(), adapter.getTagType())) {
+            return (T) adapter.getNewValue(this, key);
+        }
+
+        return (T) adapter.getValue(this, key);
+    }
+
+    @Override
+    public MutablePropertyView clone() {
+        CompoundTag cloned = this.compoundTag.copy();
+        return new NbtPropertyHolder(this.adapterContext, cloned);
+    }
+
+    @Override
+    public void clear() {
+        this.compoundTag.tags.clear();
+    }
+
+    @Override
+    public <T> @Nullable T get(PropertyKey<T> key) {
+        NbtPlatformAdapter adapter = this.getAdapter(key);
+        if (adapter == null) {
+            throw new UnsupportedOperationException("No adapter for: " + key);
+        }
+
+        return (T) adapter.getValue(this, key);
+    }
+
+    @Override
+    public <T> @Nullable T getOrDefault(@NotNull PropertyKey<T> key, T defaultValue) {
+        T returnedValue = this.get(key);
+        if (returnedValue == null) {
+            return defaultValue;
+        }
+
+        return returnedValue;
+    }
+
+    @Override
+    public boolean hasProperty(@NotNull PropertyKey<?> propertyKey) {
+        return this.compoundTag.contains(propertyKey.getKey());
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return this.compoundTag.isEmpty();
+    }
+
+    public @NotNull Set<String> keySet() {
+        return this.compoundTag.getAllKeys();
+    }
+
+
+    public CompoundTag getCompoundTag() {
+        return compoundTag;
+    }
+
+    public NbtPlatformAdapter getAdapter(PropertyKey key) {
+        return this.adapterContext.getAdapter(key);
+    }
+
+    public AdapterContext getContext() {
+        return this.adapterContext;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        NbtPropertyHolder holder = (NbtPropertyHolder) o;
+        return Objects.equals(compoundTag, holder.compoundTag);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(compoundTag);
+    }
+
+    @Override
+    public String toString() {
+        return "NbtPropertyHolder{" +
+            "adapterContext=" + adapterContext +
+            ", compoundTag=" + compoundTag +
+            '}';
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/pdc/LivePersistentDataContainer.java b/src/main/java/io/papermc/paper/property/nbt/pdc/LivePersistentDataContainer.java
new file mode 100644
index 0000000000000000000000000000000000000000..cb596c72d3e141077597b5f35b26a7d33106fe3b
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/pdc/LivePersistentDataContainer.java
@@ -0,0 +1,170 @@
+package io.papermc.paper.property.nbt.pdc;
+
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.Tag;
+import org.apache.commons.lang.Validate;
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataAdapterContext;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry;
+import org.bukkit.persistence.PersistentDataAdapterContext;
+import org.bukkit.persistence.PersistentDataContainer;
+import org.bukkit.persistence.PersistentDataType;
+
+import java.util.HashSet;
+import java.util.Objects;
+import java.util.Set;
+
+public class LivePersistentDataContainer implements PersistentDataContainer {
+
+    private final CompoundTag compoundTag;
+    private final CraftPersistentDataTypeRegistry registry;
+    private final CraftPersistentDataAdapterContext adapterContext;
+
+    public LivePersistentDataContainer(CompoundTag compoundTag, CraftPersistentDataTypeRegistry registry) {
+        this.compoundTag = compoundTag;
+        this.registry = registry;
+        this.adapterContext = new CraftPersistentDataAdapterContext(this.registry);
+    }
+
+
+    @Override
+    public <T, Z> void set(NamespacedKey key, PersistentDataType<T, Z> type, Z value) {
+        Validate.notNull(key, "The provided key for the custom value was null");
+        Validate.notNull(type, "The provided type for the custom value was null");
+        Validate.notNull(value, "The provided value for the custom value was null");
+
+        this.compoundTag.put(key.toString(), this.registry.wrap(type.getPrimitiveType(), type.toPrimitive(value, adapterContext)));
+    }
+
+    @Override
+    public <T, Z> boolean has(NamespacedKey key, PersistentDataType<T, Z> type) {
+        Validate.notNull(key, "The provided key for the custom value was null");
+        Validate.notNull(type, "The provided type for the custom value was null");
+
+        Tag value = this.compoundTag.get(key.toString());
+        if (value == null) {
+            return false;
+        }
+
+        return this.registry.isInstanceOf(type.getPrimitiveType(), value);
+    }
+
+    @Override
+    public <T, Z> Z get(NamespacedKey key, PersistentDataType<T, Z> type) {
+        Validate.notNull(key, "The provided key for the custom value was null");
+        Validate.notNull(type, "The provided type for the custom value was null");
+
+        Tag value = this.compoundTag.get(key.toString());
+        if (value == null) {
+            return null;
+        }
+
+        return type.fromPrimitive(this.registry.extract(type.getPrimitiveType(), value), adapterContext);
+    }
+
+    @Override
+    public <T, Z> Z getOrDefault(NamespacedKey key, PersistentDataType<T, Z> type, Z defaultValue) {
+        Z z = this.get(key, type);
+        return z != null ? z : defaultValue;
+    }
+
+    @Override
+    public Set<NamespacedKey> getKeys() {
+        Set<NamespacedKey> keys = new HashSet<>();
+
+        this.compoundTag.getAllKeys().forEach(key -> {
+            String[] keyData = key.split(":", 2);
+            if (keyData.length == 2) {
+                keys.add(new NamespacedKey(keyData[0], keyData[1]));
+            }
+        });
+
+        return keys;
+    }
+
+    @Override
+    public void remove(NamespacedKey key) {
+        Validate.notNull(key, "The provided key for the custom value was null");
+
+        this.compoundTag.remove(key.toString());
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return this.compoundTag.isEmpty();
+    }
+
+    @Override
+    public PersistentDataAdapterContext getAdapterContext() {
+        return this.adapterContext;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        LivePersistentDataContainer that = (LivePersistentDataContainer) o;
+        return Objects.equals(compoundTag, that.compoundTag);
+    }
+
+    public CompoundTag toTagCompound() {
+        return compoundTag;
+    }
+
+    public void put(String key, Tag base) {
+        this.compoundTag.put(key, base);
+    }
+
+    public void putAll(CompoundTag compound) {
+        for (String key : compound.getAllKeys()) {
+            this.compoundTag.put(key, compound.get(key));
+        }
+    }
+
+
+    public CraftPersistentDataTypeRegistry getDataTagTypeRegistry() {
+        return this.registry;
+    }
+
+    @Override
+    public int hashCode() {
+        int hashCode = 3;
+        hashCode += this.compoundTag.hashCode(); // We will simply add the maps hashcode
+        return hashCode;
+    }
+
+
+    // Paper start
+    public void clear() {
+        this.compoundTag.tags.clear();
+    }
+
+    @Override
+    public boolean has(NamespacedKey key) {
+        Validate.notNull(key, "The provided key for the custom value was null");
+
+        return this.compoundTag.contains(key.toString());
+    }
+
+    @Override
+    public byte[] serializeToBytes() throws java.io.IOException {
+        net.minecraft.nbt.CompoundTag root = this.toTagCompound();
+        java.io.ByteArrayOutputStream byteArrayOutput = new java.io.ByteArrayOutputStream();
+        try (java.io.DataOutputStream dataOutput = new java.io.DataOutputStream(byteArrayOutput)) {
+            net.minecraft.nbt.NbtIo.write(root, dataOutput);
+            return byteArrayOutput.toByteArray();
+        }
+    }
+
+    @Override
+    public void readFromBytes(byte[] bytes, boolean clear) throws java.io.IOException {
+        if (clear) {
+            this.clear();
+        }
+        try (java.io.DataInputStream dataInput = new java.io.DataInputStream(new java.io.ByteArrayInputStream(bytes))) {
+            net.minecraft.nbt.CompoundTag compound = net.minecraft.nbt.NbtIo.read(dataInput);
+            this.putAll(compound);
+        }
+    }
+    // Paper end
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/AbstractListNbtPlatformAdapter.java b/src/main/java/io/papermc/paper/property/nbt/primitives/AbstractListNbtPlatformAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..d00f0702c23029185f96212f02b9a560e8584121
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/AbstractListNbtPlatformAdapter.java
@@ -0,0 +1,43 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import io.papermc.paper.util.TransformingRandomAccessList;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.Tag;
+
+import java.util.List;
+
+public abstract class AbstractListNbtPlatformAdapter<T> extends NbtPrimitiveWrapper<List<T>, ListTag> {
+
+    public AbstractListNbtPlatformAdapter() {
+        super(new ListTagPrimitive());
+    }
+
+    @Override
+    public List<T> fromPrimitive(ListTag primitive) {
+        return new TransformingRandomAccessList<>(primitive.list, this::deserialize, this::serialize);
+    }
+
+    @Override
+    public ListTag toPrimitive(List<T> type) {
+        ListTag listTag = new ListTag();
+        for (T object : type) {
+            listTag.add(serialize(object));
+        }
+
+        return listTag;
+    }
+
+    public abstract T deserialize(Tag tag);
+
+    public abstract Tag serialize(T value);
+
+    @Override
+    public int getTagType() {
+        return Tag.TAG_LIST;
+    }
+
+    @Override
+    public Tag emptyTag() {
+        return new ListTag();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/BlockPositionNbtPrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/BlockPositionNbtPrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..7031bdc1c541b85762743ab39e82c330bab84cc8
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/BlockPositionNbtPrimitive.java
@@ -0,0 +1,31 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import io.papermc.paper.math.Position;
+import net.minecraft.core.BlockPos;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.NbtUtils;
+import net.minecraft.nbt.Tag;
+
+public class BlockPositionNbtPrimitive extends SinglePrimitiveNbtPlatformAdapter<Position> {
+
+    @Override
+    public int getTagType() {
+        return Tag.TAG_COMPOUND;
+    }
+
+    @Override
+    public Position getType(Tag tag) {
+        BlockPos pos = NbtUtils.readBlockPos((CompoundTag) tag);
+        return Position.block(pos.getX(), pos.getY(), pos.getZ());
+    }
+
+    @Override
+    public Tag write(Position type) {
+        return NbtUtils.writeBlockPos(new BlockPos(type.blockZ(), type.blockY(), type.blockZ()));
+    }
+
+    @Override
+    public Tag emptyTag() {
+        return new CompoundTag();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/BooleanPrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/BooleanPrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..569727fdfe309fafa4a857a358a600ffc5fd9995
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/BooleanPrimitive.java
@@ -0,0 +1,29 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import net.minecraft.nbt.ByteTag;
+import net.minecraft.nbt.IntTag;
+import net.minecraft.nbt.Tag;
+
+public class BooleanPrimitive extends SinglePrimitiveNbtPlatformAdapter<Boolean> {
+
+    @Override
+    public int getTagType() {
+        return IntTag.TAG_BYTE;
+    }
+
+    @Override
+    public Boolean getType(Tag tag) {
+        return ((ByteTag) tag).getAsByte() != 0;
+    }
+
+    @Override
+    public Tag write(Boolean type) {
+        return ByteTag.valueOf(type);
+    }
+
+    @Override
+    public Tag emptyTag() {
+        return ByteTag.valueOf(false);
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/BytePrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/BytePrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..891b3cf8f787db85a062a54bfe24fb09f68854ee
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/BytePrimitive.java
@@ -0,0 +1,29 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import net.minecraft.nbt.ByteTag;
+import net.minecraft.nbt.IntTag;
+import net.minecraft.nbt.Tag;
+
+public class BytePrimitive extends SinglePrimitiveNbtPlatformAdapter<Byte> {
+
+    @Override
+    public int getTagType() {
+        return IntTag.TAG_BYTE;
+    }
+
+    @Override
+    public Byte getType(Tag tag) {
+        return ((ByteTag) tag).getAsByte();
+    }
+
+    @Override
+    public Tag write(Byte type) {
+        return ByteTag.valueOf(type);
+    }
+
+    @Override
+    public Tag emptyTag() {
+        return ByteTag.valueOf((byte) 0);
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/ColorNbtPrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/ColorNbtPrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..65a9fb79a91ade533128d36ef8ac88bbbba27415
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/ColorNbtPrimitive.java
@@ -0,0 +1,20 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import org.bukkit.Color;
+
+public class ColorNbtPrimitive extends NbtPrimitiveWrapper<Color, Integer> {
+
+    public ColorNbtPrimitive() {
+        super(new IntegerPrimitive());
+    }
+
+    @Override
+    public Color fromPrimitive(Integer primitive) {
+        return Color.fromRGB(primitive);
+    }
+
+    @Override
+    public Integer toPrimitive(Color type) {
+        return type.asRGB();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/ComponentNbtPrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/ComponentNbtPrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..fd501ae1b53eacfd1a83d5c8268709333f247b47
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/ComponentNbtPrimitive.java
@@ -0,0 +1,21 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
+
+public class ComponentNbtPrimitive extends NbtPrimitiveWrapper<Component, String> {
+
+    public ComponentNbtPrimitive() {
+        super(new StringPrimitive());
+    }
+
+    @Override
+    public Component fromPrimitive(String primitive) {
+        return GsonComponentSerializer.gson().deserialize(primitive);
+    }
+
+    @Override
+    public String toPrimitive(Component type) {
+        return GsonComponentSerializer.gson().serialize(type);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/CompoundTagPrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/CompoundTagPrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..ab1104d0ce3c72ef33f01587c3e7f7455404b1ed
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/CompoundTagPrimitive.java
@@ -0,0 +1,28 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.IntTag;
+import net.minecraft.nbt.Tag;
+
+public class CompoundTagPrimitive extends SinglePrimitiveNbtPlatformAdapter<CompoundTag> {
+
+    @Override
+    public int getTagType() {
+        return IntTag.TAG_COMPOUND;
+    }
+
+    @Override
+    public CompoundTag getType(Tag tag) {
+        return (CompoundTag) tag;
+    }
+
+    @Override
+    public Tag write(CompoundTag type) {
+        return type;
+    }
+
+    @Override
+    public Tag emptyTag() {
+        return new CompoundTag();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/IntArrayPrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/IntArrayPrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..5d05e6379e55df478394a912a4c052d93bce52cb
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/IntArrayPrimitive.java
@@ -0,0 +1,29 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import net.minecraft.nbt.IntArrayTag;
+import net.minecraft.nbt.IntTag;
+import net.minecraft.nbt.Tag;
+
+public class IntArrayPrimitive extends SinglePrimitiveNbtPlatformAdapter<int[]> {
+
+    @Override
+    public int getTagType() {
+        return IntTag.TAG_INT_ARRAY;
+    }
+
+    @Override
+    public int[] getType(Tag tag) {
+        return ((IntArrayTag) tag).getAsIntArray();
+    }
+
+    @Override
+    public Tag write(int[] type) {
+        return new IntArrayTag(type);
+    }
+
+    @Override
+    public Tag emptyTag() {
+        return new IntArrayTag(new int[0]);
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/IntegerPrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/IntegerPrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..2f461602b56efc274703b1630a260377ec8c1bda
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/IntegerPrimitive.java
@@ -0,0 +1,28 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import net.minecraft.nbt.IntTag;
+import net.minecraft.nbt.Tag;
+
+public class IntegerPrimitive extends SinglePrimitiveNbtPlatformAdapter<Integer> {
+
+    @Override
+    public int getTagType() {
+        return IntTag.TAG_INT;
+    }
+
+    @Override
+    public Integer getType(Tag tag) {
+        return ((IntTag) tag).getAsInt();
+    }
+
+    @Override
+    public Tag write(Integer type) {
+        return IntTag.valueOf(type);
+    }
+
+    @Override
+    public Tag emptyTag() {
+        return IntTag.valueOf(0);
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/ItemStackNbtPrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/ItemStackNbtPrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..0a80d73c714c22434d228ff2339ed51492e666de
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/ItemStackNbtPrimitive.java
@@ -0,0 +1,22 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import net.minecraft.nbt.CompoundTag;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.inventory.ItemStack;
+
+public class ItemStackNbtPrimitive extends NbtPrimitiveWrapper<ItemStack, CompoundTag> {
+
+    public ItemStackNbtPrimitive() {
+        super(new CompoundTagPrimitive());
+    }
+
+    @Override
+    public ItemStack fromPrimitive(CompoundTag primitive) {
+        return CraftItemStack.asCraftMirror(net.minecraft.world.item.ItemStack.of((CompoundTag) primitive));
+    }
+
+    @Override
+    public CompoundTag toPrimitive(ItemStack type) {
+        return (type instanceof CraftItemStack ? ((CraftItemStack) type).handle : CraftItemStack.asNMSCopy(type)).save(new CompoundTag());
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/KeyedRegistryPrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/KeyedRegistryPrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..6ba22dfca32d26a32838b3fa42c18b4e9d379204
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/KeyedRegistryPrimitive.java
@@ -0,0 +1,28 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import org.bukkit.NamespacedKey;
+
+import java.util.function.Function;
+
+public class KeyedRegistryPrimitive<T> extends NbtPrimitiveWrapper<T, NamespacedKey> {
+
+    private final Function<NamespacedKey, T> consumer;
+    private final Function<T, NamespacedKey> converter;
+
+    public KeyedRegistryPrimitive(Function<NamespacedKey, T> consumer, Function<T, NamespacedKey> converter) {
+        super(new NamespaceKeyNbtPrimitive());
+        this.consumer = consumer;
+        this.converter = converter;
+    }
+
+
+    @Override
+    public T fromPrimitive(NamespacedKey primitive) {
+        return this.consumer.apply(primitive);
+    }
+
+    @Override
+    public NamespacedKey toPrimitive(T type) {
+        return this.converter.apply(type);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/ListTagPrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/ListTagPrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..559e6cf587f4a18d062684bd9cd16b7b678c3bed
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/ListTagPrimitive.java
@@ -0,0 +1,28 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import net.minecraft.nbt.IntTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.Tag;
+
+public class ListTagPrimitive extends SinglePrimitiveNbtPlatformAdapter<ListTag> {
+
+    @Override
+    public int getTagType() {
+        return IntTag.TAG_LIST;
+    }
+
+    @Override
+    public ListTag getType(Tag tag) {
+        return (ListTag) tag;
+    }
+
+    @Override
+    public Tag write(ListTag type) {
+        return type;
+    }
+
+    @Override
+    public Tag emptyTag() {
+        return new ListTag();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/NamespaceKeyNbtPrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/NamespaceKeyNbtPrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..c1fe17fd099b09655c36ee1d42385764cfd38816
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/NamespaceKeyNbtPrimitive.java
@@ -0,0 +1,20 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import org.bukkit.NamespacedKey;
+
+public class NamespaceKeyNbtPrimitive extends NbtPrimitiveWrapper<NamespacedKey, String> {
+
+    public NamespaceKeyNbtPrimitive() {
+        super(new StringPrimitive());
+    }
+
+    @Override
+    public NamespacedKey fromPrimitive(String primitive) {
+        return NamespacedKey.fromString(primitive);
+    }
+
+    @Override
+    public String toPrimitive(NamespacedKey type) {
+        return type.toString();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/NbtPrimitiveWrapper.java b/src/main/java/io/papermc/paper/property/nbt/primitives/NbtPrimitiveWrapper.java
new file mode 100644
index 0000000000000000000000000000000000000000..e51c6f83e6312b564f21213af074b7a9d7211562
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/NbtPrimitiveWrapper.java
@@ -0,0 +1,38 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import io.papermc.paper.property.PropertyKey;
+import io.papermc.paper.property.nbt.NbtPropertyHolder;
+import net.minecraft.nbt.Tag;
+
+public abstract class NbtPrimitiveWrapper<T, P> extends SinglePrimitiveNbtPlatformAdapter<T> {
+
+    private final SinglePrimitiveNbtPlatformAdapter<P> primitive;
+
+    public NbtPrimitiveWrapper(SinglePrimitiveNbtPlatformAdapter<P> primitive) {
+        this.primitive = primitive;
+    }
+
+    @Override
+    public int getTagType() {
+        return this.primitive.getTagType();
+    }
+
+    @Override
+    public T getType(Tag tag) {
+        return this.fromPrimitive(this.primitive.getType(tag));
+    }
+
+    @Override
+    public Tag write(T type) {
+        return this.primitive.write(this.toPrimitive(type));
+    }
+
+    public abstract T fromPrimitive(P primitive);
+
+    public abstract P toPrimitive(T type);
+
+    @Override
+    public Tag emptyTag() {
+        return this.primitive.emptyTag();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/SinglePrimitiveNbtPlatformAdapter.java b/src/main/java/io/papermc/paper/property/nbt/primitives/SinglePrimitiveNbtPlatformAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..71c26e051f5ecf78ed64224b24d3155c656ff600
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/SinglePrimitiveNbtPlatformAdapter.java
@@ -0,0 +1,47 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import io.papermc.paper.property.PropertyKey;
+import io.papermc.paper.property.nbt.NbtPlatformAdapter;
+import io.papermc.paper.property.nbt.NbtPropertyHolder;
+import net.minecraft.nbt.Tag;
+
+public abstract class SinglePrimitiveNbtPlatformAdapter<T> implements NbtPlatformAdapter<T> {
+
+    @Override
+    public T getValue(NbtPropertyHolder holder, PropertyKey<T> propertyKey) {
+
+        // See get direct
+        Tag tag = holder.getCompoundTag().get(propertyKey.getKey());
+        if (tag != null && tag.getId() == SinglePrimitiveNbtPlatformAdapter.this.getTagType()) {
+            return SinglePrimitiveNbtPlatformAdapter.this.getType(tag);
+        }
+
+        return null;
+    }
+
+    @Override
+    public T getNewValue(NbtPropertyHolder holder, PropertyKey<T> propertyKey) {
+        holder.getCompoundTag().put(propertyKey.getKey(), this.emptyTag());
+        return this.getValue(holder, propertyKey);
+    }
+
+    public T getDirect(NbtPropertyHolder holder, PropertyKey<?> propertyKey) {
+        Tag tag = holder.getCompoundTag().get(propertyKey.getKey());
+        if (tag != null && tag.getId() == SinglePrimitiveNbtPlatformAdapter.this.getTagType()) {
+            return SinglePrimitiveNbtPlatformAdapter.this.getType(tag);
+        }
+
+        return null;
+    }
+
+    @Override
+    public void writeDirect(NbtPropertyHolder holder, PropertyKey<?> propertyKey, T direct) {
+        holder.getCompoundTag().put(propertyKey.getKey(), this.write(direct));
+    }
+
+    public abstract T getType(Tag tag);
+
+    public abstract Tag write(T type);
+
+    public abstract Tag emptyTag();
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/StringPrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/StringPrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..cc6250488bb63108f486ad7b32d946129ae8f80e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/StringPrimitive.java
@@ -0,0 +1,29 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import net.minecraft.nbt.IntTag;
+import net.minecraft.nbt.StringTag;
+import net.minecraft.nbt.Tag;
+
+public class StringPrimitive extends SinglePrimitiveNbtPlatformAdapter<String> {
+
+    @Override
+    public int getTagType() {
+        return IntTag.TAG_STRING;
+    }
+
+    @Override
+    public String getType(Tag tag) {
+        return ((StringTag) tag).getAsString();
+    }
+
+    @Override
+    public Tag write(String type) {
+        return StringTag.valueOf(type);
+    }
+
+    @Override
+    public Tag emptyTag() {
+        return StringTag.valueOf("");
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/AttributeMap.java b/src/main/java/io/papermc/paper/property/nbt/types/AttributeMap.java
new file mode 100644
index 0000000000000000000000000000000000000000..6021403c5a0e8b1f5dec5d503e92baf0597dc181
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/AttributeMap.java
@@ -0,0 +1,69 @@
+package io.papermc.paper.property.nbt.types;
+
+import io.papermc.paper.inventory.item.properties.AttributePair;
+import io.papermc.paper.property.PropertyKey;
+import io.papermc.paper.property.nbt.AdapterContext;
+import io.papermc.paper.property.nbt.NbtPropertyHolder;
+import io.papermc.paper.property.nbt.primitives.AbstractListNbtPlatformAdapter;
+import io.papermc.paper.property.nbt.primitives.StringPrimitive;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.resources.ResourceLocation;
+import org.bukkit.Registry;
+import org.bukkit.attribute.Attribute;
+import org.bukkit.attribute.AttributeModifier;
+import org.bukkit.craftbukkit.CraftEquipmentSlot;
+import org.bukkit.craftbukkit.attribute.CraftAttributeInstance;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+
+import java.util.Optional;
+
+public class AttributeMap extends AbstractListNbtPlatformAdapter<AttributePair> {
+
+    private static final PropertyKey<String> ATTRIBUTE_SLOT = PropertyKey.of("Slot", String.class);
+    private static final PropertyKey<String> ATTRIBUTE_NAME = PropertyKey.of("AttributeName", String.class);
+    private static final StringPrimitive PRIMITIVE = new StringPrimitive();
+
+    @Override
+    public AttributePair deserialize(Tag tag) {
+        CompoundTag compoundTag = (CompoundTag) tag;
+        NbtPropertyHolder holder = NbtPropertyHolder.simpleBlob(compoundTag, AdapterContext.of((context) -> {
+            context.register(ATTRIBUTE_NAME, new StringPrimitive());
+        }));
+
+        ResourceLocation attributeName = ResourceLocation.tryParse(PRIMITIVE.getDirect(holder, ATTRIBUTE_NAME));
+
+        Optional<net.minecraft.world.entity.ai.attributes.Attribute> optional = BuiltInRegistries.ATTRIBUTE.getOptional(attributeName);
+        if (optional.isPresent()) {
+            net.minecraft.world.entity.ai.attributes.AttributeModifier modifier = net.minecraft.world.entity.ai.attributes.AttributeModifier.load(compoundTag);
+            return new AttributePairImpl(Registry.ATTRIBUTE.get(CraftNamespacedKey.fromMinecraft(attributeName)), CraftAttributeInstance.convert(modifier));
+        }
+
+        return null;
+    }
+
+    @Override
+    public Tag serialize(AttributePair value) {
+        AttributeModifier attributeModifier = value.modifier();
+        net.minecraft.world.entity.ai.attributes.AttributeModifier nmsModifier = CraftAttributeInstance.convert(attributeModifier);
+
+        NbtPropertyHolder attributeHolder = NbtPropertyHolder.simpleBlob(nmsModifier.save(), AdapterContext.of((context) -> {
+            context.register(ATTRIBUTE_NAME, new StringPrimitive());
+            context.register(ATTRIBUTE_SLOT, new StringPrimitive());
+        }));
+
+        attributeHolder.set(ATTRIBUTE_NAME, attributeModifier.getName());
+        if (attributeModifier.getSlot() != null) {
+            attributeHolder.set(ATTRIBUTE_SLOT, CraftEquipmentSlot.getNMS(attributeModifier.getSlot()).name());
+        }
+
+        return attributeHolder.getCompoundTag();
+    }
+
+    record AttributePairImpl(Attribute attribute,
+                             AttributeModifier modifier) implements io.papermc.paper.inventory.item.properties.AttributePair {
+
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/AxolotlVariantNbt.java b/src/main/java/io/papermc/paper/property/nbt/types/AxolotlVariantNbt.java
new file mode 100644
index 0000000000000000000000000000000000000000..97bedb86cfaeb5cd1f0ea655b04c91a8ec4c0656
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/AxolotlVariantNbt.java
@@ -0,0 +1,22 @@
+package io.papermc.paper.property.nbt.types;
+
+import io.papermc.paper.property.nbt.primitives.IntegerPrimitive;
+import io.papermc.paper.property.nbt.primitives.NbtPrimitiveWrapper;
+import org.bukkit.entity.Axolotl;
+
+public class AxolotlVariantNbt extends NbtPrimitiveWrapper<Axolotl.Variant, Integer> {
+
+    public AxolotlVariantNbt() {
+        super(new IntegerPrimitive());
+    }
+
+    @Override
+    public Axolotl.Variant fromPrimitive(Integer primitive) {
+        return Axolotl.Variant.values()[primitive];
+    }
+
+    @Override
+    public Integer toPrimitive(Axolotl.Variant type) {
+        return type.ordinal();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/BlockStateConditionNamespaceHackNbt.java b/src/main/java/io/papermc/paper/property/nbt/types/BlockStateConditionNamespaceHackNbt.java
new file mode 100644
index 0000000000000000000000000000000000000000..f60e06b4749ae724ecea7cc6ab021e76d8becc57
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/BlockStateConditionNamespaceHackNbt.java
@@ -0,0 +1,57 @@
+package io.papermc.paper.property.nbt.types;
+
+import com.destroystokyo.paper.Namespaced;
+import com.destroystokyo.paper.NamespacedTag;
+import io.papermc.paper.property.nbt.primitives.NbtPrimitiveWrapper;
+import io.papermc.paper.property.nbt.primitives.StringPrimitive;
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+
+public class BlockStateConditionNamespaceHackNbt extends NbtPrimitiveWrapper<Namespaced, String> {
+
+    public BlockStateConditionNamespaceHackNbt() {
+        super(new StringPrimitive());
+    }
+
+    @Override
+    public Namespaced fromPrimitive(String raw) {
+        boolean isTag = raw.length() > 0 && raw.codePointAt(0) == '#';
+        com.mojang.datafixers.util.Either<net.minecraft.commands.arguments.blocks.BlockStateParser.BlockResult, net.minecraft.commands.arguments.blocks.BlockStateParser.TagResult> result;
+        try {
+            result = net.minecraft.commands.arguments.blocks.BlockStateParser.parseForTesting(net.minecraft.core.registries.BuiltInRegistries.BLOCK.asLookup(), raw, false);
+        } catch (com.mojang.brigadier.exceptions.CommandSyntaxException e) {
+            return null;
+        }
+
+        net.minecraft.resources.ResourceLocation key = null;
+        if (isTag && result.right().isPresent() && result.right().get().tag() instanceof net.minecraft.core.HolderSet.Named<net.minecraft.world.level.block.Block> namedSet) {
+            key = namedSet.key().location();
+        } else if (result.left().isPresent()) {
+            key = net.minecraft.core.registries.BuiltInRegistries.BLOCK.getKey(result.left().get().blockState().getBlock());
+        }
+
+        if (key == null) {
+            return null;
+        }
+
+        // don't DC the player if something slips through somehow
+        NamespacedKey resource = null;
+        try {
+            if (isTag) {
+                resource = new NamespacedKey(key.getNamespace(), key.getPath());
+            } else {
+                resource = CraftNamespacedKey.fromMinecraft(key);
+            }
+        } catch (IllegalArgumentException ex) {
+            org.bukkit.Bukkit.getLogger().warning("Namespaced resource does not validate: " + key.toString());
+            ex.printStackTrace();
+        }
+
+        return resource;
+    }
+
+    @Override
+    public String toPrimitive(Namespaced type) {
+        return type.toString();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/CompoundTagNbt.java b/src/main/java/io/papermc/paper/property/nbt/types/CompoundTagNbt.java
new file mode 100644
index 0000000000000000000000000000000000000000..e28cc24a74ea783da94bc8d4d65355cab6880d2c
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/CompoundTagNbt.java
@@ -0,0 +1,33 @@
+package io.papermc.paper.property.nbt.types;
+
+import io.papermc.paper.property.MutablePropertyView;
+import io.papermc.paper.property.nbt.AdapterContext;
+import io.papermc.paper.property.nbt.NbtPropertyHolder;
+import io.papermc.paper.property.nbt.primitives.CompoundTagPrimitive;
+import io.papermc.paper.property.nbt.primitives.NbtPrimitiveWrapper;
+import net.minecraft.nbt.CompoundTag;
+
+public class CompoundTagNbt extends NbtPrimitiveWrapper<MutablePropertyView, CompoundTag> {
+
+    private final AdapterContext context;
+
+    public CompoundTagNbt(AdapterContext context) {
+        super(new CompoundTagPrimitive());
+        this.context = context;
+    }
+
+    @Override
+    public MutablePropertyView fromPrimitive(CompoundTag primitive) {
+        NbtPropertyHolder wrappedholder = NbtPropertyHolder.simpleBlob(primitive, this.context);
+        return wrappedholder;
+    }
+
+    @Override
+    public CompoundTag toPrimitive(MutablePropertyView type) {
+        if (type instanceof NbtPropertyHolder nbtPropertyHolder) {
+            return nbtPropertyHolder.getCompoundTag().copy();
+        } else {
+            throw new UnsupportedOperationException(); // TODO ?
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/CustomEffectNbt.java b/src/main/java/io/papermc/paper/property/nbt/types/CustomEffectNbt.java
new file mode 100644
index 0000000000000000000000000000000000000000..41dd6817cfc7060cd9aeb76abc3438950488887f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/CustomEffectNbt.java
@@ -0,0 +1,27 @@
+package io.papermc.paper.property.nbt.types;
+
+import io.papermc.paper.property.nbt.primitives.CompoundTagPrimitive;
+import io.papermc.paper.property.nbt.primitives.NbtPrimitiveWrapper;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.world.effect.MobEffectInstance;
+import net.minecraft.world.item.alchemy.PotionUtils;
+import org.bukkit.craftbukkit.potion.CraftPotionUtil;
+import org.bukkit.potion.PotionData;
+import org.bukkit.potion.PotionEffect;
+
+public class CustomEffectNbt extends NbtPrimitiveWrapper<PotionEffect, CompoundTag> {
+
+    public CustomEffectNbt() {
+        super(new CompoundTagPrimitive());
+    }
+
+    @Override
+    public PotionEffect fromPrimitive(CompoundTag primitive) {
+        return CraftPotionUtil.toBukkit(MobEffectInstance.load(primitive));
+    }
+
+    @Override
+    public CompoundTag toPrimitive(PotionEffect type) {
+        return CraftPotionUtil.fromBukkit(type).save(new CompoundTag());
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/DyeColorNbt.java b/src/main/java/io/papermc/paper/property/nbt/types/DyeColorNbt.java
new file mode 100644
index 0000000000000000000000000000000000000000..a6eba8250dbfe31efddc1b6105007b7f192f084f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/DyeColorNbt.java
@@ -0,0 +1,23 @@
+package io.papermc.paper.property.nbt.types;
+
+import io.papermc.paper.property.nbt.primitives.IntegerPrimitive;
+import io.papermc.paper.property.nbt.primitives.NbtPrimitiveWrapper;
+import org.bukkit.DyeColor;
+import org.bukkit.entity.Axolotl;
+
+public class DyeColorNbt extends NbtPrimitiveWrapper<DyeColor, Integer> {
+
+    public DyeColorNbt() {
+        super(new IntegerPrimitive());
+    }
+
+    @Override
+    public DyeColor fromPrimitive(Integer primitive) {
+        return DyeColor.values()[primitive];
+    }
+
+    @Override
+    public Integer toPrimitive(DyeColor type) {
+        return type.ordinal();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/EnchantmentList.java b/src/main/java/io/papermc/paper/property/nbt/types/EnchantmentList.java
new file mode 100644
index 0000000000000000000000000000000000000000..deef80a97a326f4f13c15722f87deb186e8dc45e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/EnchantmentList.java
@@ -0,0 +1,29 @@
+package io.papermc.paper.property.nbt.types;
+
+import io.papermc.paper.inventory.item.properties.EnchantmentPair;
+import io.papermc.paper.property.nbt.primitives.AbstractListNbtPlatformAdapter;
+import io.papermc.paper.property.types.EnchantmentPairImpl;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.world.item.enchantment.EnchantmentHelper;
+import org.bukkit.craftbukkit.enchantments.CraftEnchantment;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.enchantments.Enchantment;
+
+public class EnchantmentList extends AbstractListNbtPlatformAdapter<EnchantmentPair> {
+
+    @Override
+    public EnchantmentPair deserialize(Tag tag) {
+        CompoundTag compoundTag = (CompoundTag) tag;
+        Enchantment enchantment = Enchantment.getByKey(CraftNamespacedKey.fromMinecraft(EnchantmentHelper.getEnchantmentId(compoundTag)));
+        int level = EnchantmentHelper.getEnchantmentLevel(compoundTag);
+
+        return new EnchantmentPairImpl(enchantment, level);
+    }
+
+    @Override
+    public Tag serialize(EnchantmentPair pair) {
+        return EnchantmentHelper.storeEnchantment(EnchantmentHelper.getEnchantmentId(CraftEnchantment.getRaw(pair.enchantment())), pair.level());
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/FireworkEffectNbt.java b/src/main/java/io/papermc/paper/property/nbt/types/FireworkEffectNbt.java
new file mode 100644
index 0000000000000000000000000000000000000000..30608c1bb7dafd8643838c0ef03f73e3a613e661
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/FireworkEffectNbt.java
@@ -0,0 +1,117 @@
+package io.papermc.paper.property.nbt.types;
+
+import io.papermc.paper.property.PropertyKey;
+import io.papermc.paper.property.nbt.AdapterContext;
+import io.papermc.paper.property.nbt.NbtPropertyHolder;
+import io.papermc.paper.property.nbt.primitives.BooleanPrimitive;
+import io.papermc.paper.property.nbt.primitives.BytePrimitive;
+import io.papermc.paper.property.nbt.primitives.CompoundTagPrimitive;
+import io.papermc.paper.property.nbt.primitives.IntArrayPrimitive;
+import io.papermc.paper.property.nbt.primitives.NbtPrimitiveWrapper;
+import net.minecraft.nbt.CompoundTag;
+import org.bukkit.Color;
+import org.bukkit.FireworkEffect;
+
+import java.util.List;
+
+public class FireworkEffectNbt extends NbtPrimitiveWrapper<FireworkEffect, CompoundTag> {
+
+    private static final PropertyKey<Boolean> TRIAL = PropertyKey.of("Trail", Boolean.class);
+    private static final PropertyKey<Boolean> FLICKER = PropertyKey.of("Flicker", Boolean.class);
+    private static final PropertyKey<Byte> TYPE = PropertyKey.of("Type", Byte.class);
+    private static final PropertyKey<int[]> COLORS = PropertyKey.of("Colors", int[].class);
+    private static final PropertyKey<int[]> FADE_COLORS = PropertyKey.of("FadeColors", int[].class);
+
+    private static final AdapterContext CONTEXT = AdapterContext.of((context) -> {
+        context.register(TRIAL, new BooleanPrimitive());
+        context.register(FLICKER, new BooleanPrimitive());
+        context.register(TYPE, new BytePrimitive());
+        context.register(COLORS, new IntArrayPrimitive());
+        context.register(FADE_COLORS, new IntArrayPrimitive());
+    });
+
+    public FireworkEffectNbt() {
+        super(new CompoundTagPrimitive());
+    }
+
+    @Override
+    public FireworkEffect fromPrimitive(CompoundTag primitive) {
+        NbtPropertyHolder holder = NbtPropertyHolder.simpleBlob((CompoundTag) primitive, CONTEXT);
+        FireworkEffect.Builder effect = FireworkEffect.builder()
+            .flicker(holder.get(FLICKER))
+            .trail(holder.get(TRIAL))
+            .with(getEffectType(0xff & holder.get(TYPE)));
+
+        int[] colors = holder.get(COLORS);
+        // People using buggy command generators specify a list rather than an int here, so recover with dummy data.
+        // Wrong: Colors: [1234]
+        // Right: Colors: [I;1234]
+        if (colors.length == 0) {
+            effect.withColor(Color.WHITE);
+        }
+
+        for (int color : colors) {
+            effect.withColor(Color.fromRGB(color));
+        }
+
+        for (int color : holder.get(FADE_COLORS)) {
+            effect.withFade(Color.fromRGB(color));
+        }
+
+        return effect.build();
+    }
+
+    @Override
+    public CompoundTag toPrimitive(FireworkEffect type) {
+        NbtPropertyHolder holder = NbtPropertyHolder.simpleBlob((CompoundTag) new CompoundTag(), CONTEXT);
+        if (type.hasFlicker()) {
+            holder.set(FLICKER, true);
+        }
+
+        if (type.hasTrail()) {
+            holder.set(TRIAL, true);
+        }
+
+        addColors(holder, COLORS, type.getColors());
+        addColors(holder, FADE_COLORS, type.getFadeColors());
+
+        holder.set(TYPE, (byte) getNBT(type.getType()));
+
+        return holder.getCompoundTag();
+    }
+
+    static void addColors(NbtPropertyHolder compound, PropertyKey<int[]> key, List<Color> colors) {
+        if (colors.isEmpty()) {
+            return;
+        }
+
+        final int[] colorArray = new int[colors.size()];
+        int i = 0;
+        for (Color color : colors) {
+            colorArray[i++] = color.asRGB();
+        }
+
+        compound.set(key, colorArray);
+    }
+
+    static FireworkEffect.Type getEffectType(int nbt) {
+        return switch (nbt) {
+            case 0 -> FireworkEffect.Type.BALL;
+            case 1 -> FireworkEffect.Type.BALL_LARGE;
+            case 2 -> FireworkEffect.Type.STAR;
+            case 3 -> FireworkEffect.Type.CREEPER;
+            case 4 -> FireworkEffect.Type.BURST;
+            default -> throw new IllegalArgumentException("Unknown effect type " + nbt);
+        };
+    }
+
+    public static int getNBT(FireworkEffect.Type type) {
+        return switch (type) {
+            case BALL -> 0;
+            case BALL_LARGE -> 1;
+            case STAR -> 2;
+            case CREEPER -> 3;
+            case BURST -> 4;
+        };
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/GameProfileNbt.java b/src/main/java/io/papermc/paper/property/nbt/types/GameProfileNbt.java
new file mode 100644
index 0000000000000000000000000000000000000000..f4b7b0dbfa13aabde5ba75cad31a70de793d3b7a
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/GameProfileNbt.java
@@ -0,0 +1,27 @@
+package io.papermc.paper.property.nbt.types;
+
+import com.destroystokyo.paper.profile.CraftPlayerProfile;
+import com.destroystokyo.paper.profile.PlayerProfile;
+import io.papermc.paper.property.nbt.primitives.CompoundTagPrimitive;
+import io.papermc.paper.property.nbt.primitives.NbtPrimitiveWrapper;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.NbtUtils;
+
+public class GameProfileNbt extends NbtPrimitiveWrapper<PlayerProfile, CompoundTag> {
+
+    public GameProfileNbt() {
+        super(new CompoundTagPrimitive());
+    }
+
+    @Override
+    public PlayerProfile fromPrimitive(CompoundTag primitive) {
+        return new CraftPlayerProfile(NbtUtils.readGameProfile(primitive));
+    }
+
+    @Override
+    public CompoundTag toPrimitive(PlayerProfile type) {
+        CompoundTag profile = new CompoundTag();
+        NbtUtils.writeGameProfile(profile, ((CraftPlayerProfile) type).getGameProfile());
+        return profile;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/ItemFlagBitset.java b/src/main/java/io/papermc/paper/property/nbt/types/ItemFlagBitset.java
new file mode 100644
index 0000000000000000000000000000000000000000..c8755cec158d9d315db07cc4f99a570668a07d1a
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/ItemFlagBitset.java
@@ -0,0 +1,74 @@
+package io.papermc.paper.property.nbt.types;
+
+import io.papermc.paper.property.PropertyKey;
+import io.papermc.paper.property.nbt.NbtPlatformAdapter;
+import io.papermc.paper.property.nbt.NbtPropertyHolder;
+import io.papermc.paper.property.nbt.primitives.IntegerPrimitive;
+import net.minecraft.nbt.Tag;
+import org.bukkit.inventory.ItemFlag;
+
+import java.util.HashSet;
+import java.util.Set;
+
+public class ItemFlagBitset implements NbtPlatformAdapter<Set<ItemFlag>> {
+
+    private final IntegerPrimitive backing = new IntegerPrimitive();
+
+    @Override
+    public Set<ItemFlag> getValue(NbtPropertyHolder nbtPropertyHolder, PropertyKey<Set<ItemFlag>> propertyKey) {
+        // TODO: Lazy
+        Set<ItemFlag> flag = new HashSet<>() {
+
+            @Override
+            public boolean add(ItemFlag itemFlag) {
+                boolean add = super.add(itemFlag);
+                if (add) {
+                    ItemFlagBitset.this.writeDirect(nbtPropertyHolder, propertyKey, this);
+                }
+                return add;
+            }
+
+            @Override
+            public boolean remove(Object o) {
+                boolean remove = super.remove(o);
+                if (remove) {
+                    ItemFlagBitset.this.writeDirect(nbtPropertyHolder, propertyKey, this);
+                }
+                return remove;
+            }
+        };
+
+        return flag;
+    }
+
+    @Override
+    public void writeDirect(NbtPropertyHolder nbtPropertyHolder, PropertyKey<?> propertyKey, Set<ItemFlag> direct) {
+        int flags = 0;
+        for (ItemFlag itemFlag : direct) {
+            flags |= this.getBitModifier(itemFlag);
+        }
+
+        nbtPropertyHolder.getCompoundTag().put(propertyKey.getKey(), this.backing.write(flags));
+    }
+
+    @Override
+    public Set<ItemFlag> getNewValue(NbtPropertyHolder nbtPropertyHolder, PropertyKey<Set<ItemFlag>> propertyKey) {
+        nbtPropertyHolder.getCompoundTag().put(propertyKey.getKey(), this.backing.emptyTag());
+        return this.getValue(nbtPropertyHolder, propertyKey);
+    }
+
+    @Override
+    public int getTagType() {
+        return Tag.TAG_INT;
+    }
+
+    private boolean contains(ItemFlag itemFlag, int flags) {
+        int bitModifier = ItemFlagBitset.this.getBitModifier(itemFlag);
+        return (flags & bitModifier) == bitModifier;
+    }
+
+    private byte getBitModifier(ItemFlag hideFlag) {
+        return (byte) (1 << hideFlag.ordinal());
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/PotionDataNbt.java b/src/main/java/io/papermc/paper/property/nbt/types/PotionDataNbt.java
new file mode 100644
index 0000000000000000000000000000000000000000..f408fef9d8494615af3385e468de81ca17247277
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/PotionDataNbt.java
@@ -0,0 +1,23 @@
+package io.papermc.paper.property.nbt.types;
+
+import io.papermc.paper.property.nbt.primitives.NbtPrimitiveWrapper;
+import io.papermc.paper.property.nbt.primitives.StringPrimitive;
+import org.bukkit.craftbukkit.potion.CraftPotionUtil;
+import org.bukkit.potion.PotionData;
+
+public class PotionDataNbt extends NbtPrimitiveWrapper<PotionData, String> {
+
+    public PotionDataNbt() {
+        super(new StringPrimitive());
+    }
+
+    @Override
+    public PotionData fromPrimitive(String primitive) {
+        return CraftPotionUtil.toBukkit(primitive);
+    }
+
+    @Override
+    public String toPrimitive(PotionData type) {
+        return CraftPotionUtil.fromBukkit(type);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/StewEffectsListNbt.java b/src/main/java/io/papermc/paper/property/nbt/types/StewEffectsListNbt.java
new file mode 100644
index 0000000000000000000000000000000000000000..456171ebbfc5cd829bb3658503fd2db2fa2f0017
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/StewEffectsListNbt.java
@@ -0,0 +1,54 @@
+package io.papermc.paper.property.nbt.types;
+
+import io.papermc.paper.inventory.item.properties.StewEffect;
+import io.papermc.paper.property.PropertyKey;
+import io.papermc.paper.property.nbt.AdapterContext;
+import io.papermc.paper.property.nbt.NbtPropertyHolder;
+import io.papermc.paper.property.nbt.primitives.AbstractListNbtPlatformAdapter;
+import io.papermc.paper.property.nbt.primitives.IntegerPrimitive;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.world.effect.MobEffect;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.potion.PotionEffectType;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+public class StewEffectsListNbt extends AbstractListNbtPlatformAdapter<StewEffect> {
+
+    private static final PropertyKey<Integer> EFFECT = PropertyKey.of("EffectId", Integer.class);
+    private static final PropertyKey<Integer> EFFECT_DURATION = PropertyKey.of("EffectDuration", Integer.class);
+
+    private static final AdapterContext CONTEXT = AdapterContext.of((context) -> {
+        context.register(EFFECT, new IntegerPrimitive());
+        context.register(EFFECT_DURATION, new IntegerPrimitive());
+    });
+
+    private static final IntegerPrimitive PRIMITIVE = new IntegerPrimitive();
+
+    @Override
+    public StewEffect deserialize(Tag tag) {
+        NbtPropertyHolder attributeHolder = NbtPropertyHolder.simpleBlob((CompoundTag) tag, CONTEXT);
+
+        int duration = attributeHolder.get(EFFECT_DURATION);
+        MobEffect mobEffect = MobEffect.byId(attributeHolder.get(EFFECT));
+        PotionEffectType type = PotionEffectType.getByKey(CraftNamespacedKey.fromMinecraft(BuiltInRegistries.MOB_EFFECT.getKey(mobEffect)));
+
+        return new StewEffectImpl(type, duration);
+    }
+
+    @Override
+    public Tag serialize(StewEffect type) {
+        NbtPropertyHolder attributeHolder = NbtPropertyHolder.simpleBlob(new CompoundTag(), CONTEXT);
+
+        PRIMITIVE.writeDirect(attributeHolder, EFFECT, BuiltInRegistries.MOB_EFFECT.getId(BuiltInRegistries.MOB_EFFECT.get(CraftNamespacedKey.toMinecraft(type.effect().getKey()))));
+        PRIMITIVE.writeDirect(attributeHolder, EFFECT_DURATION, type.duration());
+
+        return attributeHolder.getCompoundTag();
+    }
+
+    @ApiStatus.Experimental
+    public static record StewEffectImpl(@NotNull PotionEffectType effect, int duration) implements StewEffect {
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/TropicalFishVariantNbt.java b/src/main/java/io/papermc/paper/property/nbt/types/TropicalFishVariantNbt.java
new file mode 100644
index 0000000000000000000000000000000000000000..6259ae3521780e9436b32e63b008d2dd4536e5cb
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/TropicalFishVariantNbt.java
@@ -0,0 +1,32 @@
+package io.papermc.paper.property.nbt.types;
+
+import io.papermc.paper.inventory.item.properties.TropicalFishVariant;
+import io.papermc.paper.property.nbt.primitives.IntegerPrimitive;
+import io.papermc.paper.property.nbt.primitives.NbtPrimitiveWrapper;
+import org.bukkit.DyeColor;
+import org.bukkit.craftbukkit.entity.CraftTropicalFish;
+import org.bukkit.entity.TropicalFish;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+public class TropicalFishVariantNbt extends NbtPrimitiveWrapper<TropicalFishVariant, Integer> {
+
+    public TropicalFishVariantNbt() {
+        super(new IntegerPrimitive());
+    }
+
+    @Override
+    public TropicalFishVariant fromPrimitive(Integer primitive) {
+        return new TropicalFishVariantImpl(CraftTropicalFish.getPatternColor(primitive), CraftTropicalFish.getBodyColor(primitive), CraftTropicalFish.getPattern(primitive));
+    }
+
+    @Override
+    public Integer toPrimitive(TropicalFishVariant type) {
+        return CraftTropicalFish.getData(type.patternColor(), type.bodyColor(), type.type());
+    }
+
+    @ApiStatus.Experimental
+    public static record TropicalFishVariantImpl(@NotNull DyeColor patternColor, @NotNull DyeColor bodyColor,
+                                                 @NotNull TropicalFish.Pattern type) implements io.papermc.paper.inventory.item.properties.TropicalFishVariant {
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/WrappedListNbt.java b/src/main/java/io/papermc/paper/property/nbt/types/WrappedListNbt.java
new file mode 100644
index 0000000000000000000000000000000000000000..040db9232b2e61ded96b6112a64ed84340ad7281
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/WrappedListNbt.java
@@ -0,0 +1,29 @@
+package io.papermc.paper.property.nbt.types;
+
+import io.papermc.paper.property.nbt.primitives.AbstractListNbtPlatformAdapter;
+import io.papermc.paper.property.nbt.primitives.SinglePrimitiveNbtPlatformAdapter;
+import net.minecraft.nbt.Tag;
+
+public class WrappedListNbt<T> extends AbstractListNbtPlatformAdapter<T> {
+
+    private final SinglePrimitiveNbtPlatformAdapter<T> wrapper;
+
+    public WrappedListNbt(SinglePrimitiveNbtPlatformAdapter<T> wrapper) {
+        this.wrapper = wrapper;
+    }
+
+    @Override
+    public T deserialize(Tag tag) {
+        return this.wrapper.getType(tag);
+    }
+
+    @Override
+    public Tag serialize(T value) {
+        return this.wrapper.write(value);
+    }
+
+    @Override
+    public int getTagType() {
+        return Tag.TAG_LIST;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/types/EnchantmentPairImpl.java b/src/main/java/io/papermc/paper/property/types/EnchantmentPairImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..7810eb42379ca0baeb42f617c06a4e2002635a59
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/types/EnchantmentPairImpl.java
@@ -0,0 +1,7 @@
+package io.papermc.paper.property.types;
+
+import org.bukkit.enchantments.Enchantment;
+import org.jetbrains.annotations.NotNull;
+
+public record EnchantmentPairImpl(@NotNull Enchantment enchantment, int level) implements io.papermc.paper.inventory.item.properties.EnchantmentPair {
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockStates.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockStates.java
index 9215297d5f7856ef3f03ebcbf866c5b59048ba30..850c7d42e18e440617c726bb11160fb1f2f4c816 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockStates.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockStates.java
@@ -109,7 +109,7 @@ public final class CraftBlockStates {
         }
     }
 
-    private static final Map<Material, BlockStateFactory<?>> FACTORIES = new HashMap<>();
+    public static final Map<Material, BlockStateFactory<?>> FACTORIES = new HashMap<>(); // Paper
     private static final BlockStateFactory<?> DEFAULT_FACTORY = new BlockStateFactory<CraftBlockState>(CraftBlockState.class) {
         @Override
         public CraftBlockState createBlockState(World world, BlockPos blockPosition, net.minecraft.world.level.block.state.BlockState blockData, BlockEntity tileEntity) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
index 83bbfe1ffd0dc8e168064225a02abcaa49df60ed..aa10abfd1d424863db8a8aac6debb34539325fcb 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
@@ -3,7 +3,6 @@ package org.bukkit.craftbukkit.inventory;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import net.minecraft.commands.arguments.item.ItemParser;
-import net.minecraft.core.HolderLookup;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.world.item.Item;
@@ -12,6 +11,7 @@ import org.bukkit.Color;
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.bukkit.craftbukkit.util.CraftLegacy;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.ItemFactory;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
@@ -42,11 +42,11 @@ public final class CraftItemFactory implements ItemFactory {
         if (type == null || meta == null) {
             return false;
         }
-        if (!(meta instanceof CraftMetaItem)) {
+        if (!(meta instanceof io.papermc.paper.item.meta.PaperMeta paperMeta)) { // Paper
             throw new IllegalArgumentException("Meta of " + meta.getClass().toString() + " not created by " + CraftItemFactory.class.getName());
         }
 
-        return ((CraftMetaItem) meta).applicableTo(type);
+        return meta.getClass().isAssignableFrom(CraftItemStack.getItemMeta(paperMeta.getPropertyHolder(), type).getClass()); // Paper
     }
 
     @Override
@@ -57,6 +57,16 @@ public final class CraftItemFactory implements ItemFactory {
 
     private ItemMeta getItemMeta(Material material, CraftMetaItem meta) {
         material = CraftLegacy.fromLegacy(material); // This may be called from legacy item stacks, try to get the right material
+        // Paper start
+        net.minecraft.world.item.ItemStack itemStack = new net.minecraft.world.item.ItemStack(CraftMagicNumbers.getItem(material));
+        if (meta != null) {
+            meta.applyToItem(itemStack.getOrCreateTag());
+        }
+        return CraftItemStack.getItemMeta(itemStack, material);
+    }
+    public ItemMeta getOldItemMeta(Material material, CraftMetaItem meta) {
+    // Paper end
+
         switch (material) {
         case AIR:
             return null;
@@ -341,23 +351,22 @@ public final class CraftItemFactory implements ItemFactory {
         if (meta1 == meta2) {
             return true;
         }
-        if (meta1 != null && !(meta1 instanceof CraftMetaItem)) {
+        if (meta1 != null && !(meta1 instanceof io.papermc.paper.item.meta.PaperMeta)) { // Paper
             throw new IllegalArgumentException("First meta of " + meta1.getClass().getName() + " does not belong to " + CraftItemFactory.class.getName());
         }
-        if (meta2 != null && !(meta2 instanceof CraftMetaItem)) {
+        if (meta2 != null && !(meta2 instanceof io.papermc.paper.item.meta.PaperMeta)) { // Paper
             throw new IllegalArgumentException("Second meta " + meta2.getClass().getName() + " does not belong to " + CraftItemFactory.class.getName());
         }
         if (meta1 == null) {
-            return ((CraftMetaItem) meta2).isEmpty();
+            return ((io.papermc.paper.item.meta.PaperMeta) meta2).isEmpty(); // Paper
         }
         if (meta2 == null) {
-            return ((CraftMetaItem) meta1).isEmpty();
+            return ((io.papermc.paper.item.meta.PaperMeta) meta1).isEmpty(); // Paper
         }
-
-        return this.equals((CraftMetaItem) meta1, (CraftMetaItem) meta2);
+        return this.equals((io.papermc.paper.item.meta.PaperMeta) meta1, (io.papermc.paper.item.meta.PaperMeta) meta2); // Paper
     }
 
-    boolean equals(CraftMetaItem meta1, CraftMetaItem meta2) {
+    boolean equals(io.papermc.paper.item.meta.PaperMeta meta1, io.papermc.paper.item.meta.PaperMeta meta2) { // Paper
         /*
          * This couldn't be done inside of the objects themselves, else force recursion.
          * This is a fairly clean way of implementing it, by dividing the methods into purposes and letting each method perform its own function.
@@ -383,10 +392,14 @@ public final class CraftItemFactory implements ItemFactory {
     @Override
     public ItemMeta asMetaFor(ItemMeta meta, Material material) {
         Validate.notNull(material, "Material cannot be null");
-        if (!(meta instanceof CraftMetaItem)) {
+        if (!(meta instanceof io.papermc.paper.item.meta.PaperMeta paperMeta)) { // Paper
             throw new IllegalArgumentException("Meta of " + (meta != null ? meta.getClass().toString() : "null") + " not created by " + CraftItemFactory.class.getName());
         }
-        return this.getItemMeta(material, (CraftMetaItem) meta);
+        // Paper start
+        io.papermc.paper.property.MutablePropertyView holder = paperMeta.getPropertyHolder().clone();
+        paperMeta.migrateFrom(holder);
+        return CraftItemStack.getItemMeta(holder, material);
+        // Paper end
     }
 
     @Override
@@ -415,7 +428,7 @@ public final class CraftItemFactory implements ItemFactory {
 
     @Override
     public Material updateMaterial(ItemMeta meta, Material material) throws IllegalArgumentException {
-        return ((CraftMetaItem) meta).updateMaterial(material);
+        return material; // Paper - not needed on modern
     }
 
     // Paper start
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
index f45e4acee69bd95ff2e41feaf44f5414d2e40df0..881d79b9d4f7749d89a3af2b4fd5c47fac11853f 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
@@ -287,6 +287,13 @@ public final class CraftItemStack extends ItemStack {
         return getItemMeta(item, CraftItemStack.getType(item));
     }
     public static ItemMeta getItemMeta(net.minecraft.world.item.ItemStack item, Material material) {
+        return getItemMeta(io.papermc.paper.property.nbt.NbtPropertyHolder.itemHolder(item.getOrCreateTag()), material);
+    }
+    public static ItemMeta getItemMeta(io.papermc.paper.property.MutablePropertyView propertyHolder, Material material) {
+        return io.papermc.paper.item.PaperMetaRegistry.getItemMeta(propertyHolder, material);
+    }
+    public static ItemMeta getItemMetaOld(net.minecraft.world.item.ItemStack item) {
+        Material material = CraftItemStack.getType(item);
         // Paper end
         if (!CraftItemStack.hasItemMeta(item)) {
             return CraftItemFactory.instance().getItemMeta(material); // Paper
@@ -598,11 +605,7 @@ public final class CraftItemStack extends ItemStack {
             item.setItem(newItem);
         }
 
-        CompoundTag tag = new CompoundTag();
-        item.setTag(tag);
-
-        ((CraftMetaItem) itemMeta).applyToItem(tag);
-        item.convertStack(((CraftMetaItem) itemMeta).getVersion());
+        item.setTag(((io.papermc.paper.property.nbt.NbtPropertyHolder) ((io.papermc.paper.item.meta.PaperMeta) itemMeta).getPropertyHolder()).getCompoundTag()); // Paper
         // SpigotCraft#463 this is required now by the Vanilla client, so mimic ItemStack constructor in ensuring it
         if (item.getItem() != null && item.getItem().canBeDepleted()) {
             item.setDamageValue(item.getDamageValue());
@@ -639,7 +642,7 @@ public final class CraftItemStack extends ItemStack {
 
     @Override
     public boolean hasItemMeta() {
-        return CraftItemStack.hasItemMeta(this.handle) && (this.handle.getDamageValue() != 0 || (this.handle.getTag() != null && this.handle.getTag().tags.size() >= (this.handle.getTag().contains(CraftMetaItem.DAMAGE.NBT) ? 2 : 1))); // Paper - keep 1.12 CraftBukkit behavior without calling getItemMeta
+        return !CraftItemFactory.instance().equals(getItemMeta(), null); // Paper - ignore the item stack tag state
     }
 
     static boolean hasItemMeta(net.minecraft.world.item.ItemStack item) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 7a4acbb32fbd600e629d0ec2e90868785320d822..88fca536e88e270ae63f8fd25a4d3a234b381c2c 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -40,6 +40,8 @@ import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
+
+import io.papermc.paper.item.PaperMetaSerialization;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.NbtIo;
@@ -112,7 +114,7 @@ import java.util.Collections;
  * <li> SerializableMeta.Deserializers deserializer()
  */
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
-class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
+public class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta { // Paper
 
     static class ItemMetaKey {
 
@@ -193,7 +195,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
 
             String type = SerializableMeta.getString(map, SerializableMeta.TYPE_FIELD, false);
             Constructor<? extends CraftMetaItem> constructor = SerializableMeta.constructorMap.get(type);
-
+            if (true) return io.papermc.paper.item.PaperMetaSerialization.deserialize(type, constructor, map); // Paper
             if (constructor == null) {
                 throw new IllegalArgumentException(type + " is not a valid " + SerializableMeta.TYPE_FIELD);
             }
@@ -684,6 +686,11 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         }
         return result;
     }
+    // Paper
+    public void apply(CompoundTag compoundTag) {
+        applyToItem(compoundTag);
+    }
+    // Paper end
 
     @Overridden
     void applyToItem(CompoundTag itemTag) {
@@ -1407,6 +1414,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
 
     @Override
     public final Map<String, Object> serialize() {
+        if (true) return PaperMetaSerialization.serialize(this); // Paper
         ImmutableMap.Builder<String, Object> map = ImmutableMap.builder();
         map.put(SerializableMeta.TYPE_FIELD, SerializableMeta.classMap.get(getClass()));
         this.serialize(map);
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 64c50c52c11214740de7903e5592b8b6b2c170b3..4a682f62c9f6083f8520decbfc98db121d90ee4b 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -54,7 +54,6 @@ import org.bukkit.block.data.BlockData;
 import org.bukkit.craftbukkit.CraftEquipmentSlot;
 import org.bukkit.craftbukkit.attribute.CraftAttributeInstance;
 import org.bukkit.craftbukkit.attribute.CraftAttributeMap;
-import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.legacy.CraftLegacy;
@@ -616,6 +615,21 @@ public final class CraftMagicNumbers implements UnsafeValues {
         net.minecraft.core.Holder<net.minecraft.world.level.biome.Biome> biomeBase = cra.getHandle().registryAccess().registryOrThrow(net.minecraft.core.registries.Registries.BIOME).getHolderOrThrow(net.minecraft.resources.ResourceKey.create(net.minecraft.core.registries.Registries.BIOME, org.bukkit.craftbukkit.util.CraftNamespacedKey.toMinecraft(biomeKey)));
         cra.setBiome(x, y, z, biomeBase);
     }
+
+    @Override
+    public io.papermc.paper.property.MutablePropertyView getPropertyHolder(ItemStack itemStack) {
+        if (itemStack instanceof org.bukkit.craftbukkit.inventory.CraftItemStack craftItemStack) {
+            return io.papermc.paper.property.nbt.NbtPropertyHolder.itemHolder(craftItemStack.handle.getOrCreateTag());
+        }
+
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public ItemStack newItem(Material material, int count) {
+        return CraftItemStack.asCraftCopy(new ItemStack(material, count));
+    }
+
     // Paper end
 
     /**
diff --git a/src/test/java/io/papermc/paper/inventory/CraftMetaTropicalFishBucketTest.java b/src/test/java/io/papermc/paper/inventory/CraftMetaTropicalFishBucketTest.java
index 2e7f8ef88ae74c7cbfdb7f397951cbc8479a995f..7cb9014eb7049c900c56b0f77a4b9fc55ae08265 100644
--- a/src/test/java/io/papermc/paper/inventory/CraftMetaTropicalFishBucketTest.java
+++ b/src/test/java/io/papermc/paper/inventory/CraftMetaTropicalFishBucketTest.java
@@ -7,6 +7,7 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.TropicalFishBucketMeta;
 import org.bukkit.support.AbstractTestingBase;
 import org.junit.Assert;
+import org.junit.Before;
 import org.junit.Test;
 
 public class CraftMetaTropicalFishBucketTest extends AbstractTestingBase {
diff --git a/src/test/java/io/papermc/paper/item/MetaComparisonTest.java b/src/test/java/io/papermc/paper/item/MetaComparisonTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..74e4c8651dabb339e32785691220a4ad30b53a6f
--- /dev/null
+++ b/src/test/java/io/papermc/paper/item/MetaComparisonTest.java
@@ -0,0 +1,67 @@
+package io.papermc.paper.item;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.enchantments.Enchantment;
+import org.bukkit.inventory.meta.ItemMeta;
+import org.bukkit.inventory.meta.PotionMeta;
+import org.bukkit.inventory.meta.SkullMeta;
+import org.bukkit.potion.PotionEffect;
+import org.bukkit.potion.PotionEffectType;
+import org.bukkit.util.Consumer;
+import org.junit.Assert;
+import org.junit.Test;
+
+public class MetaComparisonTest {
+
+    @Test
+    public void testPotionMeta() {
+        PotionEffect potionEffect = new PotionEffect(PotionEffectType.SPEED, 10, 10, false);
+        ItemStack nmsItemStack = new ItemStack(Items.POTION, 1);
+
+        testSetAndGet(nmsItemStack,
+            (meta) -> ((PotionMeta) meta).addCustomEffect(potionEffect, true),
+            (meta) -> Assert.assertEquals(potionEffect, ((PotionMeta) meta).getCustomEffects().get(0))
+        );
+    }
+
+    @Test
+    public void testEnchantment() {
+        ItemStack nmsItemStack = new ItemStack(Items.STICK, 1);
+
+        testSetAndGet(nmsItemStack,
+            (meta) -> Assert.assertTrue(meta.addEnchant(Enchantment.DAMAGE_ALL, 1, true)),
+            (meta) -> Assert.assertEquals(1, meta.getEnchantLevel(Enchantment.DAMAGE_ALL))
+        );
+    }
+
+
+    @Test
+    public void testPlayerHead() {
+        PlayerProfile profile = Bukkit.createProfile("Owen1212055");
+        ItemStack nmsItemStack = new ItemStack(Items.PLAYER_HEAD, 1);
+
+        testSetAndGet(nmsItemStack,
+            (meta) -> ((SkullMeta) meta).setPlayerProfile(profile),
+            (meta) -> Assert.assertEquals(profile, ((SkullMeta) meta).getPlayerProfile())
+        );
+    }
+
+    private void testSetAndGet(ItemStack nmsItemStack,
+                               Consumer<ItemMeta> set,
+                               Consumer<ItemMeta> get) {
+        ItemMeta craftMeta = CraftItemStack.getItemMetaOld(nmsItemStack);
+        ItemMeta paperMeta = CraftItemStack.getItemMeta(nmsItemStack);
+        // Test craft meta
+        set.accept(craftMeta);
+        get.accept(craftMeta);
+
+        // Test paper meta
+        set.accept(paperMeta);
+        get.accept(paperMeta);
+    }
+
+}
diff --git a/src/test/java/io/papermc/paper/item/MetaSerializationTest.java b/src/test/java/io/papermc/paper/item/MetaSerializationTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..5a5acb6979b269e0d4560a6fffa216aafa52ac83
--- /dev/null
+++ b/src/test/java/io/papermc/paper/item/MetaSerializationTest.java
@@ -0,0 +1,23 @@
+package io.papermc.paper.item;
+
+import org.bukkit.Color;
+import org.bukkit.Material;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.LeatherArmorMeta;
+import org.junit.Assert;
+import org.junit.Test;
+
+public class MetaSerializationTest {
+
+    @Test
+    public void testModernPaperSerialization() {
+        ItemStack itemStack = new ItemStack(Material.LEATHER_CHESTPLATE);
+        itemStack.editMeta(LeatherArmorMeta.class, (meta) -> {
+            meta.setColor(Color.BLUE);
+        });
+
+        ItemStack deserialized = ItemStack.deserialize(itemStack.serialize());
+        LeatherArmorMeta armorMeta = (LeatherArmorMeta) deserialized.getItemMeta();
+        Assert.assertEquals(armorMeta.getColor(), Color.BLUE);
+    }
+}
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/DeprecatedItemMetaCustomValueTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/DeprecatedItemMetaCustomValueTest.java
index 13025119b32388f3e50503a355ef7d03837fd232..6f4cf8a326f8b5e1cedcf4a55fdbf3dfe009a45a 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/DeprecatedItemMetaCustomValueTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/DeprecatedItemMetaCustomValueTest.java
@@ -90,19 +90,20 @@ public class DeprecatedItemMetaCustomValueTest extends AbstractTestingBase {
     /*
         Removing a tag
      */
-    @Test
-    public void testNBTTagStoring() {
-        CraftMetaItem itemMeta = this.createComplexItemMeta();
-
-        CompoundTag compound = new CompoundTag();
-        itemMeta.applyToItem(compound);
-
-        assertEquals(itemMeta, new CraftMetaItem(compound));
-    }
+    // Paper - Remove test
+//    @Test
+//    public void testNBTTagStoring() {
+//        CraftMetaItem itemMeta = this.createComplexItemMeta();
+//
+//        CompoundTag compound = new CompoundTag();
+//        itemMeta.applyToItem(compound);
+//
+//        assertEquals(itemMeta, new CraftMetaItem(compound));
+//    }
 
     @Test
     public void testMapStoring() {
-        CraftMetaItem itemMeta = this.createComplexItemMeta();
+        ItemMeta itemMeta = this.createComplexItemMeta(); // Paper
 
         Map<String, Object> serialize = itemMeta.serialize();
         assertEquals(itemMeta, new CraftMetaItem(serialize));
@@ -111,7 +112,7 @@ public class DeprecatedItemMetaCustomValueTest extends AbstractTestingBase {
     @Test
     public void testYAMLStoring() {
         ItemStack stack = new ItemStack(Material.DIAMOND);
-        CraftMetaItem meta = this.createComplexItemMeta();
+        ItemMeta meta = this.createComplexItemMeta(); // Paper
         stack.setItemMeta(meta);
 
         YamlConfiguration configuration = new YamlConfiguration();
@@ -127,7 +128,7 @@ public class DeprecatedItemMetaCustomValueTest extends AbstractTestingBase {
     @Test
     public void testCorrectType() {
         ItemStack stack = new ItemStack(Material.DIAMOND);
-        CraftMetaItem meta = this.createComplexItemMeta();
+        ItemMeta meta = this.createComplexItemMeta(); // Paper
 
         meta.getCustomTagContainer().setCustomTag(this.requestKey("int"), ItemTagType.STRING, "1");
         meta.getCustomTagContainer().setCustomTag(this.requestKey("double"), ItemTagType.STRING, "1.33");
@@ -147,9 +148,10 @@ public class DeprecatedItemMetaCustomValueTest extends AbstractTestingBase {
         assertEquals(newStack.getItemMeta().getCustomTagContainer().getCustomTag(this.requestKey("double"), ItemTagType.STRING), "1.33");
     }
 
-    private CraftMetaItem createComplexItemMeta() {
-        CraftMetaItem itemMeta = (CraftMetaItem) this.createNewItemMeta();
-        itemMeta.unhandledTags.put("unhandled-test", StringTag.valueOf("test"));
+    // Paper start
+    private ItemMeta createComplexItemMeta() {
+        ItemMeta itemMeta = (ItemMeta) this.createNewItemMeta();
+    // Paper end
         itemMeta.setDisplayName("Item Display Name");
 
         itemMeta.getCustomTagContainer().setCustomTag(this.requestKey("custom-long"), ItemTagType.LONG, 4L); //Add random primitive values
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java
index e706d547c03f3e07d56fdc7327fadd98f98ccc20..27f95b289538f05c55eb35ce725b467b3682bfb7 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java
@@ -4,6 +4,8 @@ import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.logging.Logger;
+
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemFactory;
 import org.bukkit.inventory.ItemStack;
@@ -67,22 +69,20 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
 
     @Test
     public void generalCase() {
-        CraftMetaItem meta = (CraftMetaItem) FactoryItemMaterialTest.factory.getItemMeta(material);
+        ItemMeta meta = FactoryItemMaterialTest.factory.getItemMeta(material); // Paper
         if (meta == null) {
             assertThat(this.material, is(Material.AIR));
         } else {
             assertTrue(FactoryItemMaterialTest.factory.isApplicable(meta, material));
-            assertTrue(meta.applicableTo(material));
 
             meta = meta.clone();
             assertTrue(FactoryItemMaterialTest.factory.isApplicable(meta, material));
-            assertTrue(meta.applicableTo(material));
         }
     }
 
     @Test
     public void asMetaFor() {
-        final CraftMetaItem baseMeta = (CraftMetaItem) FactoryItemMaterialTest.factory.getItemMeta(material);
+        final ItemMeta baseMeta = FactoryItemMaterialTest.factory.getItemMeta(material);
         if (baseMeta == null) {
             assertThat(this.material, is(Material.AIR));
             return;
@@ -91,7 +91,7 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
         for (Material other : FactoryItemMaterialTest.materials) {
             final ItemStack bukkitStack = new ItemStack(other);
             final CraftItemStack craftStack = CraftItemStack.asCraftCopy(bukkitStack);
-            final CraftMetaItem otherMeta = (CraftMetaItem) FactoryItemMaterialTest.factory.asMetaFor(baseMeta, other);
+            final ItemMeta otherMeta = FactoryItemMaterialTest.factory.asMetaFor(baseMeta, other);
 
             final String testName = FactoryItemMaterialTest.name(this.material, other);
 
@@ -103,7 +103,6 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
             assertTrue(testName, FactoryItemMaterialTest.factory.isApplicable(otherMeta, craftStack));
             assertTrue(testName, FactoryItemMaterialTest.factory.isApplicable(otherMeta, bukkitStack));
             assertTrue(testName, FactoryItemMaterialTest.factory.isApplicable(otherMeta, other));
-            assertTrue(testName, otherMeta.applicableTo(other));
         }
     }
 
@@ -112,8 +111,8 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
         if (this.material == Material.AIR) {
             return;
         }
-        final CraftMetaItem baseMeta = (CraftMetaItem) FactoryItemMaterialTest.factory.getItemMeta(material);
-        final CraftMetaItem baseMetaClone = baseMeta.clone();
+        final ItemMeta baseMeta = FactoryItemMaterialTest.factory.getItemMeta(material); // Paper
+        final ItemMeta baseMetaClone = baseMeta.clone(); // Paper
 
         final ItemStack baseMetaStack = new ItemStack(this.material);
         baseMetaStack.setItemMeta(baseMeta);
@@ -134,7 +133,7 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
         for (Material other : FactoryItemMaterialTest.materials) {
             final String testName = FactoryItemMaterialTest.name(this.material, other);
 
-            final CraftMetaItem otherMeta = (CraftMetaItem) FactoryItemMaterialTest.factory.asMetaFor(baseMetaClone, other);
+            final ItemMeta otherMeta = FactoryItemMaterialTest.factory.asMetaFor(baseMetaClone, other); // Paper
 
             if (otherMeta == null) {
                 assertThat(testName, other, is(Material.AIR));
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaImplementationOverrideTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaImplementationOverrideTest.java
index 2cab00db9881b69714f1c250348b622c8092ab8f..ed68f6d4f415a0b26f56c8e29dd0cba5b0c60b69 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaImplementationOverrideTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaImplementationOverrideTest.java
@@ -17,15 +17,15 @@ import org.junit.runners.Parameterized.Parameters;
 
 @RunWith(Parameterized.class)
 public class ItemMetaImplementationOverrideTest {
-    static final Class<CraftMetaItem> parent = CraftMetaItem.class;
+    static final Class<io.papermc.paper.item.meta.PaperMeta> parent = io.papermc.paper.item.meta.PaperMeta.class; // Paper
 
     @Parameters(name = "[{index}]:{1}")
     public static List<Object[]> data() {
         final List<Object[]> testData = new ArrayList<Object[]>();
-        List<Class<? extends CraftMetaItem>> classes = new ArrayList<Class<? extends CraftMetaItem>>();
+        List<Class<? extends io.papermc.paper.item.meta.PaperMeta>> classes = new ArrayList<Class<? extends io.papermc.paper.item.meta.PaperMeta>>(); // Paper
 
         for (Material material : ItemStackTest.COMPOUND_MATERIALS) {
-            Class<? extends CraftMetaItem> clazz = CraftItemFactory.instance().getItemMeta(material).getClass().asSubclass(parent);
+            Class<? extends io.papermc.paper.item.meta.PaperMeta> clazz = CraftItemFactory.instance().getItemMeta(material).getClass().asSubclass(parent); // Paper
             if (clazz != ItemMetaImplementationOverrideTest.parent) {
                 classes.add(clazz);
             }
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
index bc5427e6e7221245330723c290dd15abf45ffdda..14aeadd27ef12d920beaf15fcf2f0b91a0015da6 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
@@ -220,11 +220,11 @@ public class ItemMetaTest extends AbstractTestingBase {
         for (Item item : BuiltInRegistries.ITEM) {
             if (item instanceof net.minecraft.world.item.SpawnEggItem) {
                 Material material = CraftMagicNumbers.getMaterial(item);
-                CraftMetaItem baseMeta = (CraftMetaItem) Bukkit.getItemFactory().getItemMeta(material);
+                // Paper - remove API item builder
                 ItemMeta baseMetaItem = CraftItemStack.getItemMeta(item.getDefaultInstance());
 
-                assertTrue(material + " is not handled in CraftItemFactory", baseMeta instanceof CraftMetaSpawnEgg);
-                assertTrue(material + " is not applicable to CraftMetaSpawnEgg", baseMeta.applicableTo(material));
+                // Paper - remove craft meta spawn egg check
+                // Paper - remove isApplicable check
                 assertTrue(material + " is not handled in CraftItemStack", baseMetaItem instanceof SpawnEggMeta);
             }
         }
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/PersistentDataContainerTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/PersistentDataContainerTest.java
index 9e84a0bddd7dc168d62be05675e73bfd49000125..83f54c822d0cbbb94deea659bed9795722edddd8 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/PersistentDataContainerTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/PersistentDataContainerTest.java
@@ -89,19 +89,20 @@ public class PersistentDataContainerTest extends AbstractTestingBase {
     /*
         Removing a tag
      */
-    @Test
-    public void testNBTTagStoring() {
-        CraftMetaItem itemMeta = this.createComplexItemMeta();
-
-        CompoundTag compound = new CompoundTag();
-        itemMeta.applyToItem(compound);
-
-        assertEquals(itemMeta, new CraftMetaItem(compound));
-    }
+    // Paper - Remove test
+//    @Test
+//    public void testNBTTagStoring() {
+//        ItemMeta itemMeta = this.createComplexItemMeta(); /// Paper
+//
+//        CompoundTag compound = new CompoundTag();
+//        itemMeta.applyToItem(compound);
+//
+//        assertEquals(itemMeta, new CraftMetaItem(compound));
+//    }
 
     @Test
     public void testMapStoring() {
-        CraftMetaItem itemMeta = this.createComplexItemMeta();
+        ItemMeta itemMeta = this.createComplexItemMeta(); // Paper
 
         Map<String, Object> serialize = itemMeta.serialize();
         assertEquals(itemMeta, new CraftMetaItem(serialize));
@@ -110,7 +111,7 @@ public class PersistentDataContainerTest extends AbstractTestingBase {
     @Test
     public void testYAMLStoring() {
         ItemStack stack = new ItemStack(Material.DIAMOND);
-        CraftMetaItem meta = this.createComplexItemMeta();
+        ItemMeta meta = this.createComplexItemMeta(); // Paper
         stack.setItemMeta(meta);
 
         YamlConfiguration configuration = new YamlConfiguration();
@@ -126,7 +127,7 @@ public class PersistentDataContainerTest extends AbstractTestingBase {
     @Test
     public void testCorrectType() {
         ItemStack stack = new ItemStack(Material.DIAMOND);
-        CraftMetaItem meta = this.createComplexItemMeta();
+        ItemMeta meta = this.createComplexItemMeta(); // Paper
 
         meta.getPersistentDataContainer().set(this.requestKey("int"), PersistentDataType.STRING, "1");
         meta.getPersistentDataContainer().set(this.requestKey("double"), PersistentDataType.STRING, "1.33");
@@ -146,8 +147,10 @@ public class PersistentDataContainerTest extends AbstractTestingBase {
         assertEquals(newStack.getItemMeta().getPersistentDataContainer().get(this.requestKey("double"), PersistentDataType.STRING), "1.33");
     }
 
-    private CraftMetaItem createComplexItemMeta() {
-        CraftMetaItem itemMeta = (CraftMetaItem) this.createNewItemMeta();
+    // Paper start
+    private ItemMeta createComplexItemMeta() {
+        ItemMeta itemMeta = (ItemMeta) this.createNewItemMeta();
+    // Paper end
         itemMeta.setDisplayName("Item Display Name");
 
         itemMeta.getPersistentDataContainer().set(this.requestKey("custom-long"), PersistentDataType.LONG, 4L); //Add random primitive values
