From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: egg82 <eggys82@gmail.com>
Date: Thu, 7 Jan 2021 22:34:27 -0700
Subject: [PATCH] Add Zstd/LZ4 support for region files

Zstd using zstd-jni: https://github.com/luben/zstd-jni
LZ4 using lz4-java: https://github.com/lz4/lz4-java

Added new command-line option, --forceWrite, which will forcibly write the chunk/flush to disk regardless of whether or not the chunk has actually changed in a --forceUpgrade.
New compression only happens when a chunk is saved, so running a --forceUpgrade AND --forceWrite may be desirable.

New (hidden) config option for the compression method to use.
There's a new option in PaperConfig (compression level) for Zstd which defaults to 6.
There's a new option in PaperConfig (compression level) for Zlib which defaults to 5.
Added a getter to the API to retrieve the current chunk compression method being used.

Since the patch hooks Mojang's versioning system for new compression methods, it
should be internally consistent, easily-updatable, and reversible with a --forceUpgrade AND a --forceWrite.

This will likely conflict with plugins and programs expecting region files to be compressed using the current standard.

diff --git a/src/main/java/io/papermc/paper/region/RegionCompressionType.java b/src/main/java/io/papermc/paper/region/RegionCompressionType.java
new file mode 100644
index 0000000000000000000000000000000000000000..a33b117f9db36dd3a22e4792af2fc4d7b50739cf
--- /dev/null
+++ b/src/main/java/io/papermc/paper/region/RegionCompressionType.java
@@ -0,0 +1,46 @@
+package io.papermc.paper.region;
+
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public enum RegionCompressionType {
+    GZIP(1, "gzip"),
+    ZLIB(2, "zlib"),
+    NONE(3, "none"),
+    LZ4(30, "lz4"),
+    ZSTD(31, "zstd");
+
+    private final int type;
+    private final String name;
+    RegionCompressionType(int type, @NotNull String name) {
+        this.type = type;
+        this.name = name;
+    }
+
+    public int getType() { return type; }
+
+    @NotNull
+    public String getName() { return name; }
+
+    @Nullable
+    public static RegionCompressionType getFromName(String name) {
+        for (RegionCompressionType value : values()) {
+            if (value.name.equalsIgnoreCase(name)) {
+                return value;
+            }
+        }
+        return null;
+    }
+
+    @Nullable
+    public static RegionCompressionType getFromType(int type) {
+        for (RegionCompressionType value : values()) {
+            if (value.type == type) {
+                return value;
+            }
+        }
+        return null;
+    }
+
+    public String toString() { return name; }
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index fecd7b14d317f55eb1ce7b5c6af9913917971427..6a45caaadd304137fc6597b5601186c1f6c5ac4e 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -1813,6 +1813,18 @@ public final class Bukkit {
     }
     // Paper end
 
+    // Paper start - API for compression settings
+    /**
+     * Returns the current region compression type
+     *
+     * @return the current region compression type
+     */
+    @NotNull
+    public static io.papermc.paper.region.RegionCompressionType getRegionCompressionType() {
+        return server.getRegionCompressionType();
+    }
+    // Paper end
+
     @NotNull
     public static Server.Spigot spigot() {
         return server.spigot();
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 8e01e1bbb7cfd98b47dbdb3a0e132dafd1413de6..a0f139671c8474c94228fb84be52be42cb39acc1 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -1582,4 +1582,14 @@ public interface Server extends PluginMessageRecipient {
     @NotNull
     com.destroystokyo.paper.entity.ai.MobGoals getMobGoals();
     // Paper end
+
+    // Paper start - API for compression settings
+    /**
+     * Returns the current region compression type
+     *
+     * @return the current region compression type
+     */
+    @NotNull
+    io.papermc.paper.region.RegionCompressionType getRegionCompressionType();
+    // Paper end
 }
