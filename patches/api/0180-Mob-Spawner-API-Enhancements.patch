From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: William Blake Galbreath <blake.galbreath@gmail.com>
Date: Fri, 19 Apr 2019 12:41:19 -0500
Subject: [PATCH] Mob Spawner API Enhancements


diff --git a/src/main/java/io/papermc/paper/spawner/SpawnerHolder.java b/src/main/java/io/papermc/paper/spawner/SpawnerHolder.java
new file mode 100644
index 0000000000000000000000000000000000000000..776f46835a57f2a253784dd080fba9c42a2af01f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/spawner/SpawnerHolder.java
@@ -0,0 +1,212 @@
+package io.papermc.paper.spawner;
+
+import org.bukkit.Material;
+import org.bukkit.block.CreatureSpawner;
+import org.bukkit.entity.EntityType;
+import org.bukkit.entity.minecart.SpawnerMinecart;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Represents something that spawns entities when a player is nearby,
+ * for example a {@link CreatureSpawner}
+ *
+ * @see CreatureSpawner
+ * @see SpawnerMinecart
+ */
+public interface SpawnerHolder {
+    /**
+     * Get the spawner's creature type.
+     *
+     * @return The creature type.
+     */
+    @NotNull EntityType getSpawnedType();
+
+    /**
+     * Set the spawner's creature type.
+     *
+     * @param creatureType The creature type.
+     */
+    void setSpawnedType(@NotNull EntityType creatureType);
+
+    /**
+     * Get the spawner's delay.
+     * <br>
+     * This is the delay, in ticks, until the spawner will spawn its next mob.
+     *
+     * @return The delay.
+     */
+    int getDelay();
+
+    /**
+     * Set the spawner's delay.
+     * <br>
+     * If set to -1, the spawn delay will be reset to a random value between
+     * {@link #getMinSpawnDelay} and {@link #getMaxSpawnDelay()}.
+     *
+     * @param delay The delay.
+     */
+    void setDelay(int delay);
+
+    /**
+     * The minimum spawn delay amount (in ticks).
+     * <br>
+     * This value is used when the spawner resets its delay (for any reason).
+     * It will choose a random number between {@link #getMinSpawnDelay()}
+     * and {@link #getMaxSpawnDelay()} for its next {@link #getDelay()}.
+     *
+     * Default value is 200 ticks.
+     *
+     * @return the minimum spawn delay amount
+     */
+    int getMinSpawnDelay();
+
+    /**
+     * Set the minimum spawn delay amount (in ticks).
+     *
+     * @param delay the minimum spawn delay amount
+     * @see #getMinSpawnDelay()
+     */
+    void setMinSpawnDelay(int delay);
+
+    /**
+     * The maximum spawn delay amount (in ticks).
+     * <br>
+     * This value is used when the spawner resets its delay (for any reason).
+     * It will choose a random number between {@link #getMinSpawnDelay()}
+     * and {@link #getMaxSpawnDelay()} for its next {@link #getDelay()}.
+     * <br>
+     * This value <b>must</b> be greater than 0 and less than or equal to
+     * {@link #getMaxSpawnDelay()}.
+     *
+     * Default value is 800 ticks.
+     *
+     * @return the maximum spawn delay amount
+     */
+    int getMaxSpawnDelay();
+
+    /**
+     * Set the maximum spawn delay amount (in ticks).
+     * <br>
+     * This value <b>must</b> be greater than 0, as well as greater than or
+     * equal to {@link #getMinSpawnDelay()}
+     *
+     * @param delay the new maximum spawn delay amount
+     * @see #getMaxSpawnDelay()
+     */
+    void setMaxSpawnDelay(int delay);
+
+    /**
+     * Get how many mobs attempt to spawn.
+     * <br>
+     * Default value is 4.
+     *
+     * @return the current spawn count
+     */
+    int getSpawnCount();
+
+    /**
+     * Set how many mobs attempt to spawn.
+     *
+     * @param spawnCount the new spawn count
+     */
+    void setSpawnCount(int spawnCount);
+
+    /**
+     * Set the new maximum amount of similar entities that are allowed to be
+     * within spawning range of this spawner.
+     * <br>
+     * If more than the maximum number of entities are within range, the spawner
+     * will not spawn and try again with a new {@link #getDelay()}.
+     * <br>
+     * Default value is 16.
+     *
+     * @return the maximum number of nearby, similar, entities
+     */
+    int getMaxNearbyEntities();
+
+    /**
+     * Set the maximum number of similar entities that are allowed to be within
+     * spawning range of this spawner.
+     * <br>
+     * Similar entities are entities that are of the same {@link EntityType}
+     *
+     * @param maxNearbyEntities the maximum number of nearby, similar, entities
+     */
+    void setMaxNearbyEntities(int maxNearbyEntities);
+
+    /**
+     * Get the maximum distance(squared) a player can be in order for this
+     * spawner to be active.
+     * <br>
+     * If this value is less than or equal to 0, this spawner is always active
+     * (given that there are players online).
+     * <br>
+     * Default value is 16.
+     *
+     * @return the maximum distance(squared) a player can be in order for this
+     * spawner to be active.
+     */
+    int getRequiredPlayerRange();
+
+    /**
+     * Set the maximum distance (squared) a player can be in order for this
+     * spawner to be active.
+     * <br>
+     * Setting this value to less than or equal to 0 will make this spawner
+     * always active (given that there are players online).
+     *
+     * @param requiredPlayerRange the maximum distance (squared) a player can be
+     * in order for this spawner to be active.
+     */
+    void setRequiredPlayerRange(int requiredPlayerRange);
+
+    /**
+     * Get the radius around which the spawner will attempt to spawn mobs in.
+     * <br>
+     * This area is square, includes the block the spawner is in, and is
+     * centered on the spawner's x,z coordinates - not the spawner itself.
+     * <br>
+     * It is 2 blocks high, centered on the spawner's y-coordinate (its bottom);
+     * thus allowing mobs to spawn as high as its top surface and as low
+     * as 1 block below its bottom surface.
+     * <br>
+     * Default value is 4.
+     *
+     * @return the spawn range
+     */
+    int getSpawnRange();
+
+    /**
+     * Set the new spawn range.
+     * <br>
+     *
+     * @param spawnRange the new spawn range
+     * @see #getSpawnRange()
+     */
+    void setSpawnRange(int spawnRange);
+
+    /**
+     * Check if spawner is activated (a player is close enough)
+     *
+     * @return True if a player is close enough to activate it
+     */
+    boolean isActivated();
+
+    /**
+     * Resets the spawn delay timer within the min/max range
+     */
+    void resetTimer();
+
+    /**
+     * Sets the {@link EntityType} to {@link EntityType#DROPPED_ITEM} and sets the data to the given
+     * {@link ItemStack ItemStack}.
+     * <p>
+     * {@link #setSpawnCount(int)} does not dictate the amount of items in the stack spawned, but rather how many
+     * stacks should be spawned.
+     *
+     * @param itemStack The item to spawn. Must not {@link Material#isAir be air}.
+     * @see #setSpawnedType(EntityType)
+     */
+    void setSpawnedItem(@NotNull ItemStack itemStack);
+}
diff --git a/src/main/java/org/bukkit/block/CreatureSpawner.java b/src/main/java/org/bukkit/block/CreatureSpawner.java
index cb447a4ad5a9dce7c98999a5d7fcd6111fc9b10e..95adcb3483f8be6571d7f487815fcf9c370b2872 100644
--- a/src/main/java/org/bukkit/block/CreatureSpawner.java
+++ b/src/main/java/org/bukkit/block/CreatureSpawner.java
@@ -6,7 +6,7 @@ import org.jetbrains.annotations.NotNull;
 /**
  * Represents a captured state of a creature spawner.
  */
-public interface CreatureSpawner extends TileState {
+public interface CreatureSpawner extends TileState, io.papermc.paper.spawner.SpawnerHolder { // Paper
 
     /**
      * Get the spawner's creature type.
diff --git a/src/main/java/org/bukkit/entity/minecart/SpawnerMinecart.java b/src/main/java/org/bukkit/entity/minecart/SpawnerMinecart.java
index 0ce3592ec7b121413bb2203f3d6056e450b89736..eb88104e187c9f492b07c7f2d7b1ab207ddb83e3 100644
--- a/src/main/java/org/bukkit/entity/minecart/SpawnerMinecart.java
+++ b/src/main/java/org/bukkit/entity/minecart/SpawnerMinecart.java
@@ -6,5 +6,5 @@ import org.bukkit.entity.Minecart;
  * Represents a Minecart with an {@link org.bukkit.block.CreatureSpawner
  * entity spawner} inside it.
  */
-public interface SpawnerMinecart extends Minecart {
+public interface SpawnerMinecart extends Minecart, io.papermc.paper.spawner.SpawnerHolder { // Paper
 }
