From ea7009d9515821c9c26616af4c2c272cd329f8db Mon Sep 17 00:00:00 2001
From: BrodyBeckwith <brody@beckwith.dev>
Date: Mon, 28 Oct 2019 19:21:31 -0400
Subject: [PATCH] Allow chunks to use the persistent data API


diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
index 98cc4efc..0bfbd73a 100644
--- a/src/main/java/net/minecraft/server/ChunkRegionLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -168,6 +168,7 @@ public class ChunkRegionLoader {
             }
 
             object = new Chunk(worldserver.getMinecraftWorld(), chunkcoordintpair, abiomebase, chunkconverter, (TickList) object1, (TickList) object2, l, achunksection, (chunk) -> {
+                ((org.bukkit.craftbukkit.CraftChunk) chunk.getBukkitChunk()).readBukkitValues(nbttagcompound1); // Paper - Read persistent data from NBT
                 loadEntities(nbttagcompound1, chunk);
             });
         } else {
@@ -467,6 +468,8 @@ public class ChunkRegionLoader {
                 }
             }
 
+            ((org.bukkit.craftbukkit.CraftChunk) chunk.getBukkitChunk()).storeBukkitValues(nbttagcompound1); // Paper - Save persistent data to NBT
+
             // Paper start - move entities to the correct chunk
             for (Entity entity : toUpdate) {
                 worldserver.entityJoinedWorld(entity);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index 373bea4b..3623e9d1 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -40,6 +40,11 @@ public class CraftChunk implements Chunk {
     private static final DataPaletteBlock<IBlockData> emptyBlockIDs = new ChunkSection(0).getBlocks();
     private static final byte[] emptyLight = new byte[2048];
 
+    // Paper start - Container and registry for persistent data
+    private static final org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry();
+    private final org.bukkit.craftbukkit.persistence.CraftPersistentDataContainer persistentDataContainer = new org.bukkit.craftbukkit.persistence.CraftPersistentDataContainer(DATA_TYPE_REGISTRY);
+    // Paper end
+
     public CraftChunk(net.minecraft.server.Chunk chunk) {
         this.weakChunk = new WeakReference<net.minecraft.server.Chunk>(chunk);
 
@@ -357,6 +362,26 @@ public class CraftChunk implements Chunk {
         return new CraftChunkSnapshot(x, z, world.getName(), world.getFullTime(), blockIDs, skyLight, emitLight, empty, new HeightMap(null, HeightMap.Type.MOTION_BLOCKING), biome, biomeTemp);
     }
 
+    // Paper start
+    @Override
+    public org.bukkit.persistence.PersistentDataContainer getPersistentDataContainer() {
+        return this.persistentDataContainer;
+    }
+
+    public void storeBukkitValues(NBTTagCompound nbtTagCompound) {
+        if (!this.persistentDataContainer.isEmpty()) {
+            nbtTagCompound.set("PublicBukkitValues", this.persistentDataContainer.toTagCompound());
+        }
+    }
+
+    public void readBukkitValues(NBTTagCompound nbtTagCompound) {
+        NBTTagCompound base = nbtTagCompound.getCompound("PublicBukkitValues");
+        if (base != null) {
+            this.persistentDataContainer.putAll(base);
+        }
+    }
+    // Paper end
+
     private static float[] getTemperatures(WorldChunkManager chunkmanager, int chunkX, int chunkZ) {
         BiomeBase[] biomes = chunkmanager.getBiomeBlock(chunkX, chunkZ, 16, 16);
         float[] temps = new float[biomes.length];
-- 
2.20.1.windows.1

