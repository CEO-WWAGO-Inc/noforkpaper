From 155fa285997114a8f9cabcd624db8fc70ebf5ecd Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sat, 1 Sep 2018 12:20:09 -0400
Subject: [PATCH] Async Chunk Loading and Generation

This brings back parity to 1.12 and older versions in that any
chunk requested as part of the PlayerChunkMap can be loaded
asynchronously, since the chunk isn't needed "immediately".

The previous system used by CraftBukkit has been completely abandoned, as
mojang has put more concurrency checks into the process.

The new process is no longer lock free, but tries to maintain locks as
short as possible.

But with 1.13, we now have Chunk Conversions too. A main issue about
keeping just loading parity to 1.12 is that standard loads now
are treated as generation level events, to run the converter on
another thread.

However mojangs code was pretty bad here and doesn't actually provide
any concurrency...

Mojangs code is still not thread safe, and can only operate on
one world per thread safely, but this is still a major improvement
to get world generation off of the main thread for exploration.

This change brings Chunk Requests triggered by the Chunk Map to be
lazily loaded asynchronously.

Standard chunk loads can load in parallel across a shared executor.

However, chunk conversions and generations must only run one per world
at a time, so we have a single thread executor for those operations
per world, that all of those requests get scheduled to.

getChunkAt method is now thread safe, but has not been tested in
use by other threads for generations, but should be safe to do.

However, we are not encouraging plugins to go getting chunks async,
as while looking the chunk up may be safe, absolutely nothing about
reading or writing to the chunk will be safe, so plugins still
should not be touching chunks asynchronously!

diff --git a/src/main/java/com/destroystokyo/paper/util/PriorityQueuedExecutor.java b/src/main/java/com/destroystokyo/paper/util/PriorityQueuedExecutor.java
new file mode 100644
index 0000000000..31192074f8
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/util/PriorityQueuedExecutor.java
@@ -0,0 +1,253 @@
+package com.destroystokyo.paper.util;
+
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import net.minecraft.server.NamedIncrementingThreadFactory;
+
+import javax.annotation.Nonnull;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.AbstractExecutorService;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.RejectedExecutionException;
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.TimeUnit;
+import java.util.function.Supplier;
+
+/**
+ * Implements an Executor Service that allows specifying Task Priority
+ * and bumping task priority.
+ *
+ * @author aikar
+ */
+@SuppressWarnings({"WeakerAccess", "UnusedReturnValue", "unused"})
+public class PriorityQueuedExecutor extends AbstractExecutorService {
+    private final ConcurrentLinkedQueue<Runnable> high = new ConcurrentLinkedQueue<>();
+    private final ConcurrentLinkedQueue<Runnable> normal = new ConcurrentLinkedQueue<>();
+    private final RejectionHandler handler;
+    private volatile boolean shuttingDown = false;
+    private volatile boolean shuttingDownNow = false;
+    private final List<Thread> threads = new ArrayList<>();
+
+    public PriorityQueuedExecutor(String name) {
+        this(name, Runtime.getRuntime().availableProcessors(), null);
+    }
+
+    public PriorityQueuedExecutor(String name, int threads) {
+        this(name, threads, null);
+    }
+
+    public PriorityQueuedExecutor(String name, int threads, RejectionHandler handler) {
+        ThreadFactory factory = new ThreadFactoryBuilder()
+            .setThreadFactory(new NamedIncrementingThreadFactory(name))
+            .setDaemon(true)
+            .build();
+        for (int i = 0; i < threads; i++) {
+            final Thread thread = factory.newThread(this::processQueues);
+            thread.start();
+            this.threads.add(thread);
+        }
+        if (handler == null) {
+            handler = ABORT_POLICY;
+        }
+        this.handler = handler;
+    }
+
+    public void shutdown() {
+        shuttingDown = true;
+        synchronized (this) {
+            this.notifyAll();
+        }
+    }
+
+    @Nonnull
+    @Override
+    public List<Runnable> shutdownNow() {
+        shuttingDown = true;
+        shuttingDownNow = true;
+        List<Runnable> tasks = new ArrayList<>(high.size() + normal.size());
+        Runnable run;
+        while ((run = getTask()) != null) {
+            tasks.add(run);
+        }
+
+        return tasks;
+    }
+
+    @Override
+    public boolean isShutdown() {
+        return shuttingDown;
+    }
+
+    @Override
+    public boolean isTerminated() {
+        if (!shuttingDown) {
+            return false;
+        }
+        return high.isEmpty() && normal.isEmpty();
+    }
+
+    @Override
+    public boolean awaitTermination(long timeout, @Nonnull TimeUnit unit) {
+        synchronized (this) {
+            this.notifyAll();
+        }
+        final long wait = unit.toNanos(timeout);
+        final long max = System.nanoTime() + wait;
+        for (;!threads.isEmpty() && System.nanoTime() < max;) {
+            threads.removeIf(thread -> !thread.isAlive());
+        }
+        return isTerminated();
+    }
+
+    public PendingTask<Void> submitTask(Runnable run) {
+        return submitTask(run, Priority.NORMAL);
+    }
+
+    public PendingTask<Void> submitTask(Runnable run, Priority priority) {
+        PendingTask<Void> pendingTask = new PendingTask<>(priority, () -> {
+            run.run();
+            return null;
+        });
+        addQueuedTask(pendingTask);
+        return pendingTask;
+    }
+
+
+    public <T> PendingTask<T> submitTask(Supplier<T> run) {
+        return submitTask(run, Priority.NORMAL);
+    }
+
+    public <T> PendingTask<T> submitTask(Supplier<T> run, Priority priority) {
+        PendingTask<T> pendingTask = new PendingTask<>(priority, run);
+        addQueuedTask(pendingTask);
+        return pendingTask;
+    }
+
+    private void addQueuedTask(PendingTask task) {
+        if (shuttingDown) {
+            handler.onRejection(task, this);
+            return;
+        }
+
+        synchronized (this) {
+            if (task.priority == Priority.HIGH) {
+                high.add(task);
+            } else {
+                normal.add(task);
+            }
+            this.notify();
+        }
+    }
+
+    @Override
+    public void execute(@Nonnull Runnable command) {
+        submitTask(command);
+    }
+
+    private Runnable getTask() {
+        Runnable run = high.poll();
+        if (run != null) {
+            return run;
+        }
+        return normal.poll();
+    }
+
+    private void processQueues() {
+        Runnable run = null;
+        while (true) {
+            if (run != null) {
+                run.run();
+            }
+            if (shuttingDownNow) {
+                return;
+            }
+            if ((run = getTask()) != null) {
+                continue;
+            }
+            synchronized (PriorityQueuedExecutor.this) {
+                if ((run = getTask()) != null) {
+                    continue;
+                }
+
+                if (shuttingDown || shuttingDownNow) {
+                    return;
+                }
+                try {
+                    PriorityQueuedExecutor.this.wait(30000);
+                } catch (InterruptedException ignored) {}
+            }
+        }
+    }
+
+    @SuppressWarnings("BooleanMethodIsAlwaysInverted")
+    private boolean processQueue(ConcurrentLinkedQueue<Runnable> queue) {
+        boolean ran = false;
+        Runnable runnable;
+        while ((runnable = queue.poll()) != null) {
+            runnable.run();
+            ran = true;
+        }
+        return ran;
+    }
+
+
+    public enum Priority {
+        HIGH, NORMAL
+    }
+
+    public class PendingTask <T> implements Runnable {
+        private final Object runLock = new Object();
+        private final Object priorityLock = new Object();
+        private Priority priority;
+        private final Supplier<T> run;
+        private volatile boolean hasRan;
+        private final CompletableFuture<T> future = new CompletableFuture<>();
+
+        public PendingTask(Priority priority, Supplier<T> run) {
+            this.priority = priority;
+            this.run = run;
+        }
+
+        @Override
+        public void run() {
+            synchronized (runLock) {
+                if (hasRan) {
+                    return;
+                }
+                hasRan = true;
+            }
+
+            try {
+                future.complete(run.get());
+            } catch (Throwable e) {
+                future.completeExceptionally(e);
+            }
+        }
+
+        public void bumpPriority() {
+            synchronized (priorityLock) {
+                if (priority == Priority.HIGH) {
+                    return;
+                }
+                priority = Priority.HIGH;
+            }
+            addQueuedTask(this);
+        }
+
+        public CompletableFuture<T> onDone() {
+            return future;
+        }
+    }
+    public interface RejectionHandler {
+        void onRejection(Runnable run, PriorityQueuedExecutor executor);
+    }
+
+    public static final RejectionHandler ABORT_POLICY = (run, executor) -> {
+        throw new RejectedExecutionException("Executor has been shutdown");
+    };
+    public static final RejectionHandler CALLER_RUNS_POLICY = (run, executor) -> {
+        run.run();
+    };
+
+}
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index c0ec896eea..37b33d57f7 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -41,9 +41,9 @@ public class ChunkProviderServer implements IChunkProvider {
     public final Long2ObjectMap<Chunk> chunks = Long2ObjectMaps.synchronize(new ChunkMap(8192));
     private Chunk lastChunk;
     private final ChunkTaskScheduler chunkScheduler;
-    private final SchedulerBatch<ChunkCoordIntPair, ChunkStatus, ProtoChunk> batchScheduler;
+    final SchedulerBatch<ChunkCoordIntPair, ChunkStatus, ProtoChunk> batchScheduler; // Paper
     public final WorldServer world;
-    private final IAsyncTaskHandler asyncTaskHandler;
+    final IAsyncTaskHandler asyncTaskHandler; // Paper
 
     public ChunkProviderServer(WorldServer worldserver, IChunkLoader ichunkloader, ChunkGenerator<?> chunkgenerator, IAsyncTaskHandler iasynctaskhandler) {
         this.world = worldserver;
@@ -80,10 +80,33 @@ public class ChunkProviderServer implements IChunkProvider {
         this.unloadQueue.remove(ChunkCoordIntPair.a(i, j));
     }
 
+    // Paper start - defaults if Async Chunks is not enabled
+    boolean chunkGoingToExists(int x, int z) {
+        final long k = ChunkCoordIntPair.asLong(x, z);
+        return chunkScheduler.progressCache.containsKey(k);
+    }
+
+    public Chunk getChunkAt(int x, int z, boolean load, boolean gen, Consumer<Chunk> consumer) {
+        Chunk chunk = getChunkAt(x, z, load, gen);
+        if (consumer != null) {
+            consumer.accept(chunk);
+        }
+        return chunk;
+    }
+    // Paper end
+
     @Nullable
     public Chunk getChunkAt(int i, int j, boolean flag, boolean flag1) {
         IChunkLoader ichunkloader = this.chunkLoader;
         Chunk chunk;
+        // Paper start - do already loaded checks before synchronize
+        long k = ChunkCoordIntPair.a(i, j);
+        chunk = (Chunk) this.chunks.get(k);
+        if (chunk != null) {
+            //this.lastChunk = chunk; // Paper remove vanilla lastChunk
+            return chunk;
+        }
+        // Paper end
 
         synchronized (this.chunkLoader) {
             // Paper start - remove vanilla lastChunk, we do it more accurately
@@ -91,13 +114,15 @@ public class ChunkProviderServer implements IChunkProvider {
                 return this.lastChunk;
             }*/ // Paper end
 
-            long k = ChunkCoordIntPair.a(i, j);
+            // Paper start - move up
+            //long k = ChunkCoordIntPair.a(i, j);
 
-            chunk = (Chunk) this.chunks.get(k);
+            /*chunk = (Chunk) this.chunks.get(k);
             if (chunk != null) {
                 //this.lastChunk = chunk; // Paper remove vanilla lastChunk
                 return chunk;
-            }
+            }*/
+            // Paper end
 
             if (flag) {
                 try (co.aikar.timings.Timing timing = world.timings.syncChunkLoadTimer.startTiming()) { // Paper
@@ -153,7 +178,8 @@ public class ChunkProviderServer implements IChunkProvider {
         return (IChunkAccess) (chunk != null ? chunk : (IChunkAccess) this.chunkScheduler.b(new ChunkCoordIntPair(i, j), flag));
     }
 
-    public CompletableFuture<ProtoChunk> a(Iterable<ChunkCoordIntPair> iterable, Consumer<Chunk> consumer) {
+    public CompletableFuture<Void> loadAllChunks(Iterable<ChunkCoordIntPair> iterable, Consumer<Chunk> consumer) { return a(iterable, consumer).thenCompose(protoChunk -> null); } // Paper - overriden in async chunk provider
+    private CompletableFuture<ProtoChunk> a(Iterable<ChunkCoordIntPair> iterable, Consumer<Chunk> consumer) { // Paper - mark private, use above method
         this.batchScheduler.b();
         Iterator iterator = iterable.iterator();
 
@@ -171,6 +197,7 @@ public class ChunkProviderServer implements IChunkProvider {
         return this.batchScheduler.c();
     }
 
+    ReportedException generateChunkError(int i, int j, Throwable throwable) { return a(i, j, throwable); } // Paper - OBFHELPER
     private ReportedException a(int i, int j, Throwable throwable) {
         CrashReport crashreport = CrashReport.a(throwable, "Exception generating new chunk");
         CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Chunk to be generated");
diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
index 06968974c5..0f216c39bd 100644
--- a/src/main/java/net/minecraft/server/ChunkRegionLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -110,7 +110,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
     // CraftBukkit start
     private boolean check(ChunkProviderServer cps, int x, int z) throws IOException {
         if (cps != null) {
-            com.google.common.base.Preconditions.checkState(org.bukkit.Bukkit.isPrimaryThread(), "primary thread");
+            //com.google.common.base.Preconditions.checkState(org.bukkit.Bukkit.isPrimaryThread(), "primary thread"); // Paper - this is safe
             if (cps.isLoaded(x, z)) {
                 return true;
             }
diff --git a/src/main/java/net/minecraft/server/ChunkTaskScheduler.java b/src/main/java/net/minecraft/server/ChunkTaskScheduler.java
index 34019bd1b3..68ef87bf38 100644
--- a/src/main/java/net/minecraft/server/ChunkTaskScheduler.java
+++ b/src/main/java/net/minecraft/server/ChunkTaskScheduler.java
@@ -20,13 +20,13 @@ public class ChunkTaskScheduler extends Scheduler<ChunkCoordIntPair, ChunkStatus
     private final ChunkGenerator<?> d;
     private final IChunkLoader e;
     private final IAsyncTaskHandler f;
-    private final Long2ObjectMap<Scheduler.a> progressCache = new ExpiringMap<Scheduler.a>(8192, 5000) { // CraftBukkit - decompile error
+    final Long2ObjectMap<Scheduler.a> progressCache = it.unimi.dsi.fastutil.longs.Long2ObjectMaps.synchronize(new ExpiringMap<Scheduler.a>(8192, 5000) { // CraftBukkit - decompile error // Paper - synchronize
         protected boolean a(Scheduler.a scheduler_a) {
             ProtoChunk protochunk = (ProtoChunk) scheduler_a.a();
 
             return !protochunk.ab_() /*&& !protochunk.h()*/; // Paper
         }
-    };
+    }); // Paper
 
     public ChunkTaskScheduler(int i, World world, ChunkGenerator<?> chunkgenerator, IChunkLoader ichunkloader, IAsyncTaskHandler iasynctaskhandler) {
         super("WorldGen", i, ChunkStatus.FINALIZED, () -> {
@@ -50,7 +50,7 @@ public class ChunkTaskScheduler extends Scheduler<ChunkCoordIntPair, ChunkStatus
     protected Scheduler.a a(ChunkCoordIntPair chunkcoordintpair, boolean flag) {
         IChunkLoader ichunkloader = this.e;
 
-        synchronized (this.e) {
+        synchronized (progressCache) { // Paper - synchronize on progress cache instead
             return flag ? (Scheduler.a) this.progressCache.computeIfAbsent(chunkcoordintpair.a(), (i) -> {
                 ProtoChunk protochunk;
 
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 3e69bac9ad..48cb099d2a 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -209,7 +209,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         this.random = SHARED_RANDOM; // Paper
         this.fireTicks = -this.getMaxFireTicks();
         this.justCreated = true;
-        this.uniqueID = MathHelper.a(this.random);
+        this.uniqueID = MathHelper.a(java.util.concurrent.ThreadLocalRandom.current()); // Paper
         this.au = this.uniqueID.toString();
         this.aJ = Sets.newHashSet();
         this.aL = new double[] { 0.0D, 0.0D, 0.0D};
diff --git a/src/main/java/net/minecraft/server/IChunkLoader.java b/src/main/java/net/minecraft/server/IChunkLoader.java
index 4698ee99f8..dfb45cc4ea 100644
--- a/src/main/java/net/minecraft/server/IChunkLoader.java
+++ b/src/main/java/net/minecraft/server/IChunkLoader.java
@@ -6,6 +6,8 @@ import javax.annotation.Nullable;
 
 public interface IChunkLoader {
 
+    void loadEntities(NBTTagCompound nbttagcompound, Chunk chunk); // Paper - Async Chunks
+    Object[] loadChunk(GeneratorAccess generatoraccess, int i, int j, Consumer<Chunk> consumer) throws IOException; // Paper - Async Chunks
     @Nullable
     Chunk a(GeneratorAccess generatoraccess, int i, int j, Consumer<Chunk> consumer) throws IOException;
 
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 80e8b023cf..1fbcb8bc8e 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -502,6 +502,7 @@ public abstract class MinecraftServer implements IAsyncTaskHandler, IMojangStati
 
         // CraftBukkit start - fire WorldLoadEvent and handle whether or not to keep the spawn in memory
         Stopwatch stopwatch = Stopwatch.createStarted();
+        boolean waitForChunks = Boolean.getBoolean("paper.waitforchunks"); // Paper
         for (WorldServer worldserver : this.getWorlds()) {
             MinecraftServer.LOGGER.info("Preparing start region for level " + worldserver.dimension + " (Seed: " + worldserver.getSeed() + ")");
             if (!worldserver.getWorld().getKeepSpawnInMemory()) {
@@ -512,26 +513,41 @@ public abstract class MinecraftServer implements IAsyncTaskHandler, IMojangStati
             ArrayList arraylist = Lists.newArrayList();
             Set set = Sets.newConcurrentHashSet();
 
-            // Paper start
-            short radius = worldserver.paperConfig.keepLoadedRange;
-            for (int i = -radius; i <= radius && this.isRunning(); i += 16) {
-                for (int j = -radius; j <= radius && this.isRunning(); j += 16) {
-                    // Paper end
-                    arraylist.add(new ChunkCoordIntPair(blockposition.getX() + i >> 4, blockposition.getZ() + j >> 4));
+            // Paper start - make spiral out
+            int radius = worldserver.paperConfig.keepLoadedRange >> 4;
+            for (int r = 1; r <= radius && isRunning(); r++) {
+                int x = -r;
+                int z = r;
+                arraylist.add(new ChunkCoordIntPair(blockposition.getX(), blockposition.getZ()));
+                // Iterates the edge of half of the box; then negates for other half.
+                while (x <= r && z > -r && isRunning()) {
+                    arraylist.add(new ChunkCoordIntPair(blockposition.getX() + x, blockposition.getZ() + z));
+                    arraylist.add(new ChunkCoordIntPair(blockposition.getX() - x, blockposition.getZ() - z));
+
+                    if (x < r) {
+                        x++;
+                    } else {
+                        z--;
+                    }
                 }
-            } // Paper
+            }
+
+            // Paper end
             if (this.isRunning()) { // Paper
                 int expected = arraylist.size(); // Paper
 
 
-                CompletableFuture completablefuture = worldserver.getChunkProviderServer().a((Iterable) arraylist, (chunk) -> {
+                CompletableFuture completablefuture = worldserver.getChunkProviderServer().loadAllChunks(arraylist, (chunk) -> { // Paper
                     set.add(chunk.getPos());
-                    if (set.size() < expected && set.size() % 25 == 0) this.a(new ChatMessage("menu.preparingSpawn", new Object[0]), set.size() * 100 / expected); // Paper
+                    if (waitForChunks && (set.size() == expected || (set.size() < expected && set.size() % (set.size() / 10) == 0))) {
+                        this.a(new ChatMessage("menu.preparingSpawn", new Object[0]), set.size() * 100 / expected); // Paper
+                    }
                 });
 
-                while (!completablefuture.isDone()) {
+                while (waitForChunks && !completablefuture.isDone() && isRunning()) { // Paper
                     try {
-                        completablefuture.get(1L, TimeUnit.SECONDS);
+                        PaperAsyncChunkProvider.processChunkLoads(worldserver); // Paper
+                        completablefuture.get(50L, TimeUnit.MILLISECONDS); // Paper
                     } catch (InterruptedException interruptedexception) {
                         throw new RuntimeException(interruptedexception);
                     } catch (ExecutionException executionexception) {
@@ -541,11 +557,11 @@ public abstract class MinecraftServer implements IAsyncTaskHandler, IMojangStati
 
                         throw new RuntimeException(executionexception.getCause());
                     } catch (TimeoutException timeoutexception) {
-                        this.a(new ChatMessage("menu.preparingSpawn", new Object[0]), set.size() * 100 / expected); // Paper
+                        //this.a(new ChatMessage("menu.preparingSpawn", new Object[0]), set.size() * 100 / expected); // Paper
                     }
                 }
 
-                this.a(new ChatMessage("menu.preparingSpawn", new Object[0]), set.size() * 100 / expected); // Paper
+                if (waitForChunks) this.a(new ChatMessage("menu.preparingSpawn", new Object[0]), set.size() * 100 / expected); // Paper
             }
         }
 
@@ -1011,6 +1027,7 @@ public abstract class MinecraftServer implements IAsyncTaskHandler, IMojangStati
         while ((futuretask = (FutureTask) this.f.poll()) != null) {
             SystemUtils.a(futuretask, MinecraftServer.LOGGER);
         }
+        PaperAsyncChunkProvider.processChunkLoads(this); // Paper
         MinecraftTimings.minecraftSchedulerTimer.stopTiming(); // Paper
 
         this.methodProfiler.c("commandFunctions");
@@ -1047,6 +1064,7 @@ public abstract class MinecraftServer implements IAsyncTaskHandler, IMojangStati
         // CraftBukkit - dropTickTime
         for (Iterator iterator = this.getWorlds().iterator(); iterator.hasNext();) {
             WorldServer worldserver = (WorldServer) iterator.next();
+            PaperAsyncChunkProvider.processChunkLoads(worldserver); // Paper
             TileEntityHopper.skipHopperEvents = worldserver.paperConfig.disableHopperMoveEvents || org.bukkit.event.inventory.InventoryMoveItemEvent.getHandlerList().getRegisteredListeners().length == 0; // Paper
             i = SystemUtils.c();
             if (true || worldserver.worldProvider.getDimensionManager() == DimensionManager.OVERWORLD || this.getAllowNether()) { // CraftBukkit
@@ -1103,6 +1121,7 @@ public abstract class MinecraftServer implements IAsyncTaskHandler, IMojangStati
                 this.methodProfiler.e();
                 this.methodProfiler.e();
                 worldserver.explosionDensityCache.clear(); // Paper - Optimize explosions
+                PaperAsyncChunkProvider.processChunkLoads(worldserver); // Paper
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/PaperAsyncChunkProvider.java b/src/main/java/net/minecraft/server/PaperAsyncChunkProvider.java
new file mode 100644
index 0000000000..efb971fa53
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PaperAsyncChunkProvider.java
@@ -0,0 +1,375 @@
+/*
+ * This file is licensed under the MIT License (MIT).
+ *
+ * Copyright (c) 2018 Daniel Ennis <http://aikar.co>
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package net.minecraft.server;
+
+import com.destroystokyo.paper.util.PriorityQueuedExecutor;
+import com.destroystokyo.paper.util.PriorityQueuedExecutor.Priority;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectMaps;
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
+import org.bukkit.craftbukkit.generator.InternalChunkGenerator;
+
+import javax.annotation.Nullable;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.function.Consumer;
+
+@SuppressWarnings("unused")
+class PaperAsyncChunkProvider extends ChunkProviderServer {
+
+    private static final PriorityQueuedExecutor EXECUTOR = new PriorityQueuedExecutor("PaperChunkLoader", Math.min(Integer.getInteger("paper.maxchunkthreads", 6), Runtime.getRuntime().availableProcessors()), PriorityQueuedExecutor.CALLER_RUNS_POLICY);
+    private final ExecutorService chunkGenerationExecutor ;
+    private final Long2ObjectMap<PendingChunk> pendingChunks = Long2ObjectMaps.synchronize(new Long2ObjectOpenHashMap<>());
+    private final ConcurrentLinkedQueue<Runnable> mainThreadQueue = new ConcurrentLinkedQueue<>();
+    private final IAsyncTaskHandler asyncHandler;
+
+    private final WorldServer world;
+    private final IChunkLoader chunkLoader;
+    private final MinecraftServer server;
+
+    PaperAsyncChunkProvider(WorldServer world, IChunkLoader chunkLoader, InternalChunkGenerator generator, MinecraftServer server) {
+        super(world, chunkLoader, generator, server);
+
+        this.server = world.getMinecraftServer();
+        this.world = world;
+        this.asyncHandler = server;
+        this.chunkLoader = chunkLoader;
+        String worldName = this.world.getWorld().getName();
+        this.chunkGenerationExecutor = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setNameFormat("PaperChunkGen-" + worldName).setDaemon(true).build());
+    }
+
+    static void processChunkLoads(MinecraftServer server) {
+        for (WorldServer world : server.getWorlds()) {
+            processChunkLoads(world);
+        }
+    }
+
+    static void processChunkLoads(World world) {
+        IChunkProvider chunkProvider = world.getChunkProvider();
+        if (chunkProvider instanceof PaperAsyncChunkProvider) {
+            ((PaperAsyncChunkProvider) chunkProvider).processChunkLoads();
+        }
+    }
+
+    private boolean processChunkLoads() {
+        Runnable run;
+        boolean hadLoad = false;
+        while ((run = mainThreadQueue.poll()) != null) {
+            run.run();
+            hadLoad = true;
+        }
+        return hadLoad;
+    }
+
+    @Nullable
+    @Override
+    public Chunk getChunkAt(int x, int z, boolean load, boolean gen) {
+        return getChunkAt(x, z, load, gen, null);
+    }
+
+    @Nullable
+    @Override
+    public final Chunk getChunkAt(int x, int z, boolean load, boolean gen, Consumer<Chunk> consumer) {
+        long key = ChunkCoordIntPair.asLong(x, z);
+        Chunk chunk = this.chunks.get(key);
+        if (chunk != null || !load) { // return null if we aren't loading
+            return chunk;
+        }
+        return loadOrGenerateChunk(x, z, gen, consumer); // Async overrides this method
+    }
+
+    private Chunk loadOrGenerateChunk(int x, int z, boolean gen, Consumer<Chunk> consumer) {
+        final long key = ChunkCoordIntPair.asLong(x, z);
+
+        // Obtain a PendingChunk
+        final PendingChunk pending;
+        final boolean isBlockingMain = consumer == null && server.isMainThread();
+        synchronized (pendingChunks) {
+            PendingChunk pendingChunk = pendingChunks.get(key);
+            // DO NOT CALL ANY METHODS ON PENDING CHUNK IN THIS BLOCK - WILL DEADLOCK
+            if (pendingChunk == null) {
+                pending = new PendingChunk(x, z, key, gen, isBlockingMain);
+                pendingChunks.put(key, pending);
+            } else if (pendingChunk.hasFinished && gen && !pendingChunk.canGenerate && pendingChunk.chunk == null) {
+                // need to overwrite the old
+                pending = new PendingChunk(x, z, key, true, isBlockingMain);
+                pendingChunks.put(key, pending);
+            } else {
+                pending = pendingChunk;
+                if (isBlockingMain) {
+                    pending.task.bumpPriority();
+                }
+            }
+        }
+        // Listen for when result is ready
+        final CompletableFuture<Chunk> future = new CompletableFuture<>();
+        pending.addListener(future, gen);
+
+        if (isBlockingMain && pending.hasFinished) {
+            processChunkLoads();
+            return pending.postChunk();
+        }
+
+        if (isBlockingMain) {
+            try (co.aikar.timings.Timing timing = world.timings.syncChunkLoadTimer.startTiming()) {
+                while (!future.isDone()) {
+                    // We aren't done, obtain lock on queue
+                    synchronized (mainThreadQueue) {
+                        // We may of received our request now, check it
+                        if (processChunkLoads()) {
+                            // If we processed SOMETHING, don't wait
+                            continue;
+                        }
+                        try {
+                            // We got nothing from the queue, wait until something has been added
+                            mainThreadQueue.wait(1);
+                        } catch (InterruptedException ignored) {
+                        }
+                    }
+                    // Queue has been notified or timed out, process it
+                    processChunkLoads();
+                }
+                // We should be done AND posted into chunk map now, return it
+                return future.join();
+            }
+        } else if (consumer == null) {
+            // This is on another thread
+            return future.join();
+        } else {
+            future.thenAccept((c) -> this.asyncHandler.postToMainThread(() -> consumer.accept(c)));
+        }
+        return null;
+    }
+
+    @Override
+    public CompletableFuture<Void> loadAllChunks(Iterable<ChunkCoordIntPair> iterable, Consumer<Chunk> consumer) {
+        Iterator<ChunkCoordIntPair> iterator = iterable.iterator();
+
+        List<CompletableFuture<Chunk>> all = new ArrayList<>();
+        while (iterator.hasNext()) {
+            ChunkCoordIntPair chunkcoordintpair = (ChunkCoordIntPair) iterator.next();
+            CompletableFuture<Chunk> future = new CompletableFuture<>();
+            all.add(future);
+            this.getChunkAt(chunkcoordintpair.x, chunkcoordintpair.z, true, true, chunk -> {
+                future.complete(chunk);
+                if (consumer != null) {
+                    consumer.accept(chunk);
+                }
+            });
+        }
+        return CompletableFuture.allOf(all.toArray(new CompletableFuture[0]));
+    }
+
+    boolean chunkGoingToExists(int x, int z) {
+        synchronized (pendingChunks) {
+            long key = ChunkCoordIntPair.asLong(x, z);
+            PendingChunk pendingChunk = pendingChunks.get(key);
+            return pendingChunk != null && pendingChunk.canGenerate;
+        }
+    }
+
+    private class PendingChunk implements Runnable {
+        private final int x;
+        private final int z;
+        private final long key;
+        private final PriorityQueuedExecutor.PendingTask<Void> task;
+        private final CompletableFuture<Chunk> loadOnly = new CompletableFuture<>();
+        private final CompletableFuture<Chunk> generate = new CompletableFuture<>();
+
+        private volatile boolean generating;
+        private volatile boolean canGenerate;
+        private volatile boolean isBlockingMain;
+        private volatile boolean hasPosted;
+        private volatile boolean hasFinished;
+        private volatile Chunk chunk;
+        private volatile NBTTagCompound pendingLevel;
+
+        PendingChunk(int x, int z, long key, boolean canGenerate, boolean isBlockingMain) {
+            this.x = x;
+            this.z = z;
+            this.key = key;
+            this.canGenerate = canGenerate;
+            this.isBlockingMain = isBlockingMain;
+            this.task = EXECUTOR.submitTask(this, isBlockingMain ? Priority.HIGH : Priority.NORMAL);
+        }
+
+        synchronized private Chunk loadChunk(int x, int z) throws IOException {
+            Object[] data = chunkLoader.loadChunk(world, x, z, null);
+            if (data != null) {
+                // Level must be loaded on main
+                this.pendingLevel = ((NBTTagCompound) data[1]).getCompound("Level");
+                return (Chunk) data[0];
+            } else {
+                return null;
+            }
+        }
+
+        private CompletableFuture<Chunk> generateChunk(int x, int z) {
+            CompletableFuture<Chunk> pending = new CompletableFuture<>();
+            chunkGenerationExecutor.submit(() -> {
+                batchScheduler.startBatch();
+                batchScheduler.add(new ChunkCoordIntPair(x, z));
+                batchScheduler.executeBatch()
+                    .handle((protoChunk, throwable) -> {
+                        if (throwable != null) {
+                            pending.completeExceptionally(generateChunkError(x, z, throwable));
+                        } else {
+                            pending.complete(new Chunk(world, protoChunk, x, z));
+                        }
+                        return protoChunk;
+                    });
+            });
+            return pending;
+        }
+
+        synchronized boolean loadFinished(Chunk chunk) {
+            if (chunk != null) {
+                postChunkToMain(chunk);
+                return false;
+            }
+
+            loadOnly.complete(null);
+
+            if (!canGenerate) {
+                this.chunk = null;
+                this.hasFinished = true;
+                pendingChunks.remove(key);
+                return false;
+            } else {
+                generating = true;
+                return true;
+            }
+        }
+
+        synchronized void generateFinished(Chunk chunk) {
+            this.chunk = chunk;
+            this.hasFinished = true;
+            if (chunk != null) {
+                postChunkToMain(chunk);
+            } else {
+                pendingChunks.remove(key);
+                completeFutures(null);
+            }
+        }
+
+        synchronized private void completeFutures(Chunk chunk) {
+            loadOnly.complete(chunk);
+            generate.complete(chunk);
+        }
+
+        synchronized private void postChunkToMain(Chunk chunk) {
+            this.chunk = chunk;
+            this.hasFinished = true;
+            synchronized (mainThreadQueue) {
+                mainThreadQueue.add(this::postChunk);
+                mainThreadQueue.notify();
+            }
+        }
+
+        synchronized Chunk postChunk() {
+            if (!server.isMainThread()) {
+                throw new IllegalStateException("Must post from main");
+            }
+            if (hasPosted) {
+                return chunk;
+            }
+            hasPosted = true;
+            try {
+                synchronized (chunks) {
+                    final Chunk other = chunks.get(key);
+                    if (other != null) {
+                        this.chunk = other;
+                        completeFutures(other);
+                        return other;
+                    }
+                    if (chunk != null) {
+                        chunks.put(key, chunk);
+                    }
+                }
+
+                if (chunk != null) {
+                    if (pendingLevel != null) {
+                        chunkLoader.loadEntities(pendingLevel, chunk);
+                    }
+                    if (!chunk.newChunk) {
+                        chunk.setLastSaved(chunk.world.getTime());
+                    }
+                    chunk.addEntities();
+                }
+                completeFutures(chunk);
+                return chunk;
+            } finally {
+                if (chunk != null) {
+                    pendingChunks.remove(key);
+                }
+            }
+        }
+
+        synchronized void addListener(CompletableFuture<Chunk> future, boolean gen) {
+            if (hasFinished) {
+                future.complete(chunk);
+            } else if (gen) {
+                canGenerate = true;
+                generate.thenAccept(future::complete);
+            } else {
+                if (generating) {
+                    future.complete(null);
+                } else {
+                    loadOnly.thenAccept(future::complete);
+                }
+            }
+        }
+
+        @Override
+        public void run() {
+            try {
+                if (!loadFinished(loadChunk(x, z))) {
+                    return;
+                }
+            } catch (Exception ex) {
+                MinecraftServer.LOGGER.error("Couldn't load chunk (" +world.getWorld().getName() + ":" + x + "," + z + ")", ex);
+                if (!(ex instanceof IOException)) {
+                    return;
+                }
+            }
+
+            generateChunk(x, z).handle((chunk, ex) -> {
+                if (ex != null) {
+                    MinecraftServer.LOGGER.error("Couldn't generate chunk (" +world.getWorld().getName() + ":" + x + "," + z + ")", ex);
+                }
+
+                generateFinished(chunk);
+                return chunk;
+            });
+        }
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/PlayerChunk.java b/src/main/java/net/minecraft/server/PlayerChunk.java
index e7d465fb8a..09fdd0e4fa 100644
--- a/src/main/java/net/minecraft/server/PlayerChunk.java
+++ b/src/main/java/net/minecraft/server/PlayerChunk.java
@@ -30,13 +30,14 @@ public class PlayerChunk {
     // All may seem good at first, but there's deeper issues if you play for a bit
     boolean chunkExists; // Paper
     private boolean loadInProgress = false;
-    private Runnable loadedRunnable = new Runnable() {
-        public void run() {
-            loadInProgress = false;
-            PlayerChunk.this.chunk = PlayerChunk.this.playerChunkMap.getWorld().getChunkProviderServer().getChunkAt(location.x, location.z, true, true);
-            markChunkUsed(); // Paper - delay chunk unloads
-        }
+    // Paper start
+    private java.util.function.Consumer<Chunk> chunkLoadedConsumer = chunk -> {
+        loadInProgress = false;
+        PlayerChunk pChunk = PlayerChunk.this;
+        pChunk.chunk = chunk;
+        markChunkUsed(); // Paper - delay chunk unloads
     };
+    // Paper end
     // Paper start - delay chunk unloads
     public final void markChunkUsed() {
         if (chunk != null && chunk.scheduledForUnload != null) {
@@ -52,8 +53,8 @@ public class PlayerChunk {
         ChunkProviderServer chunkproviderserver = playerchunkmap.getWorld().getChunkProviderServer();
 
         chunkproviderserver.a(i, j);
-        this.chunk = chunkproviderserver.getChunkAt(i, j, true, false);
-        this.chunkExists = this.chunk != null || ChunkIOExecutor.hasQueuedChunkLoad(playerChunkMap.getWorld(), i, j); // Paper
+        this.chunk = chunkproviderserver.getChunkAt(i, j, false, false); // Paper
+        this.chunkExists = this.chunk != null || chunkproviderserver.chunkGoingToExists(i, j); // Paper
         markChunkUsed(); // Paper - delay chunk unloads
     }
 
@@ -95,8 +96,13 @@ public class PlayerChunk {
         if (this.chunk != null) {
             return true;
         } else {
-            this.chunk = this.playerChunkMap.getWorld().getChunkProviderServer().getChunkAt(this.location.x, this.location.z, true, flag);
-            markChunkUsed(); // Paper - delay chunk unloads
+            // Paper start - async chunks
+            if (!loadInProgress) {
+                loadInProgress = true;
+                this.chunk = this.playerChunkMap.getWorld().getChunkProviderServer().getChunkAt(this.location.x, this.location.z, true, flag, chunkLoadedConsumer); // Paper)
+                markChunkUsed(); // Paper - delay chunk unloads
+            }
+            // Paper end
             return this.chunk != null;
         }
     }
diff --git a/src/main/java/net/minecraft/server/RegionLimitedWorldAccess.java b/src/main/java/net/minecraft/server/RegionLimitedWorldAccess.java
index 3c35c0f481..187ca2813a 100644
--- a/src/main/java/net/minecraft/server/RegionLimitedWorldAccess.java
+++ b/src/main/java/net/minecraft/server/RegionLimitedWorldAccess.java
@@ -35,7 +35,7 @@ public class RegionLimitedWorldAccess implements GeneratorAccess {
         this.d = l;
         this.e = i;
         this.f = j;
-        this.g = world;
+        this.g = world.regionLimited(this); // Paper
         this.h = world.getSeed();
         this.m = world.getChunkProvider().getChunkGenerator().getSettings();
         this.i = world.getSeaLevel();
diff --git a/src/main/java/net/minecraft/server/SchedulerBatch.java b/src/main/java/net/minecraft/server/SchedulerBatch.java
index d868149d1a..0d94b262ac 100644
--- a/src/main/java/net/minecraft/server/SchedulerBatch.java
+++ b/src/main/java/net/minecraft/server/SchedulerBatch.java
@@ -9,6 +9,7 @@ public class SchedulerBatch<K, T extends SchedulerTask<K, T>, R> {
     private final Scheduler<K, T, R> b;
     private boolean c;
     private int d = 1000;
+    private final java.util.concurrent.locks.ReentrantLock lock = new java.util.concurrent.locks.ReentrantLock(true); // Paper
 
     public SchedulerBatch(Scheduler<K, T, R> scheduler) {
         this.b = scheduler;
@@ -18,7 +19,9 @@ public class SchedulerBatch<K, T extends SchedulerTask<K, T>, R> {
         this.b.b();
     }
 
+    public void startBatch() { b(); } // Paper - OBFHELPER
     public void b() {
+        lock.lock(); // Paper
         if (this.c) {
             throw new RuntimeException("Batch already started.");
         } else {
@@ -27,6 +30,7 @@ public class SchedulerBatch<K, T extends SchedulerTask<K, T>, R> {
         }
     }
 
+    public CompletableFuture<R> add(K k0) { return a(k0); } // Paper - OBFHELPER
     public CompletableFuture<R> a(K object) {
         if (!this.c) {
             throw new RuntimeException("Batch not properly started. Please use startBatch to create a new batch.");
@@ -42,7 +46,13 @@ public class SchedulerBatch<K, T extends SchedulerTask<K, T>, R> {
         }
     }
 
+    public CompletableFuture<R> executeBatch() { return c(); } // Paper - OBFHELPER
     public CompletableFuture<R> c() {
+        // Paper start
+        if (!lock.isHeldByCurrentThread()) {
+            throw new IllegalStateException("Current thread does not hold the write lock");
+        }
+        try {// Paper end
         if (!this.c) {
             throw new RuntimeException("Batch not properly started. Please use startBatch to create a new batch.");
         } else {
@@ -53,5 +63,6 @@ public class SchedulerBatch<K, T extends SchedulerTask<K, T>, R> {
             this.c = false;
             return this.b.c();
         }
+        } finally { lock.unlock(); } // Paper
     }
 }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index acd0c93cec..273cfb73ee 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -46,7 +46,7 @@ import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 import org.bukkit.generator.ChunkGenerator;
 // CraftBukkit end
 
-public abstract class World implements IEntityAccess, GeneratorAccess, IIBlockAccess, AutoCloseable {
+public abstract class World implements IEntityAccess, GeneratorAccess, IIBlockAccess, AutoCloseable, Cloneable { // Paper
 
     protected static final Logger e = LogManager.getLogger();
     private static final EnumDirection[] a = EnumDirection.values();
@@ -109,6 +109,20 @@ public abstract class World implements IEntityAccess, GeneratorAccess, IIBlockAc
     protected PersistentVillage villages;
     public final MethodProfiler methodProfiler;
     public final boolean isClientSide;
+    // Paper start - yes this is hacky as shit
+    RegionLimitedWorldAccess regionLimited;
+    World originalWorld;
+    public World regionLimited(RegionLimitedWorldAccess limitedWorldAccess) {
+        try {
+            World clone = (World) super.clone();
+            clone.regionLimited = limitedWorldAccess;
+            clone.originalWorld = this;
+            return clone;
+        } catch (CloneNotSupportedException e1) {
+        }
+        return null;
+    }
+    // Paper end
     public boolean allowMonsters;
     public boolean allowAnimals;
     private boolean J;
@@ -1004,6 +1018,11 @@ public abstract class World implements IEntityAccess, GeneratorAccess, IIBlockAc
     }
 
     public boolean addEntity(Entity entity, SpawnReason spawnReason) { // Changed signature, added SpawnReason
+        // Paper start
+        if (regionLimited != null) {
+            return regionLimited.addEntity(entity, spawnReason);
+        }
+        // Paper end
         org.spigotmc.AsyncCatcher.catchOp( "entity add"); // Spigot
         if (entity == null) return false;
         if (entity.valid) { MinecraftServer.LOGGER.error("Attempted Double World add on " + entity, new Throwable()); return true; } // Paper
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 1e30ba0548..9ae069d5e5 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -732,7 +732,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             gen = new org.bukkit.craftbukkit.generator.NormalChunkGenerator(this, this.getSeed());
         }
 
-        return new ChunkProviderServer(this, ichunkloader, gen, this.server);
+        return new PaperAsyncChunkProvider(this, ichunkloader, gen, this.server); // Paper - async chunks
         // CraftBukkit end
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index b38e394f83..aa3289e66b 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -159,7 +159,7 @@ public class CraftWorld implements World {
     // Paper start - Async chunk load API
     public void getChunkAtAsync(final int x, final int z, final ChunkLoadCallback callback) {
         final ChunkProviderServer cps = this.world.getChunkProviderServer();
-        callback.onLoad(cps.getChunkAt(x, z, true, true).bukkitChunk); // TODO: Add back async variant
+        cps.getChunkAt(x, z, true, true, chunk -> callback.onLoad(chunk != null ? chunk.bukkitChunk : null));
         /*cps.getChunkAt(x, z, new Runnable() {
             @Override
             public void run() {
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index dc8c3ea758..0e440cbd33 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -76,6 +76,7 @@ public class CraftEventFactory {
     public static final DamageSource POISON = CraftDamageSource.copyOf(DamageSource.MAGIC);
     public static org.bukkit.block.Block blockDamage; // For use in EntityDamageByBlockEvent
     public static Entity entityDamage; // For use in EntityDamageByEntityEvent
+    public static boolean isWorldGen(GeneratorAccess world) { return world instanceof net.minecraft.server.RegionLimitedWorldAccess; } // Paper
 
     // helper methods
     private static boolean canBuild(CraftWorld world, Player player, int x, int z) {
@@ -299,6 +300,7 @@ public class CraftEventFactory {
         CraftServer craftServer = (CraftServer) entity.getServer();
 
         CreatureSpawnEvent event = new CreatureSpawnEvent(entity, spawnReason);
+        if (isWorldGen(entityliving.world)) return event; // Paper - do not call during world gen
         craftServer.getPluginManager().callEvent(event);
         return event;
     }
@@ -933,6 +935,7 @@ public class CraftEventFactory {
         }
 
         BlockIgniteEvent event = new BlockIgniteEvent(bukkitWorld.getBlockAt(block.getX(), block.getY(), block.getZ()), cause, igniter);
+        if (isWorldGen(world)) return event; // Paper - do not call during world gen
         world.getServer().getPluginManager().callEvent(event);
         return event;
     }
@@ -957,6 +960,7 @@ public class CraftEventFactory {
         }
 
         BlockIgniteEvent event = new BlockIgniteEvent(bukkitWorld.getBlockAt(pos.getX(), pos.getY(), pos.getZ()), cause, bukkitIgniter);
+        if (isWorldGen(world)) return event; // Paper - do not call during world gen
         world.getServer().getPluginManager().callEvent(event);
         return event;
     }
@@ -1164,7 +1168,8 @@ public class CraftEventFactory {
     public static BlockPhysicsEvent callBlockPhysicsEvent(GeneratorAccess world, BlockPosition blockposition) {
         org.bukkit.block.Block block = CraftBlock.at(world, blockposition);
         BlockPhysicsEvent event = new BlockPhysicsEvent(block, block.getBlockData());
-        world.getMinecraftWorld().getMinecraftServer().server.getPluginManager().callEvent(event);
+        if (isWorldGen(world)) return event; // Paper - do not call during world gen
+        Bukkit.getPluginManager().callEvent(event); // Paper
         return event;
     }
 
@@ -1200,6 +1205,7 @@ public class CraftEventFactory {
         }
 
         EntityPotionEffectEvent event = new EntityPotionEffectEvent((LivingEntity) entity.getBukkitEntity(), bukkitOldEffect, bukkitNewEffect, cause, action, willOverride);
+        if (isWorldGen(entity.world)) return event; // Paper - do not call during world gen
         Bukkit.getPluginManager().callEvent(event);
 
         return event;
@@ -1218,6 +1224,7 @@ public class CraftEventFactory {
         blockState.setData(block);
 
         BlockFormEvent event = (entity == null) ? new BlockFormEvent(blockState.getBlock(), blockState) : new EntityBlockFormEvent(entity.getBukkitEntity(), blockState.getBlock(), blockState);
+        if (isWorldGen(world)) return true; // Paper - do not call during world gen
         world.getServer().getPluginManager().callEvent(event);
 
         if (!event.isCancelled()) {
-- 
2.18.0

