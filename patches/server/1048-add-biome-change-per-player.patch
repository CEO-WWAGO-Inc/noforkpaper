From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Yannick Lamprecht <yannicklamprecht@live.de>
Date: Sat, 24 Feb 2024 15:29:57 +0100
Subject: [PATCH] add biome change per player


diff --git a/src/main/java/org/bukkit/craftbukkit/CraftBiomesSnapshot.java b/src/main/java/org/bukkit/craftbukkit/CraftBiomesSnapshot.java
new file mode 100644
index 0000000000000000000000000000000000000000..9ace0b4ca19afa70501f6339b59f379270f25284
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/CraftBiomesSnapshot.java
@@ -0,0 +1,100 @@
+package org.bukkit.craftbukkit;
+
+import com.google.common.base.Preconditions;
+import com.google.common.base.Predicates;
+import java.util.Objects;
+import java.util.function.Predicate;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Holder;
+import net.minecraft.core.Registry;
+import net.minecraft.world.level.chunk.PalettedContainer;
+import net.minecraft.world.level.chunk.PalettedContainerRO;
+import org.bukkit.BiomesSnapshot;
+import org.bukkit.block.Biome;
+import org.bukkit.craftbukkit.block.CraftBiome;
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.jetbrains.annotations.NotNull;
+
+public class CraftBiomesSnapshot implements BiomesSnapshot {
+
+    private final int x, z;
+    private final String worldname;
+    private final int minHeight, maxHeight;
+    private final Registry<net.minecraft.world.level.biome.Biome> biomeRegistry;
+    private final PalettedContainer<Holder<net.minecraft.world.level.biome.Biome>>[] biome;
+
+    public CraftBiomesSnapshot(final int x, final int z, final String worldname, final int minHeight, final int maxHeight, final Registry<net.minecraft.world.level.biome.Biome> registry, final PalettedContainer<Holder<net.minecraft.world.level.biome.Biome>>[] biome) {
+        this.x = x;
+        this.z = z;
+        this.worldname = worldname;
+        this.minHeight = minHeight;
+        this.maxHeight = maxHeight;
+        this.biomeRegistry = registry;
+        this.biome = biome;
+    }
+
+    @Override
+    public int getX() {
+        return this.x;
+    }
+
+    @Override
+    public int getZ() {
+        return this.z;
+    }
+
+    @Override
+    public String getWorldName() {
+        return this.worldname;
+    }
+
+    @Override
+    public void setBiome(final int x, final int y, final int z, @NotNull final Biome biome) {
+        Preconditions.checkState(this.biome != null, "ChunkSnapshot created without biome. Please call getSnapshot with includeBiome=true");
+        Objects.requireNonNull(biome, "biome cannot be null");
+        this.validateChunkCoordinates(x, y, z);
+        PalettedContainer<Holder<net.minecraft.world.level.biome.Biome>> biomeLocal = this.biome[this.getSectionIndex(y)];
+        biomeLocal.set(x >> 2, (y & 0xF) >> 2, z >> 2, CraftBiome.bukkitToMinecraftHolder(biome));
+    }
+
+    @Override
+    public final double getRawBiomeTemperature(int x, int y, int z) {
+        Preconditions.checkState(this.biome != null, "ChunkSnapshot created without biome. Please call getSnapshot with includeBiome=true");
+        this.validateChunkCoordinates(x, y, z);
+
+        PalettedContainerRO<Holder<net.minecraft.world.level.biome.Biome>> biome = this.biome[this.getSectionIndex(y)]; // SPIGOT-7188: Don't need to convert y to biome coordinate scale since it is bound to the block chunk section
+        return biome.get(x >> 2, (y & 0xF) >> 2, z >> 2).value().getTemperature(new BlockPos((this.x << 4) | x, y, (this.z << 4) | z));
+    }
+
+    @Override
+    public final Biome getBiome(int x, int y, int z) {
+        Preconditions.checkState(this.biome != null, "ChunkSnapshot created without biome. Please call getSnapshot with includeBiome=true");
+        this.validateChunkCoordinates(x, y, z);
+
+        PalettedContainerRO<Holder<net.minecraft.world.level.biome.Biome>> biome = this.biome[this.getSectionIndex(y)]; // SPIGOT-7188: Don't need to convert y to biome coordinate scale since it is bound to the block chunk section
+        return CraftBiome.minecraftHolderToBukkit(biome.get(x >> 2, (y & 0xF) >> 2, z >> 2));
+    }
+
+
+    @Override
+    public boolean contains(@NonNull Biome biome) {
+        Preconditions.checkArgument(biome != null, "Biome cannot be null");
+
+        Predicate<Holder<net.minecraft.world.level.biome.Biome>> nms = Predicates.equalTo(CraftBiome.bukkitToMinecraftHolder(biome));
+        for (PalettedContainerRO<Holder<net.minecraft.world.level.biome.Biome>> palette : this.biome) {
+            if (palette.maybeHas(nms)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    protected void validateChunkCoordinates(int x, int y, int z) {
+        CraftChunk.validateChunkCoordinates(this.minHeight, this.maxHeight, x, y, z);
+    }
+
+    protected int getSectionIndex(int y) {
+        return (y - this.minHeight) >> 4;
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index dca5f25cf331b5550e9be491b4e8a3466531e021..4f0948050aca3c053fa249903db339da27f40b0f 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -299,7 +299,7 @@ public class CraftChunk implements Chunk {
         byte[][] sectionEmitLights = includeLightData ? new byte[cs.length][] : null;
         // Paper end - Add getChunkSnapshot includeLightData parameter
         boolean[] sectionEmpty = new boolean[cs.length];
-        PalettedContainerRO<Holder<net.minecraft.world.level.biome.Biome>>[] biome = (includeBiome || includeBiomeTempRain) ? new PalettedContainer[cs.length] : null;
+        PalettedContainer<Holder<net.minecraft.world.level.biome.Biome>>[] biome = (includeBiome || includeBiomeTempRain) ? new PalettedContainer[cs.length] : null;
 
         Registry<net.minecraft.world.level.biome.Biome> iregistry = this.worldServer.registryAccess().registryOrThrow(Registries.BIOME);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunkSnapshot.java b/src/main/java/org/bukkit/craftbukkit/CraftChunkSnapshot.java
index 0756b5adb3039997feadeb94afb10b596abd9424..01b8988023043b743a32faa3b1767cf6ea265773 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunkSnapshot.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunkSnapshot.java
@@ -3,7 +3,6 @@ package org.bukkit.craftbukkit;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Predicates;
 import java.util.function.Predicate;
-import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
 import net.minecraft.core.Registry;
 import net.minecraft.world.level.block.state.BlockState;
@@ -14,8 +13,6 @@ import org.bukkit.ChunkSnapshot;
 import org.bukkit.Material;
 import org.bukkit.block.Biome;
 import org.bukkit.block.data.BlockData;
-import org.bukkit.craftbukkit.block.CraftBiome;
-import org.bukkit.craftbukkit.block.CraftBlockType;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 
@@ -23,48 +20,22 @@ import org.bukkit.craftbukkit.util.CraftMagicNumbers;
  * Represents a static, thread-safe snapshot of chunk of blocks
  * Purpose is to allow clean, efficient copy of a chunk data to be made, and then handed off for processing in another thread (e.g. map rendering)
  */
-public class CraftChunkSnapshot implements ChunkSnapshot {
-    private final int x, z;
-    private final int minHeight, maxHeight;
-    private final String worldname;
+public class CraftChunkSnapshot extends CraftBiomesSnapshot implements ChunkSnapshot {
     private final PalettedContainer<BlockState>[] blockids;
     private final byte[][] skylight;
     private final byte[][] emitlight;
     private final boolean[] empty;
     private final Heightmap hmap; // Height map
     private final long captureFulltime;
-    private final Registry<net.minecraft.world.level.biome.Biome> biomeRegistry;
-    private final PalettedContainerRO<Holder<net.minecraft.world.level.biome.Biome>>[] biome;
-
-    CraftChunkSnapshot(int x, int z, int minHeight, int maxHeight, String wname, long wtime, PalettedContainer<BlockState>[] sectionBlockIDs, byte[][] sectionSkyLights, byte[][] sectionEmitLights, boolean[] sectionEmpty, Heightmap hmap, Registry<net.minecraft.world.level.biome.Biome> biomeRegistry, PalettedContainerRO<Holder<net.minecraft.world.level.biome.Biome>>[] biome) {
-        this.x = x;
-        this.z = z;
-        this.minHeight = minHeight;
-        this.maxHeight = maxHeight;
-        this.worldname = wname;
+
+    CraftChunkSnapshot(int x, int z, int minHeight, int maxHeight, String wname, long wtime, PalettedContainer<BlockState>[] sectionBlockIDs, byte[][] sectionSkyLights, byte[][] sectionEmitLights, boolean[] sectionEmpty, Heightmap hmap, Registry<net.minecraft.world.level.biome.Biome> biomeRegistry, PalettedContainer<Holder<net.minecraft.world.level.biome.Biome>>[] biome) {
+        super(x, z, wname, minHeight, maxHeight, biomeRegistry, biome);
         this.captureFulltime = wtime;
         this.blockids = sectionBlockIDs;
         this.skylight = sectionSkyLights;
         this.emitlight = sectionEmitLights;
         this.empty = sectionEmpty;
         this.hmap = hmap;
-        this.biomeRegistry = biomeRegistry;
-        this.biome = biome;
-    }
-
-    @Override
-    public int getX() {
-        return this.x;
-    }
-
-    @Override
-    public int getZ() {
-        return this.z;
-    }
-
-    @Override
-    public String getWorldName() {
-        return this.worldname;
     }
 
     @Override
@@ -81,20 +52,6 @@ public class CraftChunkSnapshot implements ChunkSnapshot {
         return false;
     }
 
-    @Override
-    public boolean contains(Biome biome) {
-        Preconditions.checkArgument(biome != null, "Biome cannot be null");
-
-        Predicate<Holder<net.minecraft.world.level.biome.Biome>> nms = Predicates.equalTo(CraftBiome.bukkitToMinecraftHolder(biome));
-        for (PalettedContainerRO<Holder<net.minecraft.world.level.biome.Biome>> palette : this.biome) {
-            if (palette.maybeHas(nms)) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
     @Override
     public Material getBlockType(int x, int y, int z) {
         this.validateChunkCoordinates(x, y, z);
@@ -147,29 +104,11 @@ public class CraftChunkSnapshot implements ChunkSnapshot {
         return this.getBiome(x, 0, z);
     }
 
-    @Override
-    public final Biome getBiome(int x, int y, int z) {
-        Preconditions.checkState(this.biome != null, "ChunkSnapshot created without biome. Please call getSnapshot with includeBiome=true");
-        this.validateChunkCoordinates(x, y, z);
-
-        PalettedContainerRO<Holder<net.minecraft.world.level.biome.Biome>> biome = this.biome[this.getSectionIndex(y)]; // SPIGOT-7188: Don't need to convert y to biome coordinate scale since it is bound to the block chunk section
-        return CraftBiome.minecraftHolderToBukkit(biome.get(x >> 2, (y & 0xF) >> 2, z >> 2));
-    }
-
     @Override
     public final double getRawBiomeTemperature(int x, int z) {
         return this.getRawBiomeTemperature(x, 0, z);
     }
 
-    @Override
-    public final double getRawBiomeTemperature(int x, int y, int z) {
-        Preconditions.checkState(this.biome != null, "ChunkSnapshot created without biome. Please call getSnapshot with includeBiome=true");
-        this.validateChunkCoordinates(x, y, z);
-
-        PalettedContainerRO<Holder<net.minecraft.world.level.biome.Biome>> biome = this.biome[this.getSectionIndex(y)]; // SPIGOT-7188: Don't need to convert y to biome coordinate scale since it is bound to the block chunk section
-        return biome.get(x >> 2, (y & 0xF) >> 2, z >> 2).value().getTemperature(new BlockPos((this.x << 4) | x, y, (this.z << 4) | z));
-    }
-
     @Override
     public final long getCaptureFullTime() {
         return this.captureFulltime;
@@ -179,12 +118,4 @@ public class CraftChunkSnapshot implements ChunkSnapshot {
     public final boolean isSectionEmpty(int sy) {
         return this.empty[sy];
     }
-
-    private int getSectionIndex(int y) {
-        return (y - this.minHeight) >> 4;
-    }
-
-    private void validateChunkCoordinates(int x, int y, int z) {
-        CraftChunk.validateChunkCoordinates(this.minHeight, this.maxHeight, x, y, z);
-    }
 }
