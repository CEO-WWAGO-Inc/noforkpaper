From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tom <cryptite@gmail.com>
Date: Wed, 13 May 2020 08:44:48 -0500
Subject: [PATCH] BlockBreakNaturallyEvent


diff --git a/src/main/java/org/bukkit/event/block/BlockBreakNaturallyEvent.java b/src/main/java/org/bukkit/event/block/BlockBreakNaturallyEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..8f6372bc6b5542943f3832cc64cfafd91c3832f1
--- /dev/null
+++ b/src/main/java/org/bukkit/event/block/BlockBreakNaturallyEvent.java
@@ -0,0 +1,66 @@
+package org.bukkit.event.block;
+
+import org.bukkit.block.Block;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Called when a block is broken another block. This is generally the result of BlockPhysicsEvent propagation
+ */
+public class BlockBreakNaturallyEvent extends BlockEvent implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+    private final Player player;
+    private final Block sourceBlock;
+    private boolean cancel;
+
+    public BlockBreakNaturallyEvent(@NotNull final Block theBlock, @Nullable Player player, @NotNull final Block sourceBlock) {
+        super(theBlock);
+
+        this.player = player;
+        this.sourceBlock = sourceBlock;
+    }
+
+    /**
+     * Gets the Player that caused this
+     *
+     * @return The Player that is breaking the block involved in this event
+     */
+    @Nullable
+    public Player getPlayer() {
+        return player;
+    }
+
+    /**
+     * Gets the source block that caused this block break
+     *
+     * @return The Source Block which block is involved in this event
+     */
+    @NotNull
+    public final Block getSourceBlock() {
+        return sourceBlock;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancel;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancel = cancel;
+    }
+
+    @Override
+    @NotNull
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
