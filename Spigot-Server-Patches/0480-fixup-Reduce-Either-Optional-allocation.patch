From 64b020ee88c8034fd624dfef614eddb076987ae9 Mon Sep 17 00:00:00 2001
From: Spottedleaf <Spottedleaf@users.noreply.github.com>
Date: Thu, 16 Apr 2020 16:06:31 -0700
Subject: [PATCH] fixup! Reduce Either Optional allocation


diff --git a/src/main/java/com/mojang/datafixers/util/Either.java b/src/main/java/com/mojang/datafixers/util/Either.java
index 4bb621d57..3f65fe710 100644
--- a/src/main/java/com/mojang/datafixers/util/Either.java
+++ b/src/main/java/com/mojang/datafixers/util/Either.java
@@ -22,10 +22,10 @@ public abstract class Either<L, R> implements App<Either.Mu<R>, L> {
     }
 
     private static final class Left<L, R> extends Either<L, R> {
-        private final L value; private final Optional<L> valueOptional; // Paper - reduce the optional allocation...
+        private final L value; private Optional<L> valueOptional; // Paper - reduce the optional allocation...
 
         public Left(final L value) {
-            this.value = value; this.valueOptional = value != null ? Optional.of(value) : Optional.empty();  // Paper - reduce the optional allocation...
+            this.value = value;
         }
 
         @Override
@@ -51,7 +51,7 @@ public abstract class Either<L, R> implements App<Either.Mu<R>, L> {
 
         @Override
         public Optional<L> left() {
-            return this.valueOptional; // Paper - reduce the optional allocation...
+            return this.valueOptional == null ? this.valueOptional = Optional.of(this.value) : this.valueOptional; // Paper - reduce the optional allocation...
         }
 
         @Override
@@ -83,10 +83,10 @@ public abstract class Either<L, R> implements App<Either.Mu<R>, L> {
     }
 
     private static final class Right<L, R> extends Either<L, R> {
-        private final R value; private final Optional<R> valueOptional; // Paper - reduce the optional allocation...
+        private final R value; private Optional<R> valueOptional; // Paper - reduce the optional allocation...
 
         public Right(final R value) {
-            this.value = value; this.valueOptional = value != null ? Optional.of(value) : Optional.empty(); // Paper - reduce the optional allocation...
+            this.value = value;
         }
 
         @Override
@@ -117,7 +117,7 @@ public abstract class Either<L, R> implements App<Either.Mu<R>, L> {
 
         @Override
         public Optional<R> right() {
-            return this.valueOptional; // Paper - reduce the optional allocation...
+            return this.valueOptional == null ? this.valueOptional = Optional.of(this.value) : this.valueOptional; // Paper - reduce the optional allocation...
         }
 
         @Override
-- 
2.26.0

