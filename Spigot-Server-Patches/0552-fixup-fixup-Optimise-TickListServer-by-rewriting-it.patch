From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <Spottedleaf@users.noreply.github.com>
Date: Mon, 27 Jul 2020 16:49:58 -0700
Subject: [PATCH] fixup! fixup! Optimise TickListServer by rewriting it


diff --git a/src/main/java/com/destroystokyo/paper/server/ticklist/PaperTickList.java b/src/main/java/com/destroystokyo/paper/server/ticklist/PaperTickList.java
index f26940e19c348a201de0840f0f602afb6624a642..bbb042fec32ce5a4aecf1934ab6bed77c5134a7f 100644
--- a/src/main/java/com/destroystokyo/paper/server/ticklist/PaperTickList.java
+++ b/src/main/java/com/destroystokyo/paper/server/ticklist/PaperTickList.java
@@ -199,7 +199,7 @@ public final class PaperTickList<T> extends TickListServer<T> { // extend to avo
     }
 
     private void prepare() {
-        final long currentTick = this.world.getTime();
+        final long currentTick = this.nextTick;
 
         final ChunkProviderServer chunkProvider = this.world.getChunkProvider();
 
@@ -268,6 +268,14 @@ public final class PaperTickList<T> extends TickListServer<T> { // extend to avo
 
     @Override
     public void tick() {
+        ++this.nextTick;
+        if (this.nextTick != this.world.getTime()) {
+            if (!this.warnedAboutDesync) {
+                this.warnedAboutDesync = true;
+                MinecraftServer.LOGGER.error("World tick desync detected! Expected " + this.nextTick + " ticks, but got " + this.world.getTime() + " ticks for world '" + this.world.getWorld().getName() + "'", new Throwable());
+                MinecraftServer.LOGGER.error("Preventing redstone from breaking by refusing to accept new tick time");
+            }
+        }
         final ChunkProviderServer chunkProvider = this.world.getChunkProvider();
 
         this.world.getMethodProfiler().enter("cleaning");
@@ -278,14 +286,6 @@ public final class PaperTickList<T> extends TickListServer<T> { // extend to avo
         // this must be done here in case something schedules in the tick code
         this.shortScheduled[this.shortScheduledIndex].clear();
         this.shortScheduledIndex = getNextIndex(this.shortScheduledIndex, SHORT_SCHEDULE_TICK_THRESHOLD);
-        ++this.nextTick;
-        if (this.nextTick != this.world.getTime()) {
-            if (!this.warnedAboutDesync) {
-                this.warnedAboutDesync = true;
-                MinecraftServer.LOGGER.error("World tick desync detected! Expected " + this.nextTick + " ticks, but got " + this.world.getTime() + " ticks for world '" + this.world.getWorld().getName() + "'", new Throwable());
-                MinecraftServer.LOGGER.error("Preventing redstone from breaking by refusing to accept new tick time");
-            }
-        }
 
         this.timingCleanup.stopTiming();
         this.world.getMethodProfiler().exitEnter("ticking");
@@ -412,7 +412,7 @@ public final class PaperTickList<T> extends TickListServer<T> { // extend to avo
 
     @Override
     public void schedule(BlockPosition blockPosition, T t, int i, TickListPriority tickListPriority) {
-        this.schedule(blockPosition, t, i + this.world.getTime(), tickListPriority);
+        this.schedule(blockPosition, t, i + this.nextTick, tickListPriority);
     }
 
     public void schedule(final NextTickListEntry<T> entry) {
@@ -584,7 +584,7 @@ public final class PaperTickList<T> extends TickListServer<T> { // extend to avo
         // start copy from TickListServer  // TODO check on update
         List<NextTickListEntry<T>> list = this.getEntriesInChunk(chunkcoordintpair, false, true);
 
-        return TickListServer.serialize(this.getMinecraftKeyFrom, list, this.world.getTime());
+        return TickListServer.serialize(this.getMinecraftKeyFrom, list, this.nextTick);
         // end copy from TickListServer
     }
 
diff --git a/src/main/java/net/minecraft/server/TickListChunk.java b/src/main/java/net/minecraft/server/TickListChunk.java
index e836b4eac97db322d1185794b5e853f474556a13..8af1229c3da63a838b0bec1cafde1e41cf5cf551 100644
--- a/src/main/java/net/minecraft/server/TickListChunk.java
+++ b/src/main/java/net/minecraft/server/TickListChunk.java
@@ -72,6 +72,7 @@ public class TickListChunk<T> implements TickList<T> {
                 // Paper start - clean up broken entries
                 int delay = nbttagcompound.getInt("t");
                 if (MAX_TICK_DELAY > 0 && delay > MAX_TICK_DELAY) {
+                    MinecraftServer.LOGGER.warn("Dropping tick for pos " + blockposition + ", tick delay " + delay);
                     continue;
                 }
                 list.add(new TickListChunk.a<>(t0, blockposition, delay, TickListPriority.a(nbttagcompound.getInt("p"))));
