From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mariell Hoversholm <proximyst@proximyst.com>
Date: Sun, 24 Oct 2021 16:20:31 -0400
Subject: [PATCH] Add Raw Byte Entity Serialization

== AT ==
public net.minecraft.world.entity.Entity setLevel(Lnet/minecraft/world/level/Level;)V

Co-authored-by: SoSeDiK <mrsosedik@gmail.com>

diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 7dbbf0884b70acb37c3400364736fa8f6b68c964..979f956cb223ba3ad3f333aa68df477b970ab522 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -2062,17 +2062,23 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, S
     }
 
     public boolean saveAsPassenger(CompoundTag nbttagcompound, boolean includeAll) {
+        // Paper start - raw entity serialization API
+        return this.saveAsPassenger(nbttagcompound, includeAll, false);
+    }
+
+    public boolean saveAsPassenger(CompoundTag nbttagcompound, boolean includeAll, boolean force) {
+        // Paper end - raw entity serialization API
         // CraftBukkit end
-        if (this.removalReason != null && !this.removalReason.shouldSave()) {
+        if (this.removalReason != null && !this.removalReason.shouldSave() && !force) { // Paper - raw entity serialization API
             return false;
         } else {
-            String s = this.getEncodeId();
+            String s = this.getEncodeId(force); // Paper - raw entity serialization API
 
-            if (!this.persist || s == null) { // CraftBukkit - persist flag
+            if ((!this.persist && !force) || s == null) { // CraftBukkit - persist flag // Paper - raw entity serialization API
                 return false;
             } else {
                 nbttagcompound.putString("id", s);
-                this.saveWithoutId(nbttagcompound, includeAll); // CraftBukkit - pass on includeAll
+                this.saveWithoutId(nbttagcompound, includeAll, force); // CraftBukkit - pass on includeAll // Paper - raw entity serialization API
                 return true;
             }
         }
@@ -2089,6 +2095,14 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, S
 
     public CompoundTag saveWithoutId(CompoundTag nbttagcompound, boolean includeAll) {
         // CraftBukkit end
+        // Paper start - raw entity serialization API
+        return saveWithoutId(nbttagcompound, includeAll, false);
+    }
+    public CompoundTag saveWithoutId(CompoundTag nbttagcompound, boolean includeAll, boolean force) {
+        if (force) {
+            includeAll = true;
+        }
+        // Paper end - raw entity serialization API
         try {
             // CraftBukkit start - selectively save position
             if (includeAll) {
@@ -2202,7 +2216,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, S
                     Entity entity = (Entity) iterator.next();
                     CompoundTag nbttagcompound1 = new CompoundTag();
 
-                    if (entity.saveAsPassenger(nbttagcompound1, includeAll)) { // CraftBukkit - pass on includeAll
+                    if (entity.saveAsPassenger(nbttagcompound1, includeAll, force)) { // CraftBukkit - pass on includeAll // Paper - raw entity serialization API
                         nbttaglist.add(nbttagcompound1);
                     }
                 }
@@ -2396,10 +2410,17 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, S
 
     @Nullable
     public final String getEncodeId() {
+        // Paper start - raw entity serialization API
+        return getEncodeId(false);
+    }
+
+    @Nullable
+    public final String getEncodeId(boolean force) {
+        // Paper end - raw entity serialization API
         EntityType<?> entitytypes = this.getType();
         ResourceLocation minecraftkey = EntityType.getKey(entitytypes);
 
-        return entitytypes.canSerialize() && minecraftkey != null ? minecraftkey.toString() : null;
+        return (entitytypes.canSerialize() || force) && minecraftkey != null ? minecraftkey.toString() : null; // Paper - entity serialization API
     }
 
     // CraftBukkit start - allow excluding certain data when saving
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 65ce8ab201e7e36f6d2637e906af325e11e425dd..9e7f5dab6ea019ae00463ffd9345ef120a51e181 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1058,6 +1058,24 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
     // Paper end - tracked players API
 
+    // Paper start - raw entity serialization API
+    @Override
+    public boolean spawnAt(Location location, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason reason) {
+        Preconditions.checkNotNull(location, "location cannot be null");
+        Preconditions.checkNotNull(reason, "reason cannot be null");
+        this.entity.setLevel(((CraftWorld) location.getWorld()).getHandle());
+        this.entity.setPos(location.getX(), location.getY(), location.getZ());
+        this.entity.setRot(location.getYaw(), location.getPitch());
+        boolean spawned = !this.entity.valid && this.entity.level().addFreshEntity(this.entity, reason);
+        if (spawned) {
+            for (org.bukkit.entity.Entity pass : getPassengers()) {
+                pass.spawnAt(getLocation());
+            }
+        }
+        return spawned;
+    }
+    // Paper end - raw entity serialization API
+
     // Paper start - missing entity api
     @Override
     public boolean isInvisible() {  // Paper - moved up from LivingEntity
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 2734f4187a4b92ef461e1f2fdae9139c6f54d8fc..1579da0710649f7a0f0f7642d7d58b8d3bf80e4f 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -532,6 +532,72 @@ public final class CraftMagicNumbers implements UnsafeValues {
         return compound;
     }
 
+    // Paper start - raw entity serialization API
+    @Override
+    public byte[] serializeEntity(org.bukkit.entity.Entity entity, io.papermc.paper.entity.EntitySerializationFlag... serializationFlags) {
+        Preconditions.checkNotNull(entity, "null cannot be serialized");
+        Preconditions.checkArgument(entity instanceof org.bukkit.craftbukkit.entity.CraftEntity, "Only CraftEntities can be serialized");
+
+        java.util.Set<io.papermc.paper.entity.EntitySerializationFlag> flags = java.util.Set.of(serializationFlags);
+        boolean force = flags.contains(io.papermc.paper.entity.EntitySerializationFlag.FORCE);
+        boolean misc = flags.contains(io.papermc.paper.entity.EntitySerializationFlag.MISC);
+        Preconditions.checkArgument(entity.isValid() || force, "Cannot serialize invalid entity without the FORCE flag");
+
+        net.minecraft.world.entity.Entity nmsEntity = ((org.bukkit.craftbukkit.entity.CraftEntity) entity).getHandle();
+        if (entity instanceof org.bukkit.entity.Player) {
+            Preconditions.checkArgument(flags.contains(io.papermc.paper.entity.EntitySerializationFlag.PLAYER), "Cannot serialize Players without the PLAYER flag");
+        } else {
+            Preconditions.checkArgument(nmsEntity.getType().canSerialize() || misc, String.format("Cannot serialize misc non-savable entity (%s) without the MISC flag", entity.getType().name()));
+        }
+
+        CompoundTag compound = new CompoundTag();
+        if (flags.contains(io.papermc.paper.entity.EntitySerializationFlag.PASSENGERS)) {
+            nmsEntity.saveAsPassenger(compound, true, force || misc);
+        } else {
+            List<net.minecraft.world.entity.Entity> pass = new java.util.ArrayList<>(nmsEntity.getPassengers());
+            nmsEntity.passengers = com.google.common.collect.ImmutableList.of();
+            nmsEntity.saveAsPassenger(compound, true, force || misc);
+            nmsEntity.passengers = com.google.common.collect.ImmutableList.copyOf(pass);
+        }
+        return serializeNbtToBytes(compound);
+    }
+
+    @Override
+    public org.bukkit.entity.Entity deserializeEntity(byte[] data, org.bukkit.World world, boolean preserveUUID, boolean preservePassengers) {
+        Preconditions.checkNotNull(world, "World cannot be null");
+        Preconditions.checkNotNull(data, "null cannot be deserialized");
+        Preconditions.checkArgument(data.length > 0, "Cannot deserialize empty data");
+
+        CompoundTag compound = deserializeNbtFromBytes(data);
+        int dataVersion = compound.getInt("DataVersion");
+        compound = (CompoundTag) MinecraftServer.getServer().fixerUpper.update(References.ENTITY, new Dynamic<>(NbtOps.INSTANCE, compound), dataVersion, this.getDataVersion()).getValue();
+        if (!preservePassengers) {
+            compound.remove(net.minecraft.world.entity.Entity.PASSENGERS_TAG);
+        }
+        net.minecraft.world.entity.Entity nmsEntity = deserializeEntity(compound, ((org.bukkit.craftbukkit.CraftWorld) world).getHandle(), preserveUUID);
+        return nmsEntity.getBukkitEntity();
+    }
+
+    private net.minecraft.world.entity.Entity deserializeEntity(CompoundTag compound,  net.minecraft.server.level.ServerLevel world, boolean preserveUUID) {
+        if (!preserveUUID) {
+            compound.remove(net.minecraft.world.entity.Entity.UUID_TAG); // Generate a new UUID, so we don't have to worry about deserializing the same entity twice
+        }
+        net.minecraft.world.entity.Entity nmsEntity = net.minecraft.world.entity.EntityType.create(compound, world)
+            .orElseThrow(() -> new IllegalArgumentException("An ID was not found for the data. Did you downgrade?"));
+        if (compound.contains(net.minecraft.world.entity.Entity.PASSENGERS_TAG, Tag.TAG_LIST)) {
+            net.minecraft.nbt.ListTag passengersCompound = compound.getList(net.minecraft.world.entity.Entity.PASSENGERS_TAG, Tag.TAG_COMPOUND);
+            for (Tag tag : passengersCompound) {
+                if (!(tag instanceof CompoundTag serializedPassenger)) {
+                    continue;
+                }
+                net.minecraft.world.entity.Entity passengerEntity = deserializeEntity(serializedPassenger, world, preserveUUID);
+                passengerEntity.startRiding(nmsEntity, true);
+            }
+        }
+        return nmsEntity;
+    }
+    // Paper end - raw entity serialization API
+
     @Override
     public int nextEntityId() {
         return net.minecraft.world.entity.Entity.nextEntityId();
