From 4ff17ea0003df937a6872776c259095b4bd86423 Mon Sep 17 00:00:00 2001
From: Spottedleaf <Spottedleaf@users.noreply.github.com>
Date: Sat, 20 Jul 2019 15:20:04 -0700
Subject: [PATCH] Better server sleeping/waiting

Vanilla's sleep behaviour was to use LockSupport#parkNanos, however
they never backed off and entered a full park, so the scheduler
could potentially keep the server thread running when we really
did not want that.

This aims to fix https://bugs.mojang.com/browse/MC-149018

diff --git a/src/main/java/net/minecraft/server/IAsyncTaskHandler.java b/src/main/java/net/minecraft/server/IAsyncTaskHandler.java
index d521d25cf5..36e9011c47 100644
--- a/src/main/java/net/minecraft/server/IAsyncTaskHandler.java
+++ b/src/main/java/net/minecraft/server/IAsyncTaskHandler.java
@@ -91,6 +91,53 @@ public abstract class IAsyncTaskHandler<R extends Runnable> implements Mailbox<R
 
     }
 
+    // Paper start - better waiting (MC-149018)
+    public void waitFor(final long time) { // time in ns
+        final long start = System.nanoTime();
+
+        ++this.e;
+
+        try {
+            while ((System.nanoTime() - start) < time) {
+                if (this.executeNext()) {
+                    // re-check condition
+                    continue;
+                }
+
+                // no tasks to execute
+                final long timeUsed = System.nanoTime() - start;
+                final long budget = time - timeUsed;
+
+                if (budget <= 50_000L) { // 50us, this can be tuned, even to 0
+                    // this is a presumption that park does not have the precision to sleep
+                    // for under 50us and we would oversleep, although this branch is not very
+                    // neccessary for this to work
+                    break;
+                }
+
+                // In order to avoid thread scheduling potentially waking up us
+                // late we aim to wake up a millisecond early
+                final long budgetWithPreempt = budget - (int)(1.0e6);
+
+                if (budgetWithPreempt <= 0) {
+                    // we don't have a millisecond to spare
+                    LockSupport.parkNanos("short park for timed wait", 50_000L);
+                    continue;
+                }
+
+                // Optionally before entering the long park we could spinwait a bit here,
+                // alternatively, we could spinwait for longer periods instead of one park
+
+
+                LockSupport.parkNanos("long park for timed wait", budgetWithPreempt);
+                // additions to the queue will unpark us
+            }
+        } finally {
+            --this.e;
+        }
+    }
+    // Paper end
+
     protected void executeAll() {
         while (this.executeNext()) {
             ;
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 01b389d89f..d5e89cb72d 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -986,9 +986,11 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
 
     protected void sleepForTick() {
         //this.executeAll(); // Paper - move this into the tick method for timings
-        this.awaitTasks(() -> {
-            return !this.canSleepForTick();
-        });
+        // Paper start - improve wait (MC-149018)
+        // ac will be false here given that flag is set depending on the last value of executeNext, which will be false
+        // after executing all tasks
+        this.waitFor((this.nextTick * 1000 * 1000) - System.nanoTime());
+        // Paper end
     }
 
     @Override
-- 
2.22.0

