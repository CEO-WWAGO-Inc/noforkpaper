From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Denery <dorofeevij@gmail.com>
Date: Wed, 22 Feb 2023 15:47:50 +0300
Subject: [PATCH] Biome creation API


diff --git a/src/main/java/io/papermc/paper/registry/APIConverters.java b/src/main/java/io/papermc/paper/registry/APIConverters.java
index e0c6070868240b813b60f2db4c8e15f9a3cd93da..422b50a1166646c1bfa7f14c458ebb269cee462f 100644
--- a/src/main/java/io/papermc/paper/registry/APIConverters.java
+++ b/src/main/java/io/papermc/paper/registry/APIConverters.java
@@ -9,6 +9,20 @@ import net.minecraft.server.MinecraftServer;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.function.Function;
+// Paper start - Biome creation API
+import io.papermc.paper.world.biome.BiomeBuilder;
+import io.papermc.paper.world.biome.BiomeSpecialEffectsImpl;
+import io.papermc.paper.world.biome.ClimateSettings;
+import io.papermc.paper.world.biome.ClimateSettingsImpl;
+import io.papermc.paper.registry.enums.EnumSettingExtractors;
+import net.kyori.adventure.key.Key;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.level.biome.BiomeGenerationSettings;
+import net.minecraft.world.level.biome.BiomeSpecialEffects;
+import net.minecraft.world.level.biome.MobSpawnSettings;
+import org.bukkit.block.Biome;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+// Paper end
 
 public final class APIConverters {
     private APIConverters() {}
@@ -24,6 +38,49 @@ public final class APIConverters {
      *  If you want to add a registry for a new API, add its converter in there.
      */
     public static void initializeConverterFunctions() {
+        final Function<Registry<net.minecraft.world.level.biome.Biome>, Converters.Converter<Biome, net.minecraft.world.level.biome.Biome>> registryConverterFunction = registry -> Converters.Converter.createCached(
+            apiBiome -> {
+                net.minecraft.world.level.biome.Biome nmsBiome = registry.get(CraftNamespacedKey.toMinecraft(apiBiome.getKey()));
+                if (nmsBiome != null) {
+                    return nmsBiome;
+                } else {
+                    if (apiBiome == Biome.CUSTOM)
+                        throw new IllegalStateException("Cannot convert CUSTOM biome!");
+                    final BiomeSpecialEffects.Builder builder = new BiomeSpecialEffects.Builder();
+                    BiomeSpecialEffectsImpl biomeSpecialEffects = (BiomeSpecialEffectsImpl) apiBiome.getBiomeSpecialEffects();
+                    biomeSpecialEffects.getOverriddenGrassColor().ifPresent(color -> builder.grassColorOverride(color.asRGB()));
+                    biomeSpecialEffects.getOverriddenFoliageColor().ifPresent(color -> builder.foliageColorOverride(color.asRGB()));
+                    return new net.minecraft.world.level.biome.Biome.BiomeBuilder()
+                        .temperature(apiBiome.getClimateSettings().temperature())
+                        .downfall(apiBiome.getClimateSettings().downfall())
+                        .precipitation(ClimateSettingsImpl.precipitationConverter.convertAPI(apiBiome.getClimateSettings().precipitation()))
+                        .generationSettings(new BiomeGenerationSettings.PlainBuilder().build())
+                        .mobSpawnSettings(new MobSpawnSettings.Builder().build())
+                        .specialEffects(builder
+                            .skyColor(biomeSpecialEffects.skyColor().asRGB())
+                            .fogColor(biomeSpecialEffects.fogColor().asRGB())
+                            .waterColor(biomeSpecialEffects.waterColor().asRGB())
+                            .waterFogColor(biomeSpecialEffects.waterFogColor().asRGB())
+                            .build())
+                        .temperatureAdjustment(net.minecraft.world.level.biome.Biome.TemperatureModifier.NONE)
+                        .build();
+                }
+            }, nmsBiome -> {
+                final ResourceLocation location = registry.getKey(nmsBiome);
+                try {
+                    return Biome.valueOf(location.getPath());
+                } catch (final IllegalArgumentException e) {
+                    ClimateSettings climate = EnumSettingExtractors.getEnumExtractor(ClimateSettings.class).apply(nmsBiome);
+                    io.papermc.paper.world.biome.BiomeSpecialEffects effects = EnumSettingExtractors.getEnumExtractor(io.papermc.paper.world.biome.BiomeSpecialEffects.class).apply(nmsBiome);
+                    return BiomeBuilder.API.builderFactory.create()
+                        .climateSettings(climate)
+                        .specialEffects(effects)
+                        .build(Key.key(location.getNamespace(), location.getPath())).value();
+                }
+            }
+        );
+
+        APIConverters.registerConverterFunction(ExtendedRegistry.BIOME_REGISTRY_KEY, registryConverterFunction);
     }
 
     public static <API, NMS> void registerConverterFunction(RegistryKey<? extends RegistryKey.RegistryLayerType, API> registryKey, Function<? extends Registry<NMS>, ? extends Converters.Converter<API, NMS>> converterFunction) {
diff --git a/src/main/java/io/papermc/paper/registry/RegistryAPI.java b/src/main/java/io/papermc/paper/registry/RegistryAPI.java
index ff83ca0c019890cff2185ab7ac3256a7b182ffbc..b22c672b1a1798aebdcbb6ca9e2499bcc6fdafc5 100644
--- a/src/main/java/io/papermc/paper/registry/RegistryAPI.java
+++ b/src/main/java/io/papermc/paper/registry/RegistryAPI.java
@@ -48,6 +48,7 @@ public final class RegistryAPI {
 
     static void initializeKeys() {
         final APIStorage storage = RegistryAPI.getApiStorage();
+        storage.registerAPIClass(org.bukkit.block.Biome.class, net.minecraft.core.registries.Registries.BIOME);
     }
 
     @SuppressWarnings("unchecked")
@@ -76,6 +77,7 @@ public final class RegistryAPI {
             ExtendedRegistry.API.simpleRegistry = LifecyclePointUtil.SIMPLE_REGISTRY;
             EnumSettingExtractors.initializeExtractors();
             EnumCreators.launchAPI();
+            io.papermc.paper.world.biome.BiomeAPI.launchAPI();
         }
     }
 
diff --git a/src/main/java/io/papermc/paper/registry/enums/EnumCreators.java b/src/main/java/io/papermc/paper/registry/enums/EnumCreators.java
index d65cba5e3fa495f5f9c9b8375cb8402cd8e2d933..46950f9ff2fd1f528d0cb515554e866e1fe9d877 100644
--- a/src/main/java/io/papermc/paper/registry/enums/EnumCreators.java
+++ b/src/main/java/io/papermc/paper/registry/enums/EnumCreators.java
@@ -29,6 +29,7 @@ public final class EnumCreators {
     private static final Map<Class<?>, MethodHandle> methodHandleRegistry = new HashMap<>();
 
     static {
+        enumConstructorMethodHandle(org.bukkit.block.Biome.class, io.papermc.paper.world.biome.ClimateSettings.class, io.papermc.paper.world.biome.BiomeSpecialEffects.class);
     }
 
     public static void launchAPI() {
diff --git a/src/main/java/io/papermc/paper/registry/enums/EnumSettingExtractors.java b/src/main/java/io/papermc/paper/registry/enums/EnumSettingExtractors.java
index c13f65f1bc3d297306bde0fc1364c1bc0773094c..9925614467f1855ad4e2b12e87d43acab6de9026 100644
--- a/src/main/java/io/papermc/paper/registry/enums/EnumSettingExtractors.java
+++ b/src/main/java/io/papermc/paper/registry/enums/EnumSettingExtractors.java
@@ -13,6 +13,8 @@ public final class EnumSettingExtractors {
     private static final Map<Class<?>, Function<?, ?>> enumSettingsRegistry = new HashMap<>();
 
     public static void initializeExtractors() {
+        registerEnumSetting(io.papermc.paper.world.biome.ClimateSettings.class, (net.minecraft.world.level.biome.Biome biome) -> new io.papermc.paper.world.biome.ClimateSettingsImpl(biome));
+        registerEnumSetting(io.papermc.paper.world.biome.BiomeSpecialEffects.class, (net.minecraft.world.level.biome.Biome biome) -> new io.papermc.paper.world.biome.BiomeSpecialEffectsImpl(biome));
     }
 
     public static <S, NMS> void registerEnumSetting(Class<S> setting, Function<NMS, S> extractor) {
diff --git a/src/main/java/io/papermc/paper/world/biome/BiomeAPI.java b/src/main/java/io/papermc/paper/world/biome/BiomeAPI.java
new file mode 100644
index 0000000000000000000000000000000000000000..a41e47c250811a1986e654a25f136f4fdee1ca85
--- /dev/null
+++ b/src/main/java/io/papermc/paper/world/biome/BiomeAPI.java
@@ -0,0 +1,140 @@
+package io.papermc.paper.world.biome;
+
+import io.papermc.paper.registry.ExtendedRegistry;
+import io.papermc.paper.registry.enums.EnumCreator;
+import io.papermc.paper.registry.enums.EnumCreators;
+import io.papermc.paper.registry.key.ResourceKey;
+import net.kyori.adventure.key.Key;
+import org.bukkit.Color;
+import org.bukkit.block.Biome;
+import org.jetbrains.annotations.NotNull;
+
+public final class BiomeAPI {
+    private BiomeAPI() {}
+
+    private static final EnumCreator<Biome> BIOME_ENUM_CREATOR = EnumCreators.getFactory().create(Biome.class, ClimateSettings.class, BiomeSpecialEffects.class);
+
+    public static void launchAPI() {
+        BiomeBuilder.API.enumCreator = BIOME_ENUM_CREATOR;
+        ClimateSettings.API.builderFactory = () -> new ClimateSettings.Builder() {
+            // Copied from the forest biome
+            float temperature = 0.7F;
+            float downfall = 0.8F;
+            ClimateSettings.Precipitation precipitation = ClimateSettings.Precipitation.NONE;
+
+            @Override
+            public ClimateSettings.@NotNull Builder temperature(float temperature) {
+                this.temperature = temperature;
+                return this;
+            }
+
+            @Override
+            public ClimateSettings.@NotNull Builder downfall(float downfall) {
+                this.downfall = downfall;
+                return this;
+            }
+
+            @Override
+            public ClimateSettings.@NotNull Builder precipitation(ClimateSettings.@NotNull Precipitation precipitation) {
+                this.precipitation = precipitation;
+                return this;
+            }
+
+            @Override
+            public @NotNull ClimateSettings build() {
+                return new ClimateSettingsImpl(temperature, downfall, precipitation);
+            }
+        };
+
+        BiomeSpecialEffects.API.builderFactory = () -> new BiomeSpecialEffects.Builder() {
+            // Values copied from the forest biome
+            Color skyColor = Color.fromRGB(7972607);
+            Color fogColor = Color.fromRGB(12638463);
+            Color waterColor = Color.fromRGB(4159204);
+            Color waterFogColor = Color.fromRGB(329011);
+            Color grassColor = null;
+            Color foliageColor = null;
+
+            @Override
+            public BiomeSpecialEffects.@NotNull Builder skyColor(@NotNull Color skyColor) {
+                this.skyColor = skyColor;
+                return this;
+            }
+
+            @Override
+            public BiomeSpecialEffects.@NotNull Builder fogColor(@NotNull Color fogColor) {
+                this.fogColor = fogColor;
+                return this;
+            }
+
+            @Override
+            public BiomeSpecialEffects.@NotNull Builder waterColor(@NotNull Color waterColor) {
+                this.waterColor = waterColor;
+                return this;
+            }
+
+            @Override
+            public BiomeSpecialEffects.@NotNull Builder waterFogColor(@NotNull Color waterFogColor) {
+                this.waterFogColor = waterFogColor;
+                return this;
+            }
+
+            @Override
+            public BiomeSpecialEffects.@NotNull Builder grassColor(@NotNull Color grassColor) {
+                this.grassColor = grassColor;
+                return this;
+            }
+
+            @Override
+            public BiomeSpecialEffects.@NotNull Builder foliageColor(@NotNull Color foliageColor) {
+                this.foliageColor = foliageColor;
+                return this;
+            }
+
+            @Override
+            public @NotNull BiomeSpecialEffects build() {
+                return new BiomeSpecialEffectsImpl(skyColor, fogColor, waterColor, waterFogColor, grassColor, foliageColor);
+            }
+        };
+
+        BiomeBuilder.API.builderFactory = () -> new BiomeBuilder() {
+            ClimateSettings climateSettings = ClimateSettings.builder().build();
+            BiomeSpecialEffects biomeSpecialEffects = BiomeSpecialEffects.builder().build();
+
+            @Override
+            public @NotNull BiomeBuilder climateSettings(@NotNull ClimateSettings climateSettings) {
+                this.climateSettings = climateSettings;
+                return this;
+            }
+
+            @Override
+            public @NotNull BiomeBuilder specialEffects(@NotNull BiomeSpecialEffects biomeSpecialEffects) {
+                this.biomeSpecialEffects = biomeSpecialEffects;
+                return this;
+            }
+
+            @Override
+            public @NotNull ExtendedRegistry.EnumRegistryInstance<Biome> build(@NotNull ResourceKey<Biome> resourceKey) {
+                return this.build(resourceKey.key());
+            }
+
+            @Override
+            public @NotNull ExtendedRegistry.EnumRegistryInstance<Biome> build(@NotNull Key key) {
+                return new ExtendedRegistry.EnumRegistryInstance<>() {
+                    final Biome instance = BiomeAPI.BIOME_ENUM_CREATOR.create(key, climateSettings, biomeSpecialEffects);
+
+                    @Override
+                    public @NotNull Biome register() {
+                        ExtendedRegistry.register(ExtendedRegistry.BIOME_REGISTRY_KEY, this.instance);
+                        return this.instance;
+                    }
+
+                    @Override
+                    public @NotNull Biome value() {
+                        return this.instance;
+                    }
+                };
+            }
+        };
+    }
+}
diff --git a/src/main/java/io/papermc/paper/world/biome/BiomeSpecialEffectsImpl.java b/src/main/java/io/papermc/paper/world/biome/BiomeSpecialEffectsImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..a0c80ad190da44e4461bfdc0b919059bed32ac43
--- /dev/null
+++ b/src/main/java/io/papermc/paper/world/biome/BiomeSpecialEffectsImpl.java
@@ -0,0 +1,99 @@
+package io.papermc.paper.world.biome;
+
+import net.minecraft.util.Mth;
+import net.minecraft.world.level.GrassColor;
+import net.minecraft.world.level.biome.Biome;
+import org.bukkit.Color;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Optional;
+
+public class BiomeSpecialEffectsImpl implements BiomeSpecialEffects {
+    final Color skyColor;
+    final Color fogColor;
+    final Color waterColor;
+    final Color waterFogColor;
+    Color grassColor;
+    Color foliageColor;
+    final Color overriddenGrassColor;
+    final Color overriddenFoliageColor;
+
+    public BiomeSpecialEffectsImpl(Color skyColor, Color fogColor, Color waterColor, Color waterFogColor, Color grassColor, Color foliageColor) {
+        this.skyColor = skyColor;
+        this.fogColor = fogColor;
+        this.waterColor = waterColor;
+        this.waterFogColor = waterFogColor;
+        this.overriddenGrassColor = grassColor;
+        this.overriddenFoliageColor = foliageColor;
+    }
+
+    public BiomeSpecialEffectsImpl(Biome handle) {
+        this.skyColor = Color.fromRGB(handle.getSkyColor());
+        this.fogColor = Color.fromRGB(handle.getFogColor());
+        this.waterColor = Color.fromRGB(handle.getWaterColor());
+        this.waterFogColor = Color.fromRGB(handle.getWaterFogColor());
+        this.foliageColor = Color.fromRGB(handle.getFoliageColor());
+        this.grassColor = Color.fromRGB(this.getGrassColor(handle));
+        this.overriddenFoliageColor = handle.getSpecialEffects().getFoliageColorOverride().map(Color::fromRGB).orElse(null);
+        this.overriddenGrassColor = handle.getSpecialEffects().getGrassColorOverride().map(Color::fromRGB).orElse(null);
+    }
+
+    /**
+     * Copied from {@link Biome}
+     */
+    public int getGrassColor(Biome biome) {
+        return biome.getSpecialEffects().getGrassColorOverride().orElseGet(() -> this.getGrassColorFromTexture(biome));
+    }
+
+    private int getGrassColorFromTexture(Biome biome) {
+        double d = Mth.clamp(biome.getBaseTemperature(), 0.0F, 1.0F);
+        double e = Mth.clamp(biome.getDownfall(), 0.0F, 1.0F);
+        return GrassColor.get(d, e);
+    }
+
+    @Override
+    public @NotNull Color skyColor() {
+        return this.skyColor;
+    }
+
+    @Override
+    public @NotNull Color fogColor() {
+        return this.fogColor;
+    }
+
+    @Override
+    public @NotNull Color waterColor() {
+        return this.waterColor;
+    }
+
+    @Override
+    public @NotNull Color waterFogColor() {
+        return this.waterFogColor;
+    }
+
+    @Override
+    public @NotNull Color grassColor() {
+        if (grassColor != null)
+            return grassColor;
+        if (overriddenGrassColor != null)
+            return overriddenGrassColor;
+        throw new UnsupportedOperationException("Cannot get grass color which biome which isn't constructed yet and which isn't overridden!");
+    }
+
+    @Override
+    public @NotNull Color foliageColor() {
+        if (foliageColor != null)
+            return foliageColor;
+        if (overriddenFoliageColor != null)
+            return overriddenFoliageColor;
+        throw new UnsupportedOperationException("Cannot get foliage color which biome which isn't constructed yet and which isn't overridden!");
+    }
+
+    public Optional<Color> getOverriddenGrassColor() {
+        return Optional.ofNullable(this.overriddenGrassColor);
+    }
+
+    public Optional<Color> getOverriddenFoliageColor() {
+        return Optional.ofNullable(this.overriddenFoliageColor);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/world/biome/ClimateSettingsImpl.java b/src/main/java/io/papermc/paper/world/biome/ClimateSettingsImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..5ec93628a9b342ef69680070337997ffc8c9ce2f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/world/biome/ClimateSettingsImpl.java
@@ -0,0 +1,51 @@
+package io.papermc.paper.world.biome;
+
+import io.papermc.paper.registry.Converters;
+import net.minecraft.world.level.biome.Biome;
+import org.jetbrains.annotations.NotNull;
+
+public final class ClimateSettingsImpl implements ClimateSettings {
+    final float temperature;
+    final float downfall;
+    final Precipitation precipitation;
+
+    public ClimateSettingsImpl(Biome biome) {
+        this.temperature = biome.getBaseTemperature();
+        this.downfall = biome.getDownfall();
+        this.precipitation = precipitationConverter.convertNMS(biome.getPrecipitation());
+    }
+
+    public ClimateSettingsImpl(float temperature, float downfall, Precipitation precipitation) {
+        this.temperature = temperature;
+        this.downfall = downfall;
+        this.precipitation = precipitation;
+    }
+
+    public static Converters.Converter<ClimateSettings.Precipitation, Biome.Precipitation> precipitationConverter = Converters.Converter.create(
+        (ClimateSettings.Precipitation precipitation) -> switch (precipitation) {
+        case NONE -> Biome.Precipitation.NONE;
+        case RAIN -> Biome.Precipitation.RAIN;
+        case SNOW -> Biome.Precipitation.SNOW;
+    }, (Biome.Precipitation precipitation) -> switch (precipitation) {
+        case NONE -> ClimateSettings.Precipitation.NONE;
+        case RAIN -> ClimateSettings.Precipitation.RAIN;
+        case SNOW -> ClimateSettings.Precipitation.SNOW;
+    });
+
+    @Override
+    public float temperature() {
+        return temperature;
+    }
+
+    @Override
+    public float downfall() {
+        return downfall;
+    }
+
+    @Override
+    public @NotNull Precipitation precipitation() {
+        return precipitation;
+    }
+
+
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java b/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
index 09be3f188f9710fa71c5db67023e654739721f21..c78de6d4f8526fee8754edc20aa90797dc89bc8c 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
@@ -219,6 +219,17 @@ public abstract class CraftRegionAccessor implements RegionAccessor {
     public Biome getComputedBiome(int x, int y, int z) {
         return CraftBlock.biomeBaseToBiome(this.getHandle().registryAccess().registryOrThrow(Registries.BIOME), this.getHandle().getBiome(new BlockPos(x, y, z)));
     }
+
+    @Override
+    public  Biome biome(Location location) {
+        return this.biome(location.getBlockX(), location.getBlockY(), location.getBlockZ());
+    }
+
+    @Override
+    public Biome biome(int x, int y, int z) {
+        return io.papermc.paper.registry.APIConverters.getOrCreateAPIConverterBukkit(io.papermc.paper.registry.ExtendedRegistry.BIOME_REGISTRY_KEY).convertNMS(this.getHandle().getBiome(new BlockPos(x, y, z)).value());
+    }
+
     // Paper end
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CraftLimitedRegion.java b/src/main/java/org/bukkit/craftbukkit/generator/CraftLimitedRegion.java
index b01904021bd4f485aaf03d1d7634b56f134d3099..8d0e3481f7b5450a9a0e7a41fa61b2c079bc0e8c 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CraftLimitedRegion.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CraftLimitedRegion.java
@@ -28,6 +28,7 @@ import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.generator.LimitedRegion;
 import org.bukkit.util.BoundingBox;
 import org.bukkit.util.Consumer;
+import org.jetbrains.annotations.NotNull;
 
 public class CraftLimitedRegion extends CraftRegionAccessor implements LimitedRegion {
 
@@ -172,6 +173,12 @@ public class CraftLimitedRegion extends CraftRegionAccessor implements LimitedRe
         Preconditions.checkArgument(this.isInRegion(x, y, z), "Coordinates %s, %s, %s are not in the region", x, y, z);
         return super.getComputedBiome(x, y, z);
     }
+
+    @Override
+    public @NotNull Biome biome(int x, int y, int z) {
+        Preconditions.checkArgument(this.isInRegion(x, y, z), "Coordinates %s, %s, %s are not in the region", x, y, z);
+        return super.biome(x, y, z);
+    }
     // Paper end
 
     @Override
diff --git a/src/test/java/io/papermc/paper/world/biome/BiomeTest.java b/src/test/java/io/papermc/paper/world/biome/BiomeTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..c67d8c375fddadc9d0fcb88bfba6bed5a6276bde
--- /dev/null
+++ b/src/test/java/io/papermc/paper/world/biome/BiomeTest.java
@@ -0,0 +1,46 @@
+package io.papermc.paper.world.biome;
+
+import io.papermc.paper.registry.APIConverters;
+import io.papermc.paper.registry.Converters;
+import io.papermc.paper.registry.ExtendedRegistry;
+import io.papermc.paper.registry.RegistryAPI;
+import io.papermc.paper.registry.enums.EnumWritableRegistry;
+import io.papermc.paper.registry.key.RegistryKey;
+import net.kyori.adventure.key.Key;
+import net.minecraft.core.Registry;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.util.Mth;
+import org.bukkit.block.Biome;
+import org.bukkit.support.AbstractTestingBase;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+public class BiomeTest extends AbstractTestingBase {
+    Converters.CachedConverter<Key, ResourceLocation> keyConverter;
+    RegistryKey.EnumMutableRegistryKey<RegistryKey.RegistryLayerType, Biome> registryKey;
+
+    @Before
+    public void before() {
+        this.keyConverter = Converters.KEY_RESOURCE_LOCATION_CONVERTER.get();
+        RegistryAPI.BeforeBootstrapAPI.launchAPI();
+        RegistryAPI.launchAPI();
+        APIConverters.initializeConverterFunctions();
+    }
+
+    @Test
+    public void test() {
+        RegistryAPI.getApiStorage().registerConverter(ExtendedRegistry.BIOME_REGISTRY_KEY, APIConverters.getOrCreateAPIConverter(ExtendedRegistry.BIOME_REGISTRY_KEY, BIOMES));
+        EnumWritableRegistry<Biome> apiRegistry = RegistryAPI.getApiStorage().getOrCreateRegistry(ExtendedRegistry.BIOME_REGISTRY_KEY, BIOMES);
+        Converters.Converter<ExtendedRegistry<Biome>, Registry<Object>> converter = RegistryAPI.getApiStorage().getConverter(ExtendedRegistry.BIOME_REGISTRY_KEY);
+        Registry<Object> nmsRegistry = converter.convertAPI(apiRegistry);
+        ExtendedRegistry<Biome> biomes = converter.convertNMS(nmsRegistry);
+        Assert.assertEquals(apiRegistry, biomes);
+    }
+
+    protected static int calculateSkyColor(float temperature) {
+        float f = temperature / 3.0F;
+        f = Mth.clamp(f, -1.0F, 1.0F);
+        return Mth.hsvToRgb(0.62222224F - f * 0.05F, 0.5F + f * 0.1F, 1.0F);
+    }
+}
