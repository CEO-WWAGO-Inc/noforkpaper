From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nesaak <52047222+Nesaak@users.noreply.github.com>
Date: Sun, 17 May 2020 18:38:36 -0400
Subject: [PATCH] Add PlayerHeldItemChangeEvent

Adds PlayerHeldItemEvent which fires when the item in the player's hand changes.

diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerHeldItemChangeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerHeldItemChangeEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..87782c775e3d2ae956bf3ecfcfec2af194a0e4b5
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerHeldItemChangeEvent.java
@@ -0,0 +1,74 @@
+package com.destroystokyo.paper.event.player;
+
+import org.bukkit.entity.Player;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.bukkit.inventory.ItemStack;
+
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Called when the item in a player's hand changes.
+ */
+public class PlayerHeldItemChangeEvent extends PlayerEvent {
+    private static final HandlerList HANDLERS = new HandlerList();
+
+    @NotNull private final boolean isMainHand;
+    @Nullable private final ItemStack oldItem;
+    @Nullable private final ItemStack newItem;
+
+    public PlayerHeldItemChangeEvent(@NotNull Player player, @NotNull boolean isMainHand, @Nullable ItemStack oldItem, @Nullable ItemStack newItem) {
+        super(player);
+        this.isMainHand = isMainHand;
+        this.oldItem = oldItem;
+        this.newItem = newItem;
+    }
+
+    /**
+     * Get's whether the item changed is in the player's main hand
+     *
+     * @return true if the item changed is in the player's main hand, false otherwise
+     */
+    @NotNull
+    public boolean isMainHand() {
+        return this.isMainHand;
+    }
+
+    /**
+     * Gets the existing item that's being replaced
+     *
+     * @return old item
+     */
+    @Nullable
+    public ItemStack getOldItem() {
+        return this.oldItem;
+    }
+
+    /**
+     * Gets the new item that's replacing the old
+     *
+     * @return new item
+     */
+    @Nullable
+    public ItemStack getNewItem() {
+        return this.newItem;
+    }
+
+    @Override
+    public String toString() {
+        return "PlayerHeldItemChangedEvent{" + "isMainHand=" + isMainHand + ", oldItem=" + oldItem + ", newItem=" + newItem + ", player=" + player + '}';
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLERS;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLERS;
+    }
+
+}
