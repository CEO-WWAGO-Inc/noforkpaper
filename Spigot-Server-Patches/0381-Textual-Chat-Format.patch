From 5576a212b26ed26a81c9a8f90a61de539c03f00c Mon Sep 17 00:00:00 2001
From: MiniDigger <mini.digger@live.de>
Date: Fri, 28 Sep 2018 09:15:15 +0000
Subject: [PATCH] Textual Chat Format


diff --git a/src/main/java/net/minecraft/server/TileEntitySign.java b/src/main/java/net/minecraft/server/TileEntitySign.java
old mode 100644
new mode 100755
index 20dc3f27..6f4a561d
--- a/src/main/java/net/minecraft/server/TileEntitySign.java
+++ b/src/main/java/net/minecraft/server/TileEntitySign.java
@@ -1,157 +1,157 @@
-package net.minecraft.server;
-
-import com.mojang.brigadier.exceptions.CommandSyntaxException;
-import javax.annotation.Nullable;
-
-public class TileEntitySign extends TileEntity implements ICommandListener {
-
-    public final IChatBaseComponent[] lines = new IChatBaseComponent[] { new ChatComponentText(""), new ChatComponentText(""), new ChatComponentText(""), new ChatComponentText("")};
-    public int e = -1;
-    public boolean isEditable = true;
-    private EntityHuman g;
-    private final String[] h = new String[4];
-
-    public TileEntitySign() {
-        super(TileEntityTypes.SIGN);
-    }
-
-    public NBTTagCompound save(NBTTagCompound nbttagcompound) {
-        super.save(nbttagcompound);
-
-        for (int i = 0; i < 4; ++i) {
-            String s = IChatBaseComponent.ChatSerializer.a(this.lines[i]);
-
-            nbttagcompound.setString("Text" + (i + 1), s);
-        }
-
-        // CraftBukkit start
-        if (Boolean.getBoolean("convertLegacySigns")) {
-            nbttagcompound.setBoolean("Bukkit.isConverted", true);
-        }
-        // CraftBukkit end
-
-        return nbttagcompound;
-    }
-
-    public void load(NBTTagCompound nbttagcompound) {
-        this.isEditable = false;
-        super.load(nbttagcompound);
-
-        // CraftBukkit start - Add an option to convert signs correctly
-        // This is done with a flag instead of all the time because
-        // we have no way to tell whether a sign is from 1.7.10 or 1.8
-
-        boolean oldSign = Boolean.getBoolean("convertLegacySigns") && !nbttagcompound.getBoolean("Bukkit.isConverted");
-
-        for (int i = 0; i < 4; ++i) {
-            String s = nbttagcompound.getString("Text" + (i + 1));
-            if (s != null && s.length() > 2048) {
-                s = "\"\"";
-            }
-
-            try {
-                //IChatBaseComponent ichatbasecomponent = IChatBaseComponent.ChatSerializer.a(s); // Paper - move down - the old format might throw a json error
-
-                if (oldSign && !isLoadingStructure) { // Paper - saved structures will be in the new format, but will not have isConverted
-                    lines[i] = org.bukkit.craftbukkit.util.CraftChatMessage.fromString(s)[0];
-                    continue;
-                }
-                // CraftBukkit end
-                IChatBaseComponent ichatbasecomponent = IChatBaseComponent.ChatSerializer.a(s); // Paper - after old sign
-
-                if (this.world instanceof WorldServer) {
-                    try {
-                        this.lines[i] = ChatComponentUtils.filterForDisplay(this.a((EntityPlayer) null), ichatbasecomponent, (Entity) null);
-                    } catch (CommandSyntaxException commandsyntaxexception) {
-                        this.lines[i] = ichatbasecomponent;
-                    }
-                } else {
-                    this.lines[i] = ichatbasecomponent;
-                }
-            } catch (com.google.gson.JsonParseException jsonparseexception) {
-                this.lines[i] = new ChatComponentText(s);
-            }
-
-            this.h[i] = null;
-        }
-
-    }
-
-    public void a(int i, IChatBaseComponent ichatbasecomponent) {
-        this.lines[i] = ichatbasecomponent;
-        this.h[i] = null;
-    }
-
-    @Nullable
-    public PacketPlayOutTileEntityData getUpdatePacket() {
-        return new PacketPlayOutTileEntityData(this.position, 9, this.aa_());
-    }
-
-    public NBTTagCompound aa_() {
-        return this.save(new NBTTagCompound());
-    }
-
-    public boolean isFilteredNBT() {
-        return true;
-    }
-
-    public boolean d() {
-        return this.isEditable;
-    }
-
-    public void a(EntityHuman entityhuman) {
-        this.g = entityhuman;
-    }
-
-    public EntityHuman e() {
-        return this.g;
-    }
-
-    public boolean b(EntityHuman entityhuman) {
-        IChatBaseComponent[] aichatbasecomponent = this.lines;
-        int i = aichatbasecomponent.length;
-
-        for (int j = 0; j < i; ++j) {
-            IChatBaseComponent ichatbasecomponent = aichatbasecomponent[j];
-            ChatModifier chatmodifier = ichatbasecomponent == null ? null : ichatbasecomponent.getChatModifier();
-
-            if (chatmodifier != null && chatmodifier.h() != null) {
-                ChatClickable chatclickable = chatmodifier.h();
-
-                if (chatclickable.a() == ChatClickable.EnumClickAction.RUN_COMMAND) {
-                    entityhuman.bK().getCommandDispatcher().a(this.a((EntityPlayer) entityhuman), chatclickable.b());
-                }
-            }
-        }
-
-        return true;
-    }
-
-    public void sendMessage(IChatBaseComponent ichatbasecomponent) {}
-
-    // CraftBukkit start
-    @Override
-    public org.bukkit.command.CommandSender getBukkitSender(CommandListenerWrapper wrapper) {
-        return wrapper.f() != null ? wrapper.f().getBukkitSender(wrapper) : new org.bukkit.craftbukkit.command.CraftBlockCommandSender(wrapper, this);
-    }
-    // CraftBukkit end
-
-    public CommandListenerWrapper a(@Nullable EntityPlayer entityplayer) {
-        String s = entityplayer == null ? "Sign" : entityplayer.getDisplayName().getString();
-        Object object = entityplayer == null ? new ChatComponentText("Sign") : entityplayer.getScoreboardDisplayName();
-
-        return new CommandListenerWrapper(this, new Vec3D((double) this.position.getX() + 0.5D, (double) this.position.getY() + 0.5D, (double) this.position.getZ() + 0.5D), Vec2F.a, (WorldServer) this.world, 2, s, (IChatBaseComponent) object, this.world.getMinecraftServer(), entityplayer);
-    }
-
-    public boolean a() {
-        return false;
-    }
-
-    public boolean b() {
-        return false;
-    }
-
-    public boolean B_() {
-        return false;
-    }
-}
+package net.minecraft.server;
+
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import javax.annotation.Nullable;
+
+public class TileEntitySign extends TileEntity implements ICommandListener {
+
+    public final IChatBaseComponent[] lines = new IChatBaseComponent[] { new ChatComponentText(""), new ChatComponentText(""), new ChatComponentText(""), new ChatComponentText("")};
+    public int e = -1;
+    public boolean isEditable = true;
+    private EntityHuman g;
+    private final String[] h = new String[4];
+
+    public TileEntitySign() {
+        super(TileEntityTypes.SIGN);
+    }
+
+    public NBTTagCompound save(NBTTagCompound nbttagcompound) {
+        super.save(nbttagcompound);
+
+        for (int i = 0; i < 4; ++i) {
+            String s = IChatBaseComponent.ChatSerializer.a(this.lines[i]);
+
+            nbttagcompound.setString("Text" + (i + 1), s);
+        }
+
+        // CraftBukkit start
+        if (Boolean.getBoolean("convertLegacySigns")) {
+            nbttagcompound.setBoolean("Bukkit.isConverted", true);
+        }
+        // CraftBukkit end
+
+        return nbttagcompound;
+    }
+
+    public void load(NBTTagCompound nbttagcompound) {
+        this.isEditable = false;
+        super.load(nbttagcompound);
+
+        // CraftBukkit start - Add an option to convert signs correctly
+        // This is done with a flag instead of all the time because
+        // we have no way to tell whether a sign is from 1.7.10 or 1.8
+
+        boolean oldSign = Boolean.getBoolean("convertLegacySigns") && !nbttagcompound.getBoolean("Bukkit.isConverted");
+
+        for (int i = 0; i < 4; ++i) {
+            String s = nbttagcompound.getString("Text" + (i + 1));
+            if (s != null && s.length() > 2048) {
+                s = "\"\"";
+            }
+
+            try {
+                //IChatBaseComponent ichatbasecomponent = IChatBaseComponent.ChatSerializer.a(s); // Paper - move down - the old format might throw a json error
+
+                if (oldSign && !isLoadingStructure) { // Paper - saved structures will be in the new format, but will not have isConverted
+                    lines[i] = org.bukkit.craftbukkit.util.CraftChatMessage.fromString(s)[0];
+                    continue;
+                }
+                // CraftBukkit end
+                IChatBaseComponent ichatbasecomponent = IChatBaseComponent.ChatSerializer.a(s); // Paper - after old sign
+
+                if (this.world instanceof WorldServer) {
+                    try {
+                        this.lines[i] = ChatComponentUtils.filterForDisplay(this.a((EntityPlayer) null), ichatbasecomponent, (Entity) null);
+                    } catch (CommandSyntaxException commandsyntaxexception) {
+                        this.lines[i] = ichatbasecomponent;
+                    }
+                } else {
+                    this.lines[i] = ichatbasecomponent;
+                }
+            } catch (com.google.gson.JsonParseException jsonparseexception) {
+                this.lines[i] = new ChatComponentText(s);
+            }
+
+            this.h[i] = null;
+        }
+
+    }
+
+    public void a(int i, IChatBaseComponent ichatbasecomponent) {
+        this.lines[i] = ichatbasecomponent;
+        this.h[i] = null;
+    }
+
+    @Nullable
+    public PacketPlayOutTileEntityData getUpdatePacket() {
+        return new PacketPlayOutTileEntityData(this.position, 9, this.aa_());
+    }
+
+    public NBTTagCompound aa_() {
+        return this.save(new NBTTagCompound());
+    }
+
+    public boolean isFilteredNBT() {
+        return true;
+    }
+
+    public boolean d() {
+        return this.isEditable;
+    }
+
+    public void a(EntityHuman entityhuman) {
+        this.g = entityhuman;
+    }
+
+    public EntityHuman e() {
+        return this.g;
+    }
+
+    public boolean b(EntityHuman entityhuman) {
+        IChatBaseComponent[] aichatbasecomponent = this.lines;
+        int i = aichatbasecomponent.length;
+
+        for (int j = 0; j < i; ++j) {
+            IChatBaseComponent ichatbasecomponent = aichatbasecomponent[j];
+            ChatModifier chatmodifier = ichatbasecomponent == null ? null : ichatbasecomponent.getChatModifier();
+
+            if (chatmodifier != null && chatmodifier.h() != null) {
+                ChatClickable chatclickable = chatmodifier.h();
+
+                if (chatclickable.a() == ChatClickable.EnumClickAction.RUN_COMMAND) {
+                    entityhuman.bK().getCommandDispatcher().a(this.a((EntityPlayer) entityhuman), chatclickable.b());
+                }
+            }
+        }
+
+        return true;
+    }
+
+    public void sendMessage(IChatBaseComponent ichatbasecomponent) {}
+
+    // CraftBukkit start
+    @Override
+    public org.bukkit.command.CommandSender getBukkitSender(CommandListenerWrapper wrapper) {
+        return wrapper.f() != null ? wrapper.f().getBukkitSender(wrapper) : new org.bukkit.craftbukkit.command.CraftBlockCommandSender(wrapper, this);
+    }
+    // CraftBukkit end
+
+    public CommandListenerWrapper a(@Nullable EntityPlayer entityplayer) {
+        String s = entityplayer == null ? "Sign" : entityplayer.getDisplayName().getString();
+        Object object = entityplayer == null ? new ChatComponentText("Sign") : entityplayer.getScoreboardDisplayName();
+
+        return new CommandListenerWrapper(this, new Vec3D((double) this.position.getX() + 0.5D, (double) this.position.getY() + 0.5D, (double) this.position.getZ() + 0.5D), Vec2F.a, (WorldServer) this.world, 2, s, (IChatBaseComponent) object, this.world.getMinecraftServer(), entityplayer);
+    }
+
+    public boolean a() {
+        return false;
+    }
+
+    public boolean b() {
+        return false;
+    }
+
+    public boolean B_() {
+        return false;
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/command/CraftBlockCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/CraftBlockCommandSender.java
old mode 100644
new mode 100755
index 701a57e0..5951c7d8
--- a/src/main/java/org/bukkit/craftbukkit/command/CraftBlockCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/CraftBlockCommandSender.java
@@ -1,5 +1,7 @@
 package org.bukkit.craftbukkit.command;
 
+import com.destroystokyo.paper.ComponentParser; // Paper
+
 import net.minecraft.server.CommandListenerWrapper;
 import net.minecraft.server.IChatBaseComponent;
 import net.minecraft.server.TileEntity;
@@ -38,6 +40,31 @@ public class CraftBlockCommandSender extends ServerCommandSender implements Bloc
         }
     }
 
+    // Paper start: textual chat format
+    // TODO fixme, allow to send actual chat 
+    @Override
+    public void sendRichMessage(String richMessage) {
+        sendMessage(ComponentParser.stripTokens(richMessage));
+    }
+
+    @Override
+    public void sendRichMessage(String richMessage, String... placeholders) {
+        sendMessage(ComponentParser.stripTokens(ComponentParser.handlePlaceholders(richMessage, placeholders)));
+    }
+
+    @Override
+    public void sendRichMessage(String richMessage, java.util.Map<String, String> placeholders) {
+        sendMessage(ComponentParser.stripTokens(ComponentParser.handlePlaceholders(richMessage, placeholders)));
+    }
+
+    @Override
+    public void sendRichMessage(String[] richMessages) {
+        for (String message : richMessages) {
+            sendRichMessage(message);
+        }
+    }
+    // Paper end
+
     public String getName() {
         return block.getName();
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/command/CraftConsoleCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/CraftConsoleCommandSender.java
old mode 100644
new mode 100755
index 9abcf92d..a54f70c2
--- a/src/main/java/org/bukkit/craftbukkit/command/CraftConsoleCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/CraftConsoleCommandSender.java
@@ -1,5 +1,7 @@
 package org.bukkit.craftbukkit.command;
 
+import com.destroystokyo.paper.ComponentParser; // Paper
+
 import org.bukkit.ChatColor;
 import org.bukkit.command.ConsoleCommandSender;
 import org.bukkit.conversations.Conversation;
@@ -32,6 +34,30 @@ public class CraftConsoleCommandSender extends ServerCommandSender implements Co
         }
     }
 
+    // Paper start: textual chat format
+    @Override
+    public void sendRichMessage(String richMessage) {
+        sendMessage(ComponentParser.stripTokens(richMessage));
+    }
+
+    @Override
+    public void sendRichMessage(String richMessage, String... placeholders) {
+        sendMessage(ComponentParser.stripTokens(ComponentParser.handlePlaceholders(richMessage, placeholders)));
+    }
+
+    @Override
+    public void sendRichMessage(String richMessage, java.util.Map<String, String> placeholders) {
+        sendMessage(ComponentParser.stripTokens(ComponentParser.handlePlaceholders(richMessage, placeholders)));
+    }
+
+    @Override
+    public void sendRichMessage(String[] richMessages) {
+        for (String message : richMessages) {
+            sendRichMessage(message);
+        }
+    }
+    // Paper end
+
     public String getName() {
         return "CONSOLE";
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java
old mode 100644
new mode 100755
index 228e88a6..8b5bb61c
--- a/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java
@@ -1,5 +1,7 @@
 package org.bukkit.craftbukkit.command;
 
+import com.destroystokyo.paper.ComponentParser; // Paper
+
 import net.minecraft.server.ChatComponentText;
 import net.minecraft.server.RemoteControlCommandListener;
 import org.bukkit.command.RemoteConsoleCommandSender;
@@ -24,6 +26,31 @@ public class CraftRemoteConsoleCommandSender extends ServerCommandSender impleme
         }
     }
 
+    // Paper start: textual chat format
+    // TODO fixme, allow to send actual chat 
+    @Override
+    public void sendRichMessage(String richMessage) {
+        sendMessage(ComponentParser.stripTokens(richMessage));
+    }
+
+    @Override
+    public void sendRichMessage(String richMessage, String... placeholders) {
+        sendMessage(ComponentParser.stripTokens(ComponentParser.handlePlaceholders(richMessage, placeholders)));
+    }
+
+    @Override
+    public void sendRichMessage(String richMessage, java.util.Map<String, String> placeholders) {
+        sendMessage(ComponentParser.stripTokens(ComponentParser.handlePlaceholders(richMessage, placeholders)));
+    }
+
+    @Override
+    public void sendRichMessage(String[] richMessages) {
+        for (String message : richMessages) {
+            sendRichMessage(message);
+        }
+    }
+    // Paper end
+
     @Override
     public String getName() {
         return "Rcon";
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java
old mode 100644
new mode 100755
index 7609e861..ff50882d
--- a/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java
@@ -48,6 +48,30 @@ public class ProxiedNativeCommandSender implements ProxiedCommandSender {
         getCaller().sendMessage(messages);
     }
 
+    // Paper start: textual chat format
+    @Override
+    public void sendRichMessage(String richMessage) {
+        getCaller().sendRichMessage(richMessage);
+    }
+
+    @Override
+    public void sendRichMessage(String richMessage, String... placeholders) {
+        getCaller().sendRichMessage(richMessage, placeholders);
+    }
+
+    @Override
+    public void sendRichMessage(String richMessage, java.util.Map<String, String> placeholders) {
+        getCaller().sendRichMessage(richMessage, placeholders);
+    }
+
+    @Override
+    public void sendRichMessage(String[] richMessages) {
+        for (String message : richMessages) {
+            sendRichMessage(message);
+        }
+    }
+    // Paper end
+
     @Override
     public Server getServer() {
         return getCallee().getServer();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index f4af6ea0..1c09e8f9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -626,6 +626,28 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     }
 
+    // Paper start: textual chat format
+    @Override
+    public void sendRichMessage(String richMessage) {
+
+    }
+
+    @Override
+    public void sendRichMessage(String richMessage, String... placeholders) {
+
+    }
+
+    @Override
+    public void sendRichMessage(String richMessage, java.util.Map<String, String> placeholders) {
+
+    }
+
+    @Override
+    public void sendRichMessage(String[] richMessages) {
+
+    }
+    // Paper end
+
     @Override
     public String getName() {
         return CraftChatMessage.fromComponent(getHandle().getDisplayName(), EnumChatFormat.WHITE);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
old mode 100644
new mode 100755
index bfb2f1a1..45264871
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
+import com.destroystokyo.paper.ComponentParser;
 import com.destroystokyo.paper.Title;
 import com.destroystokyo.paper.profile.CraftPlayerProfile;
 import com.destroystokyo.paper.profile.PlayerProfile;
@@ -225,6 +226,30 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
 
+    // Paper start: textual chat format
+    @Override
+    public void sendRichMessage(String richMessage) {
+        spigot().sendMessage(ComponentParser.parseFormat(richMessage));
+    }
+
+    @Override
+    public void sendRichMessage(String richMessage, String... placeholders) {
+        spigot().sendMessage(ComponentParser.parseFormat(richMessage, placeholders));
+    }
+
+    @Override
+    public void sendRichMessage(String richMessage, Map<String, String> placeholders) {
+        spigot().sendMessage(ComponentParser.parseFormat(richMessage, placeholders));
+    }
+
+    @Override
+    public void sendRichMessage(String[] richMessages) {
+        for (String message : richMessages) {
+            sendRichMessage(message);
+        }
+    }
+    // Paper end
+
     // Paper start
     @Override
     public void sendActionBar(String message) {
-- 
2.17.1

