From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lulu13022002 <41980282+Lulu13022002@users.noreply.github.com>
Date: Thu, 14 Jul 2022 16:05:30 +0200
Subject: [PATCH] Configurable restart and shutdown exit code


diff --git a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
index 456595e4b7e0c7f50617aa2694b0d2dfc368ab81..e45736a393fe146f4807bc36f8efaf7b2549c8e8 100644
--- a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
@@ -261,5 +261,6 @@ public class GlobalConfiguration extends ConfigurationPart {
         public boolean lagCompensateBlockBreaking = true;
         public boolean useDimensionTypeForCustomSpawners = false;
         public boolean strictAdvancementDimensionCheck = false;
+        public boolean predictShellOnRestart = true;
     }
 }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 081c7160cf727646cdec4cd551dbc2aad56326f6..7329f7bc6e8d5600ddcdd75c45e76b5af68f3589 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -296,7 +296,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public static long currentTickLong = 0L; // Paper
 
     public volatile Thread shutdownThread; // Paper
-    public volatile boolean abnormalExit = false; // Paper
+    public volatile int exitCode = 0; // Paper
     public boolean isIteratingOverLevels = false; // Paper
 
     public static <S extends MinecraftServer> S spin(Function<Thread, S> serverFactory) {
@@ -1042,6 +1042,12 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     public void halt(boolean flag) {
+        // Paper start - allow exit code
+        halt(flag, 0);
+    }
+    public void halt(boolean flag, int exitCode) {
+        this.exitCode = exitCode;
+        // Paper end
         // Paper start - allow passing of the intent to restart
         this.safeShutdown(flag, false);
     }
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index bdd6560fe85950b0a857a949cb38c044da44ca6b..feb5c5863e22bce9d6acb3065a893702f22074cc 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -438,7 +438,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         }
 
         hasFullyShutdown = true; // Paper
-        System.exit(this.abnormalExit ? 70 : 0); // CraftBukkit // Paper
+        System.exit(this.exitCode); // CraftBukkit // Paper
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 964ec590ef5302576ecb3ba2b8ea95dbc2acf103..da3891cc72e8b5a529c9934645576c1f39274f1e 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1740,7 +1740,12 @@ public final class CraftServer implements Server {
     public void shutdown() {
         this.console.halt(false);
     }
-
+    // Paper start
+    @Override
+    public void abnormalShutdown(int exitCode) {
+        this.console.halt(false, exitCode);
+    }
+    // Paper end
     @Override
     @Deprecated // Paper
     public int broadcast(String message, String permission) {
@@ -2735,7 +2740,12 @@ public final class CraftServer implements Server {
         public void restart() {
             org.spigotmc.RestartCommand.restart();
         }
-
+        // Paper start
+        @Override
+        public void restart(Runnable onRestart) {
+            org.spigotmc.RestartCommand.restart(onRestart);
+        }
+        // Paper end
         @Override
         public void broadcast(BaseComponent component) {
             for (Player player : CraftServer.this.getOnlinePlayers()) {
diff --git a/src/main/java/org/spigotmc/RestartCommand.java b/src/main/java/org/spigotmc/RestartCommand.java
index 160115bf8a153ff981ba308599d22c4c08026fb6..72fc549b187b20c5f3bdf7e7c1fadb7e828d35dc 100644
--- a/src/main/java/org/spigotmc/RestartCommand.java
+++ b/src/main/java/org/spigotmc/RestartCommand.java
@@ -65,6 +65,24 @@ public class RestartCommand extends Command
             ex.printStackTrace();
         }
     }
+    // Paper start - allow a different shutdown hook
+    public static void restart(final Runnable restartScript) {
+        AsyncCatcher.enabled = false; // Disable async catcher incase it interferes with us
+        org.spigotmc.AsyncCatcher.shuttingDown = true; // Paper
+        try {
+            // Paper - extract method and cleanup
+            addRawShutdownHook(restartScript);
+            System.out.println("Attempting to restart with a plugin custom hook");
+            // Stop the watchdog
+            WatchdogThread.doStop();
+
+            shutdownServer(true);
+            // Paper end
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+    }
+    // Paper end
 
     // Paper start - sync copied from above with minor changes, async added
     private static void shutdownServer(boolean isRestarting)
@@ -144,13 +162,10 @@ public class RestartCommand extends Command
         String[] split = restartScript.split( " " );
         if ( split.length > 0 && new File( split[0] ).isFile() )
         {
-            Thread shutdownHook = new Thread()
-            {
-                @Override
-                public void run()
-                {
+            addRawShutdownHook(() -> {
                     try
                     {
+                    if (io.papermc.paper.configuration.GlobalConfiguration.get().misc.predictShellOnRestart) {
                         String os = System.getProperty( "os.name" ).toLowerCase(java.util.Locale.ENGLISH);
                         if ( os.contains( "win" ) )
                         {
@@ -159,21 +174,25 @@ public class RestartCommand extends Command
                         {
                             Runtime.getRuntime().exec( "sh " + restartScript );
                         }
+                    } else {
+                        Runtime.getRuntime().exec(restartScript); // Paper - let java choose the right shell
+                    }
                     } catch ( Exception e )
                     {
                         e.printStackTrace();
                     }
-                }
-            };
-
-            shutdownHook.setDaemon( true );
-            Runtime.getRuntime().addShutdownHook( shutdownHook );
+            });
             return true;
         } else
         {
             return false;
         }
     }
+    public static void addRawShutdownHook(Runnable restart) {
+        Thread shutdownHook = new Thread(restart::run);
+        shutdownHook.setDaemon(true);
+        Runtime.getRuntime().addShutdownHook(shutdownHook);
+    }
     // Paper end
 
 }
diff --git a/src/main/java/org/spigotmc/WatchdogThread.java b/src/main/java/org/spigotmc/WatchdogThread.java
index d568fc92d03c313a782796cc720a1ebb1a5ad8be..acbffc4e5b702d6b0c791fba1c7dd8ded13d7355 100644
--- a/src/main/java/org/spigotmc/WatchdogThread.java
+++ b/src/main/java/org/spigotmc/WatchdogThread.java
@@ -222,7 +222,7 @@ public class WatchdogThread extends Thread
                         RestartCommand.addShutdownHook( SpigotConfig.restartScript );
                     }
                     // try one last chance to safe shutdown on main incase it 'comes back'
-                    server.abnormalExit = true;
+                    server.exitCode = 70;
                     server.safeShutdown(false, restart);
                     try {
                         Thread.sleep(1000);
