From c896d823498f07c8b105f0f84936ff10cbf6736a Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Fri, 18 Mar 2016 20:16:03 -0400
Subject: [PATCH] Add World Util Methods

Methods that can be used for other patches to help improve logic.

diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index eb6f900c39..ef6a54bcae 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -635,6 +635,7 @@ public class Chunk implements IChunkAccess {
         }
     }
 
+    public final int getLightSubtracted(BlockPosition blockposition, int i) { return this.a(blockposition, i); } // Paper - OBFHELPER
     public int a(BlockPosition blockposition, int i) {
         return this.a(blockposition, i, this.world.o().g());
     }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index e0fe05a0b1..72c0c92ec1 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -81,7 +81,7 @@ public abstract class World implements GeneratorAccess, IIBlockAccess, AutoClose
     public final List<Entity> k = Lists.newArrayList();
     protected final IntHashMap<Entity> entitiesById = new IntHashMap();
     private final long G = 16777215L;
-    private int H;
+    private int H; public int getSkylightSubtracted() { return this.H; } public void setSkylightSubtracted(int value) { this.H = value;} // Paper - OBFHELPER
     protected int m = (new Random()).nextInt();
     protected final int n = 1013904223;
     protected float o;
@@ -273,6 +273,63 @@ public abstract class World implements GeneratorAccess, IIBlockAccess, AutoClose
         return this.getType(blockposition).isAir();
     }
 
+    // Paper start
+    public Chunk getChunkIfLoaded(BlockPosition blockposition) {
+        return ((ChunkProviderServer) this.chunkProvider).getChunkIfLoaded(blockposition.getX() >> 4, blockposition.getZ() >> 4);
+    }
+    // test if meets light level, return faster
+    // logic copied from below
+    public boolean isLightLevel(BlockPosition blockposition, int level) {
+        if (isValidLocation(blockposition)) {
+            if (this.getType(blockposition).c(this, blockposition)) {
+                int sky = getSkylightSubtracted();
+                if (this.getLightLevel(blockposition.up(), sky) >= level) {
+                    return true;
+                }
+                if (this.getLightLevel(blockposition.east(), sky) >= level) {
+                    return true;
+                }
+                if (this.getLightLevel(blockposition.west(), sky) >= level) {
+                    return true;
+                }
+                if (this.getLightLevel(blockposition.south(), sky) >= level) {
+                    return true;
+                }
+                if (this.getLightLevel(blockposition.north(), sky) >= level) {
+                    return true;
+                }
+                return false;
+            } else {
+                if (blockposition.getY() >= 256) {
+                    blockposition = new BlockPosition(blockposition.getX(), 255, blockposition.getZ());
+                }
+
+                Chunk chunk = this.getChunkAtWorldCoords(blockposition);
+                return chunk.getLightSubtracted(blockposition, this.getSkylightSubtracted()) >= level;
+            }
+        } else {
+            return true;
+        }
+    }
+    //  reduces need to do isLoaded before getType
+    public IBlockData getTypeIfLoaded(BlockPosition blockposition) {
+        // CraftBukkit start - tree generation
+        if (captureTreeGeneration) {
+            for (CraftBlockState previous : capturedBlockStates) {
+                if (previous.getX() == blockposition.getX() && previous.getY() == blockposition.getY() && previous.getZ() == blockposition.getZ()) {
+                    return previous.getHandle();
+                }
+            }
+        }
+        // CraftBukkit end
+        Chunk chunk = this.getChunkIfLoaded(blockposition);
+        if (chunk != null) {
+            return isValidLocation(blockposition) ? chunk.getBlockData(blockposition) : Blocks.AIR.getBlockData();
+        }
+        return null;
+    }
+    // Paper end
+
     public Chunk getChunkAtWorldCoords(BlockPosition blockposition) {
         return this.getChunkAt(blockposition.getX() >> 4, blockposition.getZ() >> 4);
     }
-- 
2.18.0

