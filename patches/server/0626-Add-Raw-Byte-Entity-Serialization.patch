From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mariell Hoversholm <proximyst@proximyst.com>
Date: Sun, 24 Oct 2021 16:20:31 -0400
Subject: [PATCH] Add Raw Byte Entity Serialization

== AT ==
public net.minecraft.world.entity.Entity setLevel(Lnet/minecraft/world/level/Level;)V

Co-authored-by: SoSeDiK <mrsosedik@gmail.com>

diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 65ce8ab201e7e36f6d2637e906af325e11e425dd..9e7f5dab6ea019ae00463ffd9345ef120a51e181 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1058,6 +1058,24 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
     // Paper end - tracked players API
 
+    // Paper start - raw entity serialization API
+    @Override
+    public boolean spawnAt(Location location, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason reason) {
+        Preconditions.checkNotNull(location, "location cannot be null");
+        Preconditions.checkNotNull(reason, "reason cannot be null");
+        this.entity.setLevel(((CraftWorld) location.getWorld()).getHandle());
+        this.entity.setPos(location.getX(), location.getY(), location.getZ());
+        this.entity.setRot(location.getYaw(), location.getPitch());
+        boolean spawned = !this.entity.valid && this.entity.level().addFreshEntity(this.entity, reason);
+        if (spawned) {
+            for (org.bukkit.entity.Entity pass : getPassengers()) {
+                pass.spawnAt(getLocation());
+            }
+        }
+        return spawned;
+    }
+    // Paper end - raw entity serialization API
+
     // Paper start - missing entity api
     @Override
     public boolean isInvisible() {  // Paper - moved up from LivingEntity
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 2734f4187a4b92ef461e1f2fdae9139c6f54d8fc..a95a253a317233678f9d40b021f33d7bfc96ce04 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -532,6 +532,71 @@ public final class CraftMagicNumbers implements UnsafeValues {
         return compound;
     }
 
+    // Paper start - raw entity serialization API
+    @Override
+    public byte[] serializeEntity(org.bukkit.entity.Entity entity, io.papermc.paper.entity.EntitySerializationFlag... serializationFlags) {
+        Preconditions.checkNotNull(entity, "null cannot be serialized");
+        Preconditions.checkArgument(entity instanceof org.bukkit.craftbukkit.entity.CraftEntity, "Only CraftEntities can be serialized");
+
+        java.util.Set<io.papermc.paper.entity.EntitySerializationFlag> flags = java.util.Set.of(serializationFlags);
+        Preconditions.checkArgument(entity.isValid() || flags.contains(io.papermc.paper.entity.EntitySerializationFlag.FORCE), "Cannot serialize invalid entity without the FORCE flag");
+
+        net.minecraft.world.entity.Entity nmsEntity = ((org.bukkit.craftbukkit.entity.CraftEntity) entity).getHandle();
+        if (entity instanceof org.bukkit.entity.Player) {
+            Preconditions.checkArgument(flags.contains(io.papermc.paper.entity.EntitySerializationFlag.PLAYER), "Cannot serialize Players without the PLAYER flag");
+        } else {
+            Preconditions.checkArgument(nmsEntity.getType().canSerialize() || flags.contains(io.papermc.paper.entity.EntitySerializationFlag.MISC), String.format("Cannot serialize misc non-savable entity (%s) without the MISC flag", entity.getType().name()));
+        }
+
+        CompoundTag compound = new CompoundTag();
+        compound.putString(net.minecraft.world.entity.Entity.ID_TAG, net.minecraft.world.entity.EntityType.getKey(nmsEntity.getType()).toString());
+        if (flags.contains(io.papermc.paper.entity.EntitySerializationFlag.PASSENGERS)) {
+            nmsEntity.saveWithoutId(compound);
+        } else {
+            List<net.minecraft.world.entity.Entity> pass = new java.util.ArrayList<>(nmsEntity.getPassengers());
+            nmsEntity.passengers = com.google.common.collect.ImmutableList.of();
+            nmsEntity.saveWithoutId(compound);
+            nmsEntity.passengers = com.google.common.collect.ImmutableList.copyOf(pass);
+        }
+        return serializeNbtToBytes(compound);
+    }
+
+    @Override
+    public org.bukkit.entity.Entity deserializeEntity(byte[] data, org.bukkit.World world, boolean preserveUUID, boolean preservePassengers) {
+        Preconditions.checkNotNull(world, "World cannot be null");
+        Preconditions.checkNotNull(data, "null cannot be deserialized");
+        Preconditions.checkArgument(data.length > 0, "Cannot deserialize empty data");
+
+        CompoundTag compound = deserializeNbtFromBytes(data);
+        int dataVersion = compound.getInt("DataVersion");
+        compound = (CompoundTag) MinecraftServer.getServer().fixerUpper.update(References.ENTITY, new Dynamic<>(NbtOps.INSTANCE, compound), dataVersion, this.getDataVersion()).getValue();
+        if (!preservePassengers) {
+            compound.remove(net.minecraft.world.entity.Entity.PASSENGERS_TAG);
+        }
+        net.minecraft.world.entity.Entity nmsEntity = deserializeEntity(compound, ((org.bukkit.craftbukkit.CraftWorld) world).getHandle(), preserveUUID);
+        return nmsEntity.getBukkitEntity();
+    }
+
+    private net.minecraft.world.entity.Entity deserializeEntity(CompoundTag compound,  net.minecraft.server.level.ServerLevel world, boolean preserveUUID) {
+        if (!preserveUUID) {
+            compound.remove(net.minecraft.world.entity.Entity.UUID_TAG); // Generate a new UUID, so we don't have to worry about deserializing the same entity twice
+        }
+        net.minecraft.world.entity.Entity nmsEntity = net.minecraft.world.entity.EntityType.create(compound, world)
+            .orElseThrow(() -> new IllegalArgumentException("An ID was not found for the data. Did you downgrade?"));
+        if (compound.contains(net.minecraft.world.entity.Entity.PASSENGERS_TAG, Tag.TAG_LIST)) {
+            net.minecraft.nbt.ListTag passengersCompound = compound.getList(net.minecraft.world.entity.Entity.PASSENGERS_TAG, Tag.TAG_COMPOUND);
+            for (Tag tag : passengersCompound) {
+                if (!(tag instanceof CompoundTag serializedPassenger)) {
+                    continue;
+                }
+                net.minecraft.world.entity.Entity passengerEntity = deserializeEntity(serializedPassenger, world, preserveUUID);
+                passengerEntity.startRiding(nmsEntity, true);
+            }
+        }
+        return nmsEntity;
+    }
+    // Paper end - raw entity serialization API
+
     @Override
     public int nextEntityId() {
         return net.minecraft.world.entity.Entity.nextEntityId();
