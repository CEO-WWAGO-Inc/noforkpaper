From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Justin <justin@justinf.dev>
Date: Wed, 24 Aug 2022 05:17:20 -0700
Subject: [PATCH] Add Entity hidden by default flag

Adds a boolean to the server Entity controlling if the entity should be hidden by default.
The TrackedEntity maintains a set of all players that will be able to see the entity even
when it is hidden by default. This set is modified when Player#showEntity and Player#hideEntity
are invoked. Changes are made to the way that TrackedEntity updates players when the entity is
hidden by default - if a player is not present in the above set, the update is abandoned.

This functionality is expanded when a Player is hidden by default. The player will send out
PlayerInfo packets to hide themselves from other Players when hiddenByDefault. There remains a
discrepancy when trying to getHiddenPlayers - players that are hidden by default are currently
not returned from this method, only those hidden with hideEntity or hidePlayer.

Hiding entities by default also respects precedent of keeping entities hidden when other plugins
explicitly hide them from a player. If an entity is hidden by default and by a plugin, the entity
must have the plugin that hid them from a player show them in order to be shown to a player again.
If no plugin had previously hidden the entity before the entity was hidden by default, then any
plugin that attempts to show the entity to a player will succeed in doing so.

diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 77c89376495d90d0e7cbf6cd02c9a1c8d9a4340b..4e506395085fc597a0544830355d4490194706f0 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -2277,6 +2277,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         private final int range;
         SectionPos lastSectionPos;
         public final Set<ServerPlayerConnection> seenBy = new ReferenceOpenHashSet<>(); // Paper - optimise map impl
+        public final Set<ServerPlayerConnection> showToEvenWhenHiddenByDefault = new ReferenceOpenHashSet<>(); // Paper - Entity hiddenByDefault
 
         public TrackedEntity(Entity entity, int i, int j, boolean flag) {
             this.serverEntity = new ServerEntity(ChunkMap.this.level, entity, j, flag, this::broadcast, this.seenBy); // CraftBukkit
@@ -2385,6 +2386,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                     flag = false;
                 }
                 // CraftBukkit end
+
                 if (flag) {
                     if (this.seenBy.add(player.connection)) {
                         this.serverEntity.addPairing(player);
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index f925a8d550ecbf2044a37bfe58b30d6578c5f6af..20b2656086ba8e2e517ef0e2a6e417c068e22bc6 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -398,6 +398,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     @javax.annotation.Nullable
     private UUID originWorld;
     public boolean freezeLocked = false; // Paper - Freeze Tick Lock API
+    private boolean hiddenByDefault; // Paper - Entity hiddenByDefault
 
     public void setOrigin(@javax.annotation.Nonnull Location location) {
         this.origin = location.toVector();
@@ -4431,4 +4432,14 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         return ((ServerChunkCache) level.getChunkSource()).isPositionTicking(this);
     }
     // Paper end
+
+    // Paper start - Entity hiddenByDefault
+    public void setHiddenByDefault(boolean hiddenByDefault) {
+        this.hiddenByDefault = hiddenByDefault;
+    }
+
+    public boolean isHiddenByDefault() {
+        return this.hiddenByDefault;
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 6549ade8e19807c523e5a1dc68b66585aad438b1..bda909f2523ac8c3ee9b5f103e487523927a8bc7 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1355,4 +1355,25 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return !this.getHandle().level.noCollision(this.getHandle(), aabb);
     }
     // Paper End - Collision API
+
+    // Paper start - Entity hiddenByDefault
+    @Override
+    public void setHiddenByDefault(boolean hiddenByDefault) {
+        this.getHandle().setHiddenByDefault(hiddenByDefault);
+
+        // We need to update the players again
+        ChunkMap.TrackedEntity entityTracker = this.getHandle().tracker;
+
+        // If the entity is already hiddenByDefault, we reset our "show to" set to again hide the entity from all players that may be seeing the entity
+        // We also clear the "show to" set when we stop hiding by default
+        entityTracker.showToEvenWhenHiddenByDefault.clear();
+
+        entityTracker.updatePlayers(this.server.getHandle().getPlayers());
+    }
+
+    @Override
+    public boolean isHiddenByDefault() {
+        return this.getHandle().isHiddenByDefault();
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 067d64ce06f626ce90b3ccf608d98f3c64fce335..85b8866ef0b26a510022d6353511bfe423ab2ab7 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1721,6 +1721,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         ChunkMap tracker = ((ServerLevel) this.getHandle().level).getChunkSource().chunkMap;
         ChunkMap.TrackedEntity entry = tracker.entityMap.get(other.getId());
         if (entry != null) {
+            entry.showToEvenWhenHiddenByDefault.remove(this.getHandle().connection); // Paper - Entity hiddenByDefault
             entry.removePlayer(this.getHandle());
         }
 
@@ -1758,13 +1759,18 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         if (this.equals(entity)) return;
 
         Set<WeakReference<Plugin>> hidingPlugins = this.hiddenEntities.get(entity.getUniqueId());
-        if (hidingPlugins == null) {
-            return; // Entity isn't hidden
-        }
-        hidingPlugins.remove(CraftPlayer.getPluginWeakReference(plugin));
-        if (!hidingPlugins.isEmpty()) {
-            return; // Some other plugins still want the entity hidden
+        // Paper start - Entity hiddenByDefault
+        if (hidingPlugins != null) {
+            hidingPlugins.remove(CraftPlayer.getPluginWeakReference(plugin));
+            if (!hidingPlugins.isEmpty()) {
+                return; // Some other plugins still want the entity hidden
+            }
+        } else {
+            if (!entity.isHiddenByDefault() || ((CraftEntity) entity).getHandle().tracker.showToEvenWhenHiddenByDefault.contains(this.getHandle().connection)) {
+                return; // Entity isn't hidden
+            }
         }
+        // Paper end
         this.hiddenEntities.remove(entity.getUniqueId());
 
         // Paper start
@@ -1783,9 +1789,15 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
 
         ChunkMap.TrackedEntity entry = tracker.entityMap.get(other.getId());
-        if (entry != null && !entry.seenBy.contains(this.getHandle().connection)) {
-            entry.updatePlayer(this.getHandle());
+        // Paper start - Entity hiddenByDefault
+        if (entry != null) {
+            entry.showToEvenWhenHiddenByDefault.add(this.getHandle().connection);
+
+            if (!entry.seenBy.contains(this.getHandle().connection)) {
+                entry.updatePlayer(this.getHandle());
+            }
         }
+        // Paper end
     }
     // Paper start
     private void reregisterPlayer(ServerPlayer player) {
@@ -1843,7 +1855,15 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public boolean canSee(org.bukkit.entity.Entity entity) {
-        return !this.hiddenEntities.containsKey(entity.getUniqueId());
+        // Paper start - Entity hiddenByDefault
+        boolean shownWhenHiddenByDefault = true;
+
+        if (entity.isHiddenByDefault()) {
+            shownWhenHiddenByDefault = ((CraftEntity) entity).getHandle().tracker.showToEvenWhenHiddenByDefault.contains(this.getHandle().connection);
+        }
+
+        return !this.hiddenEntities.containsKey(entity.getUniqueId()) && shownWhenHiddenByDefault;
+        // Paper end
     }
 
     @Override
@@ -2892,6 +2912,27 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     // Paper end
 
+    // Paper start - Entity hiddenByDefault
+    @Override
+    public void setHiddenByDefault(boolean hiddenByDefault) {
+        // Update server lists
+        if (hiddenByDefault) {
+            server.getOnlinePlayers().stream()
+                .filter(entityPlayer -> entityPlayer != this)
+                .filter(entityPlayer -> entityPlayer.canSee(this))
+                .forEach(entityPlayer -> entityPlayer.getHandle().connection.send(new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.REMOVE_PLAYER, this.getHandle())));
+        } else {
+            server.getOnlinePlayers().stream()
+                .filter(entityPlayer -> entityPlayer != this)
+                .filter(entityPlayer -> !entityPlayer.canSee(this))
+                .forEach(entityPlayer -> entityPlayer.getHandle().connection.send(new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.ADD_PLAYER, this.getHandle())));
+        }
+
+        // Now, process trackers
+        super.setHiddenByDefault(hiddenByDefault);
+    }
+    // Paper end
+
     public Player.Spigot spigot()
     {
         return this.spigot;
