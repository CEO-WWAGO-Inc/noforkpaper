From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Phoenix616 <max@themoep.de>
Date: Mon, 28 Jun 2021 22:38:29 +0100
Subject: [PATCH] Rate options and timings for sensors and behaviors

This adds config options to specify the tick rate for sensors
 and behaviors of different entity types as well as timings
 for those in order to be able to have some metrics as to which
 ones might need tweaking.

diff --git a/src/main/java/co/aikar/timings/MinecraftTimings.java b/src/main/java/co/aikar/timings/MinecraftTimings.java
index 4bd813161a5d76a83cdbd0a9209b9ea9e60ffe1b..e2764186bd6b838ed5cd86c15597a08d079ef984 100644
--- a/src/main/java/co/aikar/timings/MinecraftTimings.java
+++ b/src/main/java/co/aikar/timings/MinecraftTimings.java
@@ -115,6 +115,14 @@ public final class MinecraftTimings {
         return Timings.ofSafe("Minecraft", "## tickEntity - " + entityType + " - " + type, tickEntityTimer);
     }
 
+    public static Timing getBehaviorTimings(String type) {
+        return Timings.ofSafe("## Behavior - " + type);
+    }
+
+    public static Timing getSensorTimings(String type, int rate) {
+        return Timings.ofSafe("## Sensor - " + type + " (Default rate: " + rate + ")");
+    }
+
     /**
      * Get a named timer for the specified tile entity type to track type specific timings.
      * @param entity
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java b/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
index 4ea437253539e3ee533ca9da77a337cbf4d1e807..07adec6ce15f9bf37863f881b4ed209520f339a2 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
@@ -13,6 +13,18 @@ public abstract class Behavior<E extends LivingEntity> implements BehaviorContro
     private long endTimestamp;
     private final int minDuration;
     private final int maxDuration;
+    // Paper start - configurable behavior tick rate and timings
+    private final String configKey;
+    private final co.aikar.timings.Timing timing;
+    public static String getConfigKey(String behaviorClass) {
+        String key = io.papermc.paper.util.ObfHelper.INSTANCE.deobfClassName(behaviorClass);
+        int lastSeparator = key.lastIndexOf('.');
+        if (lastSeparator != -1) {
+            key = key.substring(lastSeparator + 1);
+        }
+        return key.toLowerCase(java.util.Locale.ROOT);
+    }
+    // Paper end
 
     public Behavior(Map<MemoryModuleType<?>, MemoryStatus> requiredMemoryState) {
         this(requiredMemoryState, 60);
@@ -26,6 +38,10 @@ public abstract class Behavior<E extends LivingEntity> implements BehaviorContro
         this.minDuration = minRunTime;
         this.maxDuration = maxRunTime;
         this.entryCondition = requiredMemoryState;
+        // Paper start - configurable behavior tick rate and timings
+        this.configKey = getConfigKey(this.getClass().getName());
+        this.timing = co.aikar.timings.MinecraftTimings.getBehaviorTimings(configKey);
+        // Paper end
     }
 
     @Override
@@ -35,11 +51,19 @@ public abstract class Behavior<E extends LivingEntity> implements BehaviorContro
 
     @Override
     public final boolean tryStart(ServerLevel world, E entity, long time) {
+        // Paper start - behavior tick rate
+        int tickRate = java.util.Objects.requireNonNullElse(world.paperConfig().tickRates.behavior.get(entity.getType(), this.configKey), -1);
+        if (tickRate > -1 && time < this.endTimestamp + tickRate) {
+            return false;
+        }
+        // Paper end
         if (this.hasRequiredMemories(entity) && this.checkExtraStartConditions(world, entity)) {
             this.status = Behavior.Status.RUNNING;
             int i = this.minDuration + world.getRandom().nextInt(this.maxDuration + 1 - this.minDuration);
             this.endTimestamp = time + (long)i;
+            this.timing.startTiming(); // Paper - behavior timings
             this.start(world, entity, time);
+            this.timing.stopTiming(); // Paper - behavior timings
             return true;
         } else {
             return false;
@@ -51,11 +75,13 @@ public abstract class Behavior<E extends LivingEntity> implements BehaviorContro
 
     @Override
     public final void tickOrStop(ServerLevel world, E entity, long time) {
+        this.timing.startTiming(); // Paper - behavior timings
         if (!this.timedOut(time) && this.canStillUse(world, entity, time)) {
             this.tick(world, entity, time);
         } else {
             this.doStop(world, entity, time);
         }
+        this.timing.stopTiming(); // Paper - behavior timings
 
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/OneShot.java b/src/main/java/net/minecraft/world/entity/ai/behavior/OneShot.java
index dde5c53550ddbdfc8288f725468924b35ea5b05e..c5b6212ddebb6d7c66038ef39144a827df76d5f3 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/OneShot.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/OneShot.java
@@ -6,6 +6,20 @@ import net.minecraft.world.entity.ai.behavior.declarative.Trigger;
 
 public abstract class OneShot<E extends LivingEntity> implements BehaviorControl<E>, Trigger<E> {
     private Behavior.Status status = Behavior.Status.STOPPED;
+    // Paper start - configurable behavior tick rate and timings
+    private final String configKey;
+    private final co.aikar.timings.Timing timing;
+    private long lastRun;
+
+    public OneShot() {
+        this("unknown");
+    }
+
+    public OneShot(String configKey) {
+        this.configKey = configKey;
+        this.timing = co.aikar.timings.MinecraftTimings.getBehaviorTimings(configKey);
+    }
+    // Paper end
 
     @Override
     public final Behavior.Status getStatus() {
@@ -14,10 +28,22 @@ public abstract class OneShot<E extends LivingEntity> implements BehaviorControl
 
     @Override
     public final boolean tryStart(ServerLevel world, E entity, long time) {
+        // Paper start - behavior tick rate and timings
+        int tickRate = java.util.Objects.requireNonNullElse(world.paperConfig().tickRates.behavior.get(entity.getType(), this.configKey), -1);
+        if (tickRate > -1 && time < this.lastRun + tickRate) {
+            return false;
+        }
+        this.timing.startTiming();
+        // Paper end
         if (this.trigger(world, entity, time)) {
             this.status = Behavior.Status.RUNNING;
+            // Paper start - behavior tick rate and timings
+            this.lastRun = time;
+            this.timing.stopTiming();
+            // Paper end
             return true;
         } else {
+            this.timing.stopTiming(); // Paper - behavior timings
             return false;
         }
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder.java b/src/main/java/net/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder.java
index 6f323026b2d6fb5151e8b9dd9466e96eb026ccbd..4294b0e86884ba0f3cb497bfe877dcea14f48ab5 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/declarative/BehaviorBuilder.java
@@ -35,7 +35,15 @@ public class BehaviorBuilder<E extends LivingEntity, M> implements App<BehaviorB
 
     public static <E extends LivingEntity> OneShot<E> create(Function<BehaviorBuilder.Instance<E>, ? extends App<BehaviorBuilder.Mu<E>, Trigger<E>>> creator) {
         final BehaviorBuilder.TriggerWithResult<E, Trigger<E>> triggerWithResult = get(creator.apply(instance()));
-        return new OneShot<E>() {
+        // Paper start - configurable tick rates
+        java.lang.StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();
+        String callingClass = null;
+        if (stackTraceElements.length > 2) {
+            callingClass = stackTraceElements[2].getClassName();
+        }
+        final String configKey = callingClass == null ? "unknown" : net.minecraft.world.entity.ai.behavior.Behavior.getConfigKey(callingClass);
+        // Paper end
+        return new OneShot<E>(configKey) { // Paper
             @Override
             public boolean trigger(ServerLevel world, E entity, long time) {
                 Trigger<E> trigger = triggerWithResult.tryTrigger(world, entity, time);
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
index 7970eebbd6935402223e6bba962bb8ba7d861dfd..fcdb9bde8e1605e30dde3e580491522d4b62cdc0 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
@@ -19,8 +19,21 @@ public abstract class Sensor<E extends LivingEntity> {
     private static final TargetingConditions ATTACK_TARGET_CONDITIONS_IGNORE_INVISIBILITY_AND_LINE_OF_SIGHT = TargetingConditions.forCombat().range(16.0D).ignoreLineOfSight().ignoreInvisibilityTesting();
     private final int scanRate;
     private long timeToTick;
+    // Paper start - configurable sensor tick rate and timings
+    private final String configKey;
+    private final co.aikar.timings.Timing timing;
+    // Paper end
 
     public Sensor(int senseInterval) {
+        // Paper start - configurable sensor tick rate and timings
+        String key = io.papermc.paper.util.ObfHelper.INSTANCE.deobfClassName(this.getClass().getName());
+        int lastSeparator = key.lastIndexOf('.');
+        if (lastSeparator != -1) {
+            key = key.substring(lastSeparator + 1);
+        }
+        this.configKey = key.toLowerCase(java.util.Locale.ROOT);
+        this.timing = co.aikar.timings.MinecraftTimings.getSensorTimings(configKey, senseInterval);
+        // Paper end
         this.scanRate = senseInterval;
         this.timeToTick = (long)RANDOM.nextInt(senseInterval);
     }
@@ -31,8 +44,12 @@ public abstract class Sensor<E extends LivingEntity> {
 
     public final void tick(ServerLevel world, E entity) {
         if (--this.timeToTick <= 0L) {
-            this.timeToTick = (long)this.scanRate;
+            // Paper start - configurable sensor tick rate and timings
+            this.timeToTick = java.util.Objects.requireNonNullElse(world.paperConfig().tickRates.sensor.get(entity.getType(), this.configKey), this.scanRate);
+            this.timing.startTiming();
+            // Paper end
             this.doTick(world, entity);
+            this.timing.stopTiming(); // Paper - sensor timings
         }
 
     }
