From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Owen1212055 <23108066+Owen1212055@users.noreply.github.com>
Date: Fri, 24 Dec 2021 23:24:11 -0500
Subject: [PATCH] Poi API


diff --git a/src/main/java/io/papermc/paper/world/poi/PaperPoiManager.java b/src/main/java/io/papermc/paper/world/poi/PaperPoiManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..6d8874bf20ca4f05786e81eeb5a3e650a8145341
--- /dev/null
+++ b/src/main/java/io/papermc/paper/world/poi/PaperPoiManager.java
@@ -0,0 +1,133 @@
+package io.papermc.paper.world.poi;
+
+import com.google.common.base.Predicates;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Registry;
+import net.minecraft.core.SectionPos;
+import net.minecraft.server.MCUtil;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.entity.ai.village.poi.PoiRecord;
+import net.minecraft.world.entity.ai.village.poi.PoiSection;
+import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.block.state.BlockState;
+import org.bukkit.Location;
+import org.bukkit.NamespacedKey;
+import org.bukkit.block.data.BlockData;
+import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Optional;
+import java.util.Set;
+import java.util.function.Predicate;
+
+public class PaperPoiManager implements PoiManager {
+
+    private final net.minecraft.world.entity.ai.village.poi.PoiManager poiManager;
+    private final ServerLevel level;
+
+    public PaperPoiManager(net.minecraft.world.entity.ai.village.poi.PoiManager poiManager) {
+        this.poiManager = poiManager;
+        this.level = this.poiManager.world;
+    }
+
+
+    @Override
+    public @Nullable PoiType getPoiType(BlockData blockData) {
+        var mcType = net.minecraft.world.entity.ai.village.poi.PoiType.forState(((CraftBlockData) blockData).getState());
+        if (mcType.isEmpty()) {
+            return null;
+        }
+
+        return getBukkit(mcType.get());
+    }
+
+    @Override
+    public @NotNull Set<BlockData> getBlockTypes(@NotNull PoiType poiType) {
+        Set<BlockState> stateSet = this.getHandle(poiType).matchingStates;
+        Set<BlockData> dataSet = new HashSet<>(stateSet.size());
+        for (BlockState state : stateSet) {
+            dataSet.add(CraftBlockData.fromData(state));
+        }
+
+        return dataSet;
+    }
+
+    @Override
+    public int getMaximumTickets(@NotNull PoiType poiType) {
+        return this.getHandle(poiType).getMaxTickets();
+    }
+
+    @Override
+    public int getPathFindMinDistance(@NotNull PoiType poiType) {
+        return this.getHandle(poiType).getValidRange();
+    }
+
+    @Override
+    public @NotNull Collection<RegisteredPoi> getPoisInChunk(int x, int z) {
+        return this.poiManager.getInChunk(Predicates.alwaysTrue(), new ChunkPos(x, z), net.minecraft.world.entity.ai.village.poi.PoiManager.Occupancy.ANY)
+            .map((poi) -> poi.getPaperPoi(level))
+            .toList();
+    }
+
+    @Override
+    public @NotNull Collection<RegisteredPoi> getPoisInRange(@NotNull Location location, int range) {
+        return this.poiManager.getInRange(Predicates.alwaysTrue(), MCUtil.toBlockPosition(location), range, net.minecraft.world.entity.ai.village.poi.PoiManager.Occupancy.ANY)
+            .map((poi) -> poi.getPaperPoi(level))
+            .toList();
+    }
+
+    @Override
+    public @Nullable RegisteredPoi getClosestPoi(@NotNull Location location, int range, @NotNull Predicate<PoiType> poiTypePredicate, @NotNull Predicate<Location> locationPredicate) {
+        BlockPos blockPos = this.poiManager.findClosest(
+                (type) -> poiTypePredicate.test(getBukkit(type)),
+                (pos) -> locationPredicate.test(MCUtil.toLocation(level, pos)),
+                MCUtil.toBlockPosition(location),
+                range,
+                net.minecraft.world.entity.ai.village.poi.PoiManager.Occupancy.HAS_SPACE)
+            .orElse(null);
+
+        if (blockPos == null) {
+            return null;
+        }
+
+        Optional<PoiSection> section = this.poiManager.getOrLoad(SectionPos.asLong(blockPos));
+        if (section.isEmpty()) {
+            return null;
+        }
+
+        Optional<PoiRecord> registeredPoi = section.get().getPoiRecord(MCUtil.toBlockPosition(location));
+        if (registeredPoi.isEmpty()) {
+            return null;
+        }
+
+        return registeredPoi.get().getPaperPoi(level);
+    }
+
+    @Override
+    public @Nullable RegisteredPoi getPoi(@NotNull Location location) {
+        Optional<PoiSection> section = this.poiManager.getOrLoad(SectionPos.asLong(location.getBlockX(), location.getBlockY(), location.getBlockZ()));
+
+        if (section.isEmpty()) {
+            return null;
+        }
+
+        Optional<PoiRecord> registeredPoi = section.get().getPoiRecord(MCUtil.toBlockPosition(location));
+        if (registeredPoi.isEmpty()) {
+            return null;
+        }
+
+        return registeredPoi.get().getPaperPoi(level);
+    }
+
+    private net.minecraft.world.entity.ai.village.poi.PoiType getHandle(PoiType type) {
+        return poiManager.world.registryAccess().registryOrThrow(Registry.POINT_OF_INTEREST_TYPE_REGISTRY).get(CraftNamespacedKey.toMinecraft(type.getKey()));
+    }
+
+    static PoiType getBukkit(net.minecraft.world.entity.ai.village.poi.PoiType type) {
+        return PoiType.getByKey(NamespacedKey.minecraft(type.getName()));
+    }
+}
diff --git a/src/main/java/io/papermc/paper/world/poi/PaperPoiSRecord.java b/src/main/java/io/papermc/paper/world/poi/PaperPoiSRecord.java
new file mode 100644
index 0000000000000000000000000000000000000000..90236499f44535d6fc7da498592ea945d9a762fd
--- /dev/null
+++ b/src/main/java/io/papermc/paper/world/poi/PaperPoiSRecord.java
@@ -0,0 +1,33 @@
+package io.papermc.paper.world.poi;
+
+import net.minecraft.server.MCUtil;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.entity.ai.village.poi.PoiRecord;
+import org.bukkit.Location;
+
+public class PaperPoiSRecord implements RegisteredPoi {
+
+    private final ServerLevel level;
+    private final PoiRecord record;
+
+    public PaperPoiSRecord(ServerLevel level, PoiRecord record) {
+        this.level = level;
+        this.record = record;
+    }
+
+    @Override
+    public Location getLocation() {
+        return MCUtil.toLocation(level, record.getPos());
+    }
+
+    @Override
+    public PoiType getType() {
+        return PaperPoiManager.getBukkit(record.getPoiType());
+    }
+
+    @SuppressWarnings("deprecation")
+    @Override
+    public int getTickets() {
+        return record.getFreeTickets();
+    }
+}
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiRecord.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiRecord.java
new file mode 100644
index 0000000000000000000000000000000000000000..e52674f60d1cd9799c62868f1636e91db4a654f5
--- /dev/null
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiRecord.java
@@ -0,0 +1,109 @@
+//
+// Source code recreated from a .class file by IntelliJ IDEA
+// (powered by FernFlower decompiler)
+//
+
+package net.minecraft.world.entity.ai.village.poi;
+
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import java.util.Objects;
+
+import io.papermc.paper.world.poi.PaperPoiSRecord;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Registry;
+import net.minecraft.util.VisibleForDebug;
+
+public class PoiRecord {
+    private final BlockPos pos;
+    private final PoiType poiType;
+    private int freeTickets;
+    private final Runnable setDirty;
+
+    public static Codec<PoiRecord> codec(Runnable updateListener) {
+        return RecordCodecBuilder.create((instance) -> {
+            return instance.group(BlockPos.CODEC.fieldOf("pos").forGetter((poi) -> {
+                return poi.pos;
+            }), Registry.POINT_OF_INTEREST_TYPE.byNameCodec().fieldOf("type").forGetter((poi) -> {
+                return poi.poiType;
+            }), Codec.INT.fieldOf("free_tickets").orElse(0).forGetter((poi) -> {
+                return poi.freeTickets;
+            }), RecordCodecBuilder.point(updateListener)).apply(instance, PoiRecord::new);
+        });
+    }
+
+    private PoiRecord(BlockPos pos, PoiType type, int freeTickets, Runnable updateListener) {
+        this.pos = pos.immutable();
+        this.poiType = type;
+        this.freeTickets = freeTickets;
+        this.setDirty = updateListener;
+    }
+
+    public PoiRecord(BlockPos pos, PoiType type, Runnable updateListener) {
+        this(pos, type, type.getMaxTickets(), updateListener);
+    }
+
+    /** @deprecated */
+    @Deprecated
+    @VisibleForDebug
+    public int getFreeTickets() {
+        return this.freeTickets;
+    }
+
+    protected boolean acquireTicket() {
+        if (this.freeTickets <= 0) {
+            return false;
+        } else {
+            --this.freeTickets;
+            this.setDirty.run();
+            return true;
+        }
+    }
+
+    protected boolean releaseTicket() {
+        if (this.freeTickets >= this.poiType.getMaxTickets()) {
+            return false;
+        } else {
+            ++this.freeTickets;
+            this.setDirty.run();
+            return true;
+        }
+    }
+
+    public boolean hasSpace() {
+        return this.freeTickets > 0;
+    }
+
+    public boolean isOccupied() {
+        return this.freeTickets != this.poiType.getMaxTickets();
+    }
+
+    public BlockPos getPos() {
+        return this.pos;
+    }
+
+    public PoiType getPoiType() {
+        return this.poiType;
+    }
+
+    @Override
+    public boolean equals(Object object) {
+        if (this == object) {
+            return true;
+        } else {
+            return object != null && this.getClass() == object.getClass() ? Objects.equals(this.pos, ((PoiRecord)object).pos) : false;
+        }
+    }
+
+    @Override
+    public int hashCode() {
+        return this.pos.hashCode();
+    }
+
+    // Paper Start - POI API
+    private io.papermc.paper.world.poi.RegisteredPoi paperPoi;
+    public io.papermc.paper.world.poi.RegisteredPoi getPaperPoi(net.minecraft.server.level.ServerLevel level) {
+        return new PaperPoiSRecord(level, this);
+    }
+    // Paper End - POI API
+}
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
index de94f25792261c6c89986ad3dee3255c2a89357b..e33dcc8fb783b07a97df6a2235dcd046f5691503 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
@@ -128,7 +128,7 @@ public class PoiSection {
         return this.getPoiRecord(pos).map(PoiRecord::getPoiType);
     }
 
-    private Optional<PoiRecord> getPoiRecord(BlockPos pos) {
+    public Optional<PoiRecord> getPoiRecord(BlockPos pos) {
         return Optional.ofNullable(this.records.get(SectionPos.sectionRelativePos(pos)));
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index ac41bc23d2f7e16bbacdc9b33fcf6c0d706fa023..5026db012f775913558b32b57eeed214826a260c 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -135,6 +135,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     private int waterUndergroundCreatureSpawn = -1;
     private int ambientSpawn = -1;
     private net.kyori.adventure.pointer.Pointers adventure$pointers; // Paper - implement pointers
+    private io.papermc.paper.world.poi.PoiManager poiManager; // Paper - POI API
 
     // Paper start - Provide fast information methods
     @Override
@@ -202,6 +203,15 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
         return this.getHandle().clip(new ClipContext(vec3d, vec3d1, ClipContext.Block.COLLIDER, ClipContext.Fluid.NONE, null)).getType() == HitResult.Type.MISS;
     }
+
+    @Override
+    public io.papermc.paper.world.poi.PoiManager getPoiManager() {
+        // Lazy load it cause chunkSource is null on initial load
+        if (poiManager == null) {
+            poiManager = new io.papermc.paper.world.poi.PaperPoiManager(world.chunkSource.chunkMap.getPoiManager());
+        }
+        return poiManager;
+    }
     // Paper end
 
     private static final Random rand = new Random();
