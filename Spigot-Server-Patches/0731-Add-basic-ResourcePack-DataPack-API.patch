From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Connor Linfoot <connorlinfoot@me.com>
Date: Sun, 16 May 2021 15:07:34 +0100
Subject: [PATCH] Add basic ResourcePack/DataPack API


diff --git a/src/main/java/io/papermc/paper/resource/PaperResourcePack.java b/src/main/java/io/papermc/paper/resource/PaperResourcePack.java
new file mode 100644
index 0000000000000000000000000000000000000000..7e41a850c49be0b3c3772ef9d362ae0d26531d56
--- /dev/null
+++ b/src/main/java/io/papermc/paper/resource/PaperResourcePack.java
@@ -0,0 +1,51 @@
+package io.papermc.paper.resource;
+
+import io.papermc.paper.event.server.ServerResourcesReloadedEvent;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.packs.repository.ResourcePackLoader;
+
+import java.util.List;
+import java.util.stream.Collectors;
+
+public class PaperResourcePack implements ResourcePack {
+    private final String name;
+    private final ResourcePackCompatibility compatibility;
+    private final boolean enabled;
+
+    PaperResourcePack(ResourcePackLoader loader, boolean enabled) {
+        this.name = loader.e();
+        this.compatibility = ResourcePackCompatibility.valueOf(loader.c().name());
+        this.enabled = enabled;
+    }
+
+    @Override
+    public String getName() {
+        return name;
+    }
+
+    @Override
+    public ResourcePackCompatibility getCompatibility() {
+        return compatibility;
+    }
+
+    @Override
+    public boolean isEnabled() {
+        return enabled;
+    }
+
+    @Override
+    public void setEnabled(boolean enabled) {
+        if (enabled == this.enabled) {
+            return;
+        }
+
+        MinecraftServer server = MinecraftServer.getServer();
+        List<String> enabledKeys = server.getResourcePackRepository().e().stream().map(ResourcePackLoader::e).collect(Collectors.toList());
+        if (enabled) {
+            enabledKeys.add(this.name);
+        } else {
+            enabledKeys.remove(this.name);
+        }
+        server.reloadServerResources(enabledKeys, ServerResourcesReloadedEvent.Cause.PLUGIN);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/resource/PaperResourcePackManager.java b/src/main/java/io/papermc/paper/resource/PaperResourcePackManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..aff39cff9170f93dc3c5cdabf3d8217a18ff0bdd
--- /dev/null
+++ b/src/main/java/io/papermc/paper/resource/PaperResourcePackManager.java
@@ -0,0 +1,26 @@
+package io.papermc.paper.resource;
+
+import net.minecraft.server.packs.repository.ResourcePackLoader;
+import net.minecraft.server.packs.repository.ResourcePackRepository;
+
+import java.util.Collection;
+import java.util.stream.Collectors;
+
+public class PaperResourcePackManager implements ResourcePackManager {
+    private final ResourcePackRepository repository;
+
+    public PaperResourcePackManager(ResourcePackRepository repository) {
+        this.repository = repository;
+    }
+
+    @Override
+    public Collection<ResourcePack> getPacks() {
+        Collection<ResourcePackLoader> enabledPacks = repository.e();
+        return repository.c().stream().map(loader -> new PaperResourcePack(loader, enabledPacks.contains(loader))).collect(Collectors.toList());
+    }
+
+    @Override
+    public Collection<ResourcePack> getEnabledPacks() {
+        return repository.e().stream().map(loader -> new PaperResourcePack(loader, true)).collect(Collectors.toList());
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 6cc8eb04f42592aa12f76bb4a0a863ea509741b2..d6514748e925b35b968711a8b02bb63a00cbdae3 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -18,6 +18,7 @@ import com.mojang.serialization.Lifecycle;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.Unpooled;
+import io.papermc.paper.resource.PaperResourcePackManager; // Paper
 import io.papermc.paper.util.TraceUtil;
 import it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap;
 import java.awt.image.BufferedImage;
@@ -268,6 +269,7 @@ public final class CraftServer implements Server {
     public boolean ignoreVanillaPermissions = false;
     private final List<CraftPlayer> playerView;
     public int reloadCount;
+    private final PaperResourcePackManager resourcePackManager; // Paper
     public static Exception excessiveVelEx; // Paper - Velocity warnings
 
     static {
@@ -350,6 +352,7 @@ public final class CraftServer implements Server {
         TicketType.PLUGIN.loadPeriod = Math.min(20, configuration.getInt("chunk-gc.period-in-ticks")); // Paper - cap plugin loads to 1 second
         minimumAPI = configuration.getString("settings.minimum-api");
         loadIcon();
+        resourcePackManager = new PaperResourcePackManager(console.getResourcePackRepository()); // Paper
     }
 
     public boolean getCommandBlockOverride(String command) {
@@ -2498,5 +2501,11 @@ public final class CraftServer implements Server {
     public com.destroystokyo.paper.entity.ai.MobGoals getMobGoals() {
         return mobGoals;
     }
+
+    @Override
+    public PaperResourcePackManager getResourcePackManager() {
+        return resourcePackManager;
+    }
+
     // Paper end
 }
