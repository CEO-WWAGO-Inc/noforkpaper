From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: vicisacat <victor.branchu@gmail.com>
Date: Fri, 17 Nov 2023 20:21:47 +0100
Subject: [PATCH] Add FluidState API


diff --git a/src/main/java/io/papermc/paper/block/fluid/FluidData.java b/src/main/java/io/papermc/paper/block/fluid/FluidData.java
new file mode 100644
index 0000000000000000000000000000000000000000..544c419efdb093e4309dacaa156d72870e45ee59
--- /dev/null
+++ b/src/main/java/io/papermc/paper/block/fluid/FluidData.java
@@ -0,0 +1,54 @@
+package io.papermc.paper.block.fluid;
+
+import org.bukkit.Fluid;
+import org.bukkit.Location;
+import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Range;
+
+public interface FluidData extends Cloneable {
+
+    /**
+     * Gets the fluid type of this fluid data.
+     *
+     * @return the fluid type
+     */
+    @NotNull Fluid getFluidType();
+
+    /**
+     * Returns a copy of this FluidData.
+     *
+     * @return a copy of the fluid data
+     */
+    @NotNull FluidData clone();
+
+    /**
+     * Returns the direction of the flow of the liquid at the given location as a vector.
+     *
+     * @param location - the location to check the liquid flow
+     * @return the flow direction vector at the given location
+     */
+    Vector getFlowDirection(Location location);
+
+    /**
+     * Returns the amount of liquid is in the fluid, as in the number of layers.
+     *
+     * @return the amount as an integer, between 0 and 8
+     */
+    @Range(from = 0, to = 8)
+    int getAmount();
+
+    /**
+     * Returns the height of the fluid in blocks
+     *
+     * @return the height as a float value, representing the height in blocks
+     */
+    float getHeight();
+
+    /**
+     * Returns whether this fluid is a source block
+     *
+     * @return true if the fluid is a source block, false otherwise
+     */
+    boolean isSource();
+}
diff --git a/src/main/java/io/papermc/paper/block/fluid/type/FallingFluid.java b/src/main/java/io/papermc/paper/block/fluid/type/FallingFluid.java
new file mode 100644
index 0000000000000000000000000000000000000000..360a27fca76b0e63aa458aa3425a987224a4ac79
--- /dev/null
+++ b/src/main/java/io/papermc/paper/block/fluid/type/FallingFluid.java
@@ -0,0 +1,13 @@
+package io.papermc.paper.block.fluid.type;
+
+import io.papermc.paper.block.fluid.FluidData;
+
+public interface FallingFluid extends FluidData {
+
+    /**
+     * Get if this liquid is falling.
+     *
+     * @return true if falling
+     */
+    boolean isFalling();
+}
diff --git a/src/main/java/io/papermc/paper/block/fluid/type/Flowing.java b/src/main/java/io/papermc/paper/block/fluid/type/Flowing.java
new file mode 100644
index 0000000000000000000000000000000000000000..14589b2de95e0f679fe9785e06648ace56449885
--- /dev/null
+++ b/src/main/java/io/papermc/paper/block/fluid/type/Flowing.java
@@ -0,0 +1,26 @@
+package io.papermc.paper.block.fluid.type;
+
+public interface Flowing extends FallingFluid {
+
+    /**
+     * Get the level of the flowing liquid.
+     *
+     * @return the level
+     */
+    int getLevel();
+
+    /**
+     * Get the minimum possible level for the liquid.
+     *
+     * @return the minimum level
+     */
+    int getMinimumLevel();
+
+    /**
+     * Get the maximum possible level for the liquid.
+     *
+     * @return the maximum level
+     */
+    int getMaximumLevel();
+
+}
diff --git a/src/main/java/org/bukkit/RegionAccessor.java b/src/main/java/org/bukkit/RegionAccessor.java
index cbb51dde78f792db4ddac43f144d23ff4b12d25f..49dacfa80dec3dc61d019694534da5c5f4b47857 100644
--- a/src/main/java/org/bukkit/RegionAccessor.java
+++ b/src/main/java/org/bukkit/RegionAccessor.java
@@ -103,6 +103,31 @@ public interface RegionAccessor extends Keyed { // Paper
     @NotNull
     BlockState getBlockState(int x, int y, int z);
 
+    // Paper start - FluidState API
+
+    /**
+     * Gets the {@link io.papermc.paper.block.fluid.FluidData} at the specified position.
+     *
+     * @param x The x-coordinate of the position
+     * @param y The y-coordinate of the position
+     * @param z The z-coordinate of the position
+     * @return The {@link io.papermc.paper.block.fluid.FluidData} at the specified position
+     */
+    @NotNull
+    io.papermc.paper.block.fluid.FluidData getFluidData(int x, int y, int z);
+
+    /**
+     * Gets the {@link io.papermc.paper.block.fluid.FluidData} at the given position
+     *
+     * @param position The location of the fluid
+     * @return The fluid data at the given position
+     */
+    @NotNull
+    default io.papermc.paper.block.fluid.FluidData getFluidData(io.papermc.paper.math.Position position) {
+        return getFluidData(position.blockX(), position.blockY(), position.blockZ());
+    };
+    // Paper end
+
     /**
      * Gets the {@link BlockData} at the given {@link Location}.
      *
