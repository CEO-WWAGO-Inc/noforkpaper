From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Fruxz <cedricspitzer@outlook.de>
Date: Wed, 30 Dec 2020 02:23:06 +0100
Subject: [PATCH] Added SoundBuilder


diff --git a/src/main/java/io/papermc/paper/sound/PaperSoundBuilder.java b/src/main/java/io/papermc/paper/sound/PaperSoundBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..4ca7845d55e3e45420d941193e30b2ac9df7e5c8
--- /dev/null
+++ b/src/main/java/io/papermc/paper/sound/PaperSoundBuilder.java
@@ -0,0 +1,234 @@
+package io.papermc.paper.sound;
+
+import com.google.common.collect.Lists;
+import net.minecraft.server.BaseBlockPosition;
+import net.minecraft.server.MinecraftKey;
+import net.minecraft.server.PacketPlayOutCustomSoundEffect;
+import net.minecraft.server.Vec3D;
+import org.bukkit.Location;
+import org.bukkit.Sound;
+import org.bukkit.SoundCategory;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.entity.Player;
+import org.bukkit.util.NumberConversions;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+public class PaperSoundBuilder implements SoundBuilder {
+
+    private Sound sound;
+    private SoundCategory category;
+    private Collection<Player> receivers;
+    private Location location;
+    private float volume = 1F;
+    private float pitch = 1F;
+
+    public PaperSoundBuilder(Sound sound) {
+        this.sound = sound;
+    }
+
+    public PaperSoundBuilder(Sound sound, float volume) {
+        this.sound = sound;
+        this.volume = volume;
+    }
+
+    public PaperSoundBuilder(Sound sound, Float volume, Float pitch) {
+        this.sound = sound;
+        this.volume = volume;
+        this.pitch = pitch;
+    }
+
+    public PaperSoundBuilder(Sound sound, SoundCategory category) {
+        this.sound = sound;
+        this.category = category;
+    }
+
+    public PaperSoundBuilder(Sound sound, SoundCategory category, Float volume) {
+        this.sound = sound;
+        this.category = category;
+        this.volume = volume;
+    }
+
+    public PaperSoundBuilder(Sound sound, SoundCategory category, Float volume, Float pitch) {
+        this.sound = sound;
+        this.category = category;
+        this.volume = volume;
+        this.pitch = pitch;
+    }
+
+    @Override
+    public PaperSoundBuilder play() {
+        if (this.location == null) {
+            throw new IllegalStateException("Please specify location for this sound");
+        }
+        if (this.category == null) {
+            throw new IllegalStateException("Please specify category for this sound");
+        }
+        if (receivers == null || receivers.isEmpty()) {
+            location.getWorld().playSound(location, sound, volume, pitch);
+        } else {
+            PacketPlayOutCustomSoundEffect customSoundEffect = new PacketPlayOutCustomSoundEffect(MinecraftKey.a(sound.getKey().getKey()), net.minecraft.server.SoundCategory.valueOf(category.name()), Vec3D.a(new BaseBlockPosition(location.getX(), location.getY(), location.getZ())), volume, pitch);
+            for (Player player : receivers) {
+                ((CraftPlayer) player).getHandle().playerConnection.sendPacket(customSoundEffect);
+            }
+        }
+        return this;
+    }
+
+    @Override
+    public Sound sound() {
+        return sound;
+    }
+
+    @Override
+    public PaperSoundBuilder sound(Sound sound) {
+        this.sound = sound;
+        return this;
+    }
+
+    @Override
+    public SoundCategory category() {
+        return category;
+    }
+
+    @Override
+    public PaperSoundBuilder category(SoundCategory category) {
+        this.category = category;
+        return this;
+    }
+
+    @Override
+    public float volume() {
+        return volume;
+    }
+
+    @Override
+    public PaperSoundBuilder volume(float volume) {
+        this.volume = volume;
+        return this;
+    }
+
+    @Override
+    public float pitch() {
+        return pitch;
+    }
+
+    @Override
+    public PaperSoundBuilder pitch(float pitch) {
+        this.pitch = pitch;
+        return this;
+    }
+
+    @Override
+    public List<Player> receivers() {
+        return new ArrayList<>(receivers);
+    }
+
+    @Override
+    public boolean hasReceivers() {
+        return (receivers == null && !location.getWorld().getPlayers().isEmpty()) || (
+            receivers != null && !receivers.isEmpty());
+    }
+
+    @Override
+    public PaperSoundBuilder allPlayers() {
+        this.receivers = null;
+        return this;
+    }
+
+    @Override
+    public PaperSoundBuilder receivers(Collection<Player> receivers) {
+        this.receivers = receivers != null ? Lists.newArrayList(receivers) : null;
+        return this;
+    }
+
+    @Override
+    public PaperSoundBuilder receivers(Player... receivers) {
+        this.receivers = receivers != null ? Lists.newArrayList(receivers) : null;
+        return this;
+    }
+
+    @Override
+    public PaperSoundBuilder receivers(int radius) {
+        return receivers(radius, radius);
+    }
+
+    @Override
+    public PaperSoundBuilder receivers(int radius, boolean byDistance) {
+        if (!byDistance) {
+            return receivers(radius, radius, radius);
+        } else {
+            this.receivers = Lists.newArrayList();
+            double radiusSquared = NumberConversions.square(radius);
+            for (Player nearbyPlayer : location.getWorld()
+                .getNearbyPlayers(location, radius, radius, radius)) {
+                Location loc = nearbyPlayer.getLocation();
+                double x = NumberConversions.square(location.getX() - loc.getX());
+                double y = NumberConversions.square(location.getY() - loc.getY());
+                double z = NumberConversions.square(location.getZ() - loc.getZ());
+                if (Math.sqrt(x + y + z) > radiusSquared) {
+                    continue;
+                }
+                this.receivers.add(nearbyPlayer);
+            }
+            return this;
+        }
+    }
+
+    @Override
+    public PaperSoundBuilder receivers(int xzRadius, int yRadius) {
+        return receivers(xzRadius, yRadius, xzRadius);
+    }
+
+    @Override
+    public PaperSoundBuilder receivers(int xzRadius, int yRadius, boolean byDistance) {
+        if (!byDistance) {
+            return receivers(xzRadius, yRadius, xzRadius);
+        } else {
+            this.receivers = Lists.newArrayList();
+            double xzRadiusSquare = NumberConversions.square(xzRadius);
+            for (Player nearbyPlayer : location.getWorld()
+                .getNearbyPlayers(location, xzRadius, yRadius, xzRadius)) {
+                Location loc = nearbyPlayer.getLocation();
+                if (Math.abs(loc.getY() - this.location.getY()) > yRadius) {
+                    continue;
+                }
+                double x = NumberConversions.square(location.getX() - loc.getX());
+                double z = NumberConversions.square(location.getZ() - loc.getZ());
+                if (x + z > xzRadiusSquare) {
+                    continue;
+                }
+                this.receivers.add(nearbyPlayer);
+            }
+            return this;
+        }
+    }
+
+    @Override
+    public PaperSoundBuilder receivers(int xRadius, int yRadius, int zRadius) {
+        if (location == null) {
+            throw new IllegalStateException("Please set location first");
+        }
+        return receivers(location.getWorld().getNearbyPlayers(location, xRadius, yRadius, zRadius));
+    }
+
+    @Override
+    public Location location() {
+        return location;
+    }
+
+    @Override
+    public PaperSoundBuilder location(Location location) {
+        this.location = location.clone();
+        return this;
+    }
+
+    @Override
+    public PaperSoundBuilder location(World world, double x, double y, double z) {
+        this.location = new Location(world, x, y, z);
+        return this;
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index dc7de2b59ec5ca3e5fba34dbb2aa2e6aed8f95cb..3f64b31c1a1470ee90669b095b7329d7a74aa19c 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -18,6 +18,8 @@ import com.mojang.serialization.Lifecycle;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.Unpooled;
+import io.papermc.paper.sound.PaperSoundBuilder; // Paper
+import io.papermc.paper.sound.SoundBuilder; // Paper
 import it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap;
 import java.awt.image.BufferedImage;
 import java.io.File;
@@ -115,6 +117,8 @@ import org.bukkit.Location;
 import org.bukkit.NamespacedKey;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.Server;
+import org.bukkit.Sound; // Paper
+import org.bukkit.SoundCategory; // Paper
 import org.bukkit.StructureType;
 import org.bukkit.UnsafeValues;
 import org.bukkit.Warning.WarningState;
@@ -1821,6 +1825,38 @@ public final class CraftServer implements Server {
         return new CraftMerchantCustom(title == null ? InventoryType.MERCHANT.getDefaultTitle() : title);
     }
 
+    // Paper start
+    @Override
+    public SoundBuilder createSoundBuilder(Sound sound) {
+        return new PaperSoundBuilder(sound);
+    }
+
+    @Override
+    public SoundBuilder createSoundBuilder(Sound sound, float volume) {
+        return new PaperSoundBuilder(sound, volume);
+    }
+
+    @Override
+    public SoundBuilder createSoundBuilder(Sound sound, float volume, float pitch) {
+        return new PaperSoundBuilder(sound, volume, pitch);
+    }
+
+    @Override
+    public SoundBuilder createSoundBuilder(Sound sound, SoundCategory category) {
+        return new PaperSoundBuilder(sound, category);
+    }
+
+    @Override
+    public SoundBuilder createSoundBuilder(Sound sound, SoundCategory category, float volume) {
+        return new PaperSoundBuilder(sound, category, volume);
+    }
+
+    @Override
+    public SoundBuilder createSoundBuilder(Sound sound, SoundCategory category, float volume, float pitch) {
+        return new PaperSoundBuilder(sound, category, volume, pitch);
+    }
+    // Paper end
+
     @Override
     public HelpMap getHelpMap() {
         return helpMap;
