From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ivan Pekov <ivan@mrivanplays.com>
Date: Mon, 1 Feb 2021 11:34:24 +0200
Subject: [PATCH] EntityExtinguishEvent


diff --git a/src/main/java/io/papermc/paper/event/entity/EntityExtinguishEvent.java b/src/main/java/io/papermc/paper/event/entity/EntityExtinguishEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..c1dbf794835342b1badb9192dd7dcffa05e2dca8
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/entity/EntityExtinguishEvent.java
@@ -0,0 +1,109 @@
+package io.papermc.paper.event.entity;
+
+import org.bukkit.entity.Entity;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.EntityEvent;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when an entity's fire is about to get extinguished
+ */
+public class EntityExtinguishEvent extends EntityEvent implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+    private boolean cancelled;
+    private int fireTicks;
+    private final Reason reason;
+
+    public EntityExtinguishEvent(@NotNull Entity what, int fireTicks, @NotNull Reason reason) {
+        super(what);
+        this.fireTicks = fireTicks;
+        this.reason = reason;
+    }
+
+    /**
+     * Returns the current entity fire ticks.
+     *
+     * @return fire ticks
+     */
+    public int getFireTicks() {
+        return fireTicks;
+    }
+
+    /**
+     * Sets new fire ticks.
+     *
+     * @param fireTicks new fire ticks
+     */
+    public void setFireTicks(int fireTicks) {
+        this.fireTicks = fireTicks;
+    }
+
+    /**
+     * Returns the reason of why the entity's getting extinguished
+     *
+     * @return reason
+     */
+    @NotNull
+    public Reason getReason() {
+        return reason;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = true;
+    }
+
+    @Override
+    @NotNull
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+    public enum Reason {
+        /**
+         * The entity has died.
+         */
+        DEATH,
+        /**
+         * The entity has collided with a block of cauldron filled with water.
+         */
+        COLLISION,
+        /**
+         * The fire has been stopped without any other actions (burn out).
+         */
+        BURN_OUT,
+        /**
+         * The entity got in water.
+         */
+        IN_WATER,
+        /**
+         * The entity got in rain.
+         */
+        IN_RAIN,
+        /**
+         * The entity got in a bubble column.
+         */
+        IN_BUBBLE,
+        /**
+         * The reason of why the entity gets extinguished is unknown.
+         */
+        UNKNOWN
+    }
+}
