From f6ab0bae99f01995af818ef09643897d52f3c5a0 Mon Sep 17 00:00:00 2001
From: kickash32 <kickash32@gmail.com>
Date: Tue, 11 Jun 2019 22:22:16 -0400
Subject: [PATCH] implement optional per player mob spawns


diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index 58109e13..01f5979f 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -509,4 +509,9 @@ public class PaperWorldConfig {
     private void maxAutoSaveChunksPerTick() {
         maxAutoSaveChunksPerTick = getInt("max-auto-save-chunks-per-tick", 24);
     }
+
+    public boolean perPlayerMobSpawns = false;
+    private void perPlayerMobSpawns() {
+        perPlayerMobSpawns = getBoolean("per-player-mob-spawns", false);
+    }
 }
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index e54a5e15..de59f0ef 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -442,8 +439,24 @@ public class ChunkProviderServer extends IChunkProvider {
                                 if (enumcreaturetype != EnumCreatureType.MISC && (!enumcreaturetype.c() || this.allowAnimals) && (enumcreaturetype.c() || this.allowMonsters) && (!enumcreaturetype.d() || flag2)) {
                                     int k1 = limit * l / ChunkProviderServer.b; // CraftBukkit - use per-world limits
 
-                                    if (object2intmap.getInt(enumcreaturetype) <= k1) {
-                                        SpawnerCreature.a(enumcreaturetype, (World) this.world, chunk, blockposition);
+                                    // Paper start - only allow spawns upto the limit per chunk and update count afterwards
+                                    int currEntityCount = object2intmap.getInt(enumcreaturetype);
+                                    int difference = k1 - currEntityCount;
+                                    if(this.world.paperConfig.perPlayerMobSpawns){
+                                        final int[] min = {Integer.MAX_VALUE};
+                                        final int finalLimit = limit;
+                                        playerChunkMap.getPlayersNear(chunk.getPos(), this.world.spigotConfig.mobSpawnRange)
+                                            .forEach((entityplayer) -> min[0] = Math.min(
+                                                finalLimit - ((WorldServer)chunk.getWorld()).getMobCountNear(entityplayer, enumcreaturetype),
+                                                min[0]));
+                                        difference = (min[0] == Integer.MAX_VALUE) ? 0 : min[0];
+                                    }
+
+                                    if (difference > 0) {
+                                        List spawned = SpawnerCreature.spawnMobs(enumcreaturetype, this.world, chunk, blockposition, difference);
+                                        object2intmap.put(enumcreaturetype, currEntityCount + spawned.size());
+                                        this.world.updatePlayerMobTypeMap(spawned);
+                                        // Paper end
                                     }
                                 }
                             }
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 8e16d6ac..55902bb9 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -105,6 +105,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         this.setViewDistance(i);
     }
 
+    private static double squareDist(ChunkCoordIntPair chunkcoord, Entity entity) { return a(chunkcoord, entity); } // Paper - OBFHELPER
     private static double a(ChunkCoordIntPair chunkcoordintpair, Entity entity) {
         double d0 = (double) (chunkcoordintpair.x * 16 + 8);
         double d1 = (double) (chunkcoordintpair.z * 16 + 8);
@@ -985,6 +986,15 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
     }
 
+    // Paper start
+    public Stream<EntityPlayer> getPlayersNear(ChunkCoordIntPair coordIntPair, int rangeChunks) {
+        int squareRangeBlocks = ((rangeChunks << 4) * (rangeChunks << 4));
+
+        return this.playerMap.getPlayers(coordIntPair.pair()).filter( (entityplayer) ->
+            (!entityplayer.isSpectator() && squareDist(coordIntPair, entityplayer) < squareRangeBlocks));
+    }
+    // Paper end
+
     @Override
     public Stream<EntityPlayer> a(ChunkCoordIntPair chunkcoordintpair, boolean flag) {
         return this.playerMap.a(chunkcoordintpair.pair()).filter((entityplayer) -> {
diff --git a/src/main/java/net/minecraft/server/PlayerMap.java b/src/main/java/net/minecraft/server/PlayerMap.java
index ad818178..0c8329bf 100644
--- a/src/main/java/net/minecraft/server/PlayerMap.java
+++ b/src/main/java/net/minecraft/server/PlayerMap.java
@@ -12,6 +12,7 @@ public final class PlayerMap {
 
     public PlayerMap() {}
 
+    public Stream<EntityPlayer> getPlayers(long chunkCoord) { return this.a(chunkCoord); } // Paper - OBFHELPER
     public Stream<EntityPlayer> a(long i) {
         return Streams.concat(new Stream[]{this.a.stream(), this.b.stream()});
     }
diff --git a/src/main/java/net/minecraft/server/SpawnerCreature.java b/src/main/java/net/minecraft/server/SpawnerCreature.java
index 09f1b9d7..118b7d56 100644
--- a/src/main/java/net/minecraft/server/SpawnerCreature.java
+++ b/src/main/java/net/minecraft/server/SpawnerCreature.java
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import java.util.ArrayList; // Paper
 import java.util.List;
 import java.util.Objects;
 import java.util.Random;
@@ -16,7 +17,13 @@ public final class SpawnerCreature {
 
     private static final Logger LOGGER = LogManager.getLogger();
 
+    // Paper start - add maxSpawns parameter and update counts
     public static void a(EnumCreatureType enumcreaturetype, World world, Chunk chunk, BlockPosition blockposition) {
+        spawnMobs(enumcreaturetype, world, chunk, blockposition, Integer.MAX_VALUE);
+    }
+    public static List<Entity> spawnMobs(EnumCreatureType enumcreaturetype, World world, Chunk chunk, BlockPosition blockposition, int maxSpawns) {
+        List<Entity> mobsSpawned = new ArrayList<>();
+        // Paper end
         ChunkGenerator<?> chunkgenerator = world.getChunkProvider().getChunkGenerator();
         int i = 0;
         BlockPosition blockposition1 = getRandomPosition(world, chunk);
@@ -85,7 +92,7 @@ public final class SpawnerCreature {
                                                         );
                                                         if (!event.callEvent()) {
                                                             if (event.shouldAbortSpawn()) {
-                                                                return;
+                                                                return mobsSpawned; // Paper
                                                             }
                                                             ++i2;
                                                             continue;
@@ -104,7 +111,7 @@ public final class SpawnerCreature {
                                                     } catch (Exception exception) {
                                                         SpawnerCreature.LOGGER.warn("Failed to create mob", exception);
                                                         ServerInternalException.reportInternalException(exception); // Paper
-                                                        return;
+                                                        return mobsSpawned; // Paper
                                                     }
 
                                                     entityinsentient.setPositionRotation((double) f, (double) k, (double) f1, world.random.nextFloat() * 360.0F, 0.0F);
@@ -114,10 +121,17 @@ public final class SpawnerCreature {
                                                         if (world.addEntity(entityinsentient, SpawnReason.NATURAL)) {
                                                             ++i;
                                                             ++i2;
+                                                        // Paper start - stop when limit is reached
+                                                            mobsSpawned.add(entityinsentient);
+                                                        }
+
+                                                        if (mobsSpawned.size() >= maxSpawns){
+                                                            return mobsSpawned;
                                                         }
+                                                        // Paper end
                                                         // CraftBukkit end
                                                         if (i >= entityinsentient.dD()) {
-                                                            return;
+                                                            return mobsSpawned; // Paper
                                                         }
 
                                                         if (entityinsentient.c(i2)) {
@@ -142,6 +156,7 @@ public final class SpawnerCreature {
 
             }
         }
+        return mobsSpawned;
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index ccc12952..42df9456 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -17,6 +17,8 @@ import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
+import java.util.ArrayList; // Paper
+import java.util.HashMap; // Paper
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -67,6 +69,7 @@ public class WorldServer extends World {
     private boolean ticking;
     @Nullable
     private final MobSpawnerTrader mobSpawnerTrader;
+    private Map<UUID, Map<EnumCreatureType, Integer>> playerMobTypeMap; // Paper
 
     // CraftBukkit start
     private int tickPosition;
@@ -847,6 +850,7 @@ public class WorldServer extends World {
     }
 
     public Object2IntMap<EnumCreatureType> l() {
+        List<Entity> filteredEntities = new ArrayList<>(); // Paper
         Object2IntMap<EnumCreatureType> object2intmap = new Object2IntOpenHashMap();
         ObjectIterator objectiterator = this.entitiesById.values().iterator();
 
@@ -867,13 +871,47 @@ public class WorldServer extends World {
 
                 if (enumcreaturetype != EnumCreatureType.MISC && this.getChunkProvider().b(entity)) {
                     object2intmap.mergeInt(enumcreaturetype, 1, Integer::sum);
+                    filteredEntities.add(entity); // Paper
                 }
             }
         }
 
+        // Paper start
+        if(this.paperConfig.perPlayerMobSpawns) {
+            this.playerMobTypeMap = new HashMap<>();
+            updatePlayerMobTypeMap(filteredEntities);
+        }
+        // Paper end
         return object2intmap;
     }
 
+    // Paper start
+    public void updatePlayerMobTypeMap(List<Entity> entities) {
+        if (this.playerMobTypeMap == null) { return; }
+        for (Entity entity : entities) {
+            ((ChunkProviderServer) this.chunkProvider).playerChunkMap.getPlayersNear(entity.getChunkAtLocation().getPos(), this.spigotConfig.mobSpawnRange).forEach( (player) -> {
+                if (!this.playerMobTypeMap.containsKey(player.uniqueID)) { this.playerMobTypeMap.put(player.uniqueID, new Object2IntOpenHashMap()); }
+                Map<EnumCreatureType, Integer> tmpMap = this.playerMobTypeMap.get(player.uniqueID);
+                EnumCreatureType enumType = entity.getEntityType().d();
+                tmpMap.put(
+                    enumType,
+                    tmpMap.getOrDefault(enumType, 0) + 1);
+            });
+        }
+    }
+
+    public int getMobCountNear(EntityPlayer entityPlayer, EnumCreatureType enumCreatureType) {
+        int count = 0;
+        if (this.playerMobTypeMap != null) {
+            Map<EnumCreatureType, Integer> map = this.playerMobTypeMap.get(entityPlayer.uniqueID);
+            if (map != null) {
+                count = map.getOrDefault(enumCreatureType, 0);
+            }
+        }
+        return count;
+    }
+    // Paper end
+
     @Override
     public boolean addEntity(Entity entity) {
         // CraftBukkit start
-- 
2.19.0

