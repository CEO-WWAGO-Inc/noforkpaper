From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: xDec0de_ <63256529+xdec0de@users.noreply.github.com>
Date: Thu, 3 Mar 2022 02:40:35 +0100
Subject: [PATCH] Add DispenserReplaceItemEvent

Currently handled for any bucket and bottle type, which should be all items that can be replaced on a dispenser as far as I know. This event could be used for servers with a rarity system on items (As mine), as currently I had to use the normal dispense event and delay 1 tick a loop through the dispenser inventory to change the item lore.

diff --git a/src/main/java/io/papermc/paper/event/block/DispenserReplaceItemEvent.java b/src/main/java/io/papermc/paper/event/block/DispenserReplaceItemEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..cd50b74e3cfa6c77b80dbbcc452b45324c93e155
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/block/DispenserReplaceItemEvent.java
@@ -0,0 +1,79 @@
+package io.papermc.paper.event.block;
+
+import org.bukkit.block.Block;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.block.BlockEvent;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when an item is replaced by other on a dispenser's inventory,
+ * meaning that it will be called when any bucket type or a glass bottle
+ * gets replaced by any other item upon a dispenser activation.
+ */
+public class DispenserReplaceItemEvent extends BlockEvent implements Cancellable {
+
+    private static final HandlerList handlers = new HandlerList();
+    private final ItemStack replaced;
+    private ItemStack replacement;
+    private boolean cancel = false;
+
+    public DispenserReplaceItemEvent(@NotNull Block block, @NotNull ItemStack replaced, @NotNull ItemStack replacement) {
+        super(block);
+        this.replaced = replaced;
+        this.replacement = replacement;
+    }
+
+    /**
+     * Gets the {@link ItemStack} that is being replaced.
+     * Modifying the returned item will have no effect.
+     *
+     * @return The item to be replaced.
+     */
+    @NotNull
+    public ItemStack getReplacedItem() {
+        return replaced.clone();
+    }
+
+    /**
+     * Gets the resulting {@link ItemStack}. Modifying
+     * the returned item will have no effect, you
+     * must use {@link #setReplacement(ItemStack)} instead.
+     *
+     * @return The resulting item.
+     */
+    @NotNull
+    public ItemStack getReplacement() {
+        return replacement.clone();
+    }
+
+    /**
+     * Sets the resulting item.
+     *
+     * @param replacement the new resulting item.
+     */
+    public void setReplacement(@NotNull ItemStack replacement) {
+        this.replacement = replacement;
+    }
+
+    @NotNull
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancel;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancel = cancel;
+    }
+}
