From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: NeonOverflow <nneonoverflow@protonmail.com>
Date: Thu, 13 Jan 2022 22:58:50 -0500
Subject: [PATCH] Added and implemented PlayerLootDropEvent.

As a result of how the PlayerDeathEvent was implemented, when a player dies their items are simply dropped
through the "world.dropItem()" method. This makes it very annoying for plugin developers to ultimately
track down the Item entities dropped when a player dies. This patch implements a "PlayerLootDropEvent",
making it easy for developers to track down the Item entities dropped when a player dies.

diff --git a/src/main/java/io/papermc/paper/event/player/PlayerLootDropEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerLootDropEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..a4a64aa9cc20b76d583effc34ea1a64158761721
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/player/PlayerLootDropEvent.java
@@ -0,0 +1,55 @@
+package io.papermc.paper.event.player;
+
+import java.util.List;
+import com.google.common.collect.ImmutableList;
+import org.bukkit.entity.Item;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Is called after a {@link org.bukkit.entity.Player} drops their {@link org.bukkit.entity.Item}s on death.
+ */
+public class PlayerLootDropEvent extends PlayerEvent implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+    private final List<Item> items;
+    private boolean cancel = false;
+
+    public PlayerLootDropEvent(@NotNull Player player, @NotNull List<Item> items) {
+        super(player);
+        this.items = items;
+    }
+
+    /**
+     * Gets the {@link org.bukkit.entity.Item}s dropped.
+     *
+     * @return an {@link ImmutableList} of the {@link org.bukkit.entity.Item}s dropped.
+     */
+    @NotNull
+    public ImmutableList<Item> getItems() {
+        return ImmutableList.copyOf(items);
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancel;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancel = cancel;
+    }
+
+    @Override
+    @NotNull
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
