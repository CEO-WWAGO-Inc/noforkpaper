From 5eeb2849363f22993a4b0b3fc3938cfa7f6e69eb Mon Sep 17 00:00:00 2001
From: miclebrick <miclebrick@outlook.com>
Date: Sat, 1 Sep 2018 12:28:16 -0400
Subject: [PATCH] Custom plugin advancement API


diff --git a/src/main/java/com/destroystokyo/paper/advancement/CraftAdvancementManager.java b/src/main/java/com/destroystokyo/paper/advancement/CraftAdvancementManager.java
new file mode 100644
index 000000000..5343a0c7e
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/advancement/CraftAdvancementManager.java
@@ -0,0 +1,107 @@
+package com.destroystokyo.paper.advancement;
+
+import com.google.common.collect.LinkedListMultimap;
+import com.google.common.collect.ListMultimap;
+import com.google.common.collect.Maps;
+import net.minecraft.server.Advancement;
+import net.minecraft.server.AdvancementDisplay;
+import net.minecraft.server.AdvancementFrameType;
+import net.minecraft.server.AdvancementRewards;
+import net.minecraft.server.ChatComponentText;
+import net.minecraft.server.CustomFunction;
+import net.minecraft.server.IChatBaseComponent;
+import net.minecraft.server.Item;
+import net.minecraft.server.ItemStack;
+import net.minecraft.server.MinecraftKey;
+import org.bukkit.Material;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.plugin.Plugin;
+
+import java.util.Map;
+import java.util.Set;
+
+public class CraftAdvancementManager implements AdvancementManager {
+    private ListMultimap<Plugin, AdvancementData> pluginAdvancements = LinkedListMultimap.create();
+
+    public static boolean needsReload = false;
+
+    @Override
+    public void clearAdvancements(Plugin plugin) {
+        pluginAdvancements.removeAll(plugin);
+        needsReload = true;
+    }
+
+    @Override
+    public void registerAdvancement(Plugin plugin, AdvancementData advancementData) {
+        pluginAdvancements.put(plugin, advancementData);
+        needsReload = true;
+    }
+
+    public void inject(Map<MinecraftKey, Advancement.SerializedAdvancement> advancements) {
+        pluginAdvancements.values().forEach(data -> {
+            try {
+                MinecraftKey key = fromMaterial(data.getKey());
+                Advancement.SerializedAdvancement value = fromPluginAdvancement(data);
+                advancements.put(key, value);
+            } catch (Exception exception) {
+                System.err.println("Failed to load plugin advancement " + data.getKey());
+                exception.printStackTrace();
+            }
+        });
+    }
+
+    private MinecraftKey fromMaterial(Material material) {
+        return Item.REGISTRY.b(CraftMagicNumbers.getItem(material));
+    }
+
+    private MinecraftKey[] fromMaterials(Set<Material> materials) {
+        return materials.stream().map(this::fromMaterial).toArray(MinecraftKey[]::new);
+    }
+
+    private Advancement.SerializedAdvancement fromPluginAdvancement(AdvancementData pluginAdvancement) {
+        MinecraftKey parentKey = null;
+        if (pluginAdvancement.getParent() != null) {
+            parentKey = fromMaterial(pluginAdvancement.getParent());
+        }
+
+        AdvancementData.AdvancementDisplay optionalDisplay = pluginAdvancement.getDisplay();
+        AdvancementDisplay mcDisplay = optionalDisplay == null ? null : convertDisplay(optionalDisplay);
+        
+        AdvancementRewards rewards = convertRewards(pluginAdvancement.getRewards());
+        // Parent is resolved in a later step in NMS, via Advancement.SerializedAdvancement#a(function<MinecraftKey, Advancement>)
+        return new Advancement.SerializedAdvancement(parentKey, mcDisplay, rewards, Maps.newHashMap(), new String[0][]);
+    }
+
+    private AdvancementDisplay convertDisplay(AdvancementData.AdvancementDisplay display) {
+        ItemStack mcItem = CraftItemStack.asNMSCopy(display.getIcon());
+        IChatBaseComponent mcTitle = new ChatComponentText(display.getTitle());
+        IChatBaseComponent mcDescription = new ChatComponentText(display.getDescription());
+        MinecraftKey background = fromMaterial(display.getBackground());
+        AdvancementFrameType frameType = convertFrameType(display.getFrameType());
+        return new AdvancementDisplay(mcItem, mcTitle, mcDescription, background, frameType, display.showToast(), display.announceToChat(), display.isHidden());
+    }
+
+    private AdvancementRewards convertRewards(AdvancementData.AdvancementRewards rewards) {
+        MinecraftKey[] loot = fromMaterials(rewards.getLoot());
+        MinecraftKey[] recipes = fromMaterials(rewards.getRecipes());
+        
+        MinecraftKey functionKey = fromMaterial(rewards.getCustomFunction());
+        CustomFunction.a customFunction = functionKey == null ? null : new CustomFunction.a(functionKey);
+
+        return new AdvancementRewards(rewards.getExperience(), loot, recipes, customFunction);
+    }
+
+    private AdvancementFrameType convertFrameType(AdvancementData.DisplayFrameType frameType) {
+        switch (frameType) {
+            case TASK:
+                return AdvancementFrameType.TASK;
+            case CHALLENGE:
+                return AdvancementFrameType.CHALLENGE;
+            case GOAL:
+                return AdvancementFrameType.GOAL;
+            default:
+                throw new IllegalArgumentException("Unknown frame type " + frameType);
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Advancement.java b/src/main/java/net/minecraft/server/Advancement.java
index 9d957f5ee..6bf32074b 100644
--- a/src/main/java/net/minecraft/server/Advancement.java
+++ b/src/main/java/net/minecraft/server/Advancement.java
@@ -128,7 +128,7 @@ public class Advancement {
         private final Map<String, Criterion> e;
         private final String[][] f;
 
-        SerializedAdvancement(@Nullable MinecraftKey minecraftkey, @Nullable AdvancementDisplay advancementdisplay, AdvancementRewards advancementrewards, Map<String, Criterion> map, String[][] astring) {
+        public SerializedAdvancement(@Nullable MinecraftKey minecraftkey, @Nullable AdvancementDisplay advancementdisplay, AdvancementRewards advancementrewards, Map<String, Criterion> map, String[][] astring) { // Paper - make it public for advancement API
             this.a = minecraftkey;
             this.c = advancementdisplay;
             this.d = advancementrewards;
diff --git a/src/main/java/net/minecraft/server/AdvancementDataWorld.java b/src/main/java/net/minecraft/server/AdvancementDataWorld.java
index db2a1d872..422f2a580 100644
--- a/src/main/java/net/minecraft/server/AdvancementDataWorld.java
+++ b/src/main/java/net/minecraft/server/AdvancementDataWorld.java
@@ -61,6 +61,7 @@ public class AdvancementDataWorld {
         AdvancementDataWorld.REGISTRY.a();
         Map map = this.d();
 
+        ((org.bukkit.craftbukkit.CraftServer) org.bukkit.Bukkit.getServer()).advancementManager.inject(map); // Paper - custom advancements API
         this.a(map);
         AdvancementDataWorld.REGISTRY.a(map);
         Iterator iterator = AdvancementDataWorld.REGISTRY.b().iterator();
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index e0546e3dd..f7db4b8ce 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -770,6 +770,9 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
             this.methodProfiler.a();
         }
 
+        if(com.destroystokyo.paper.advancement.CraftAdvancementManager.needsReload) {
+            server.reloadData(); // Paper - custom advancements API
+        }
         this.methodProfiler.a("root");
         this.D();
         if (i - this.Z >= 5000000000L) {
@@ -1663,6 +1666,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
             this.getAdvancementData().reload();
             this.aL().f();
             this.getPlayerList().reload();
+            com.destroystokyo.paper.advancement.CraftAdvancementManager.needsReload = false;
         } else {
             this.postToMainThread(this::reload);
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 9fe555986..f8159b8e6 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -170,6 +170,7 @@ public final class CraftServer implements Server {
     private WarningState warningState = WarningState.DEFAULT;
     private final BooleanWrapper online = new BooleanWrapper();
     public CraftScoreboardManager scoreboardManager;
+    public com.destroystokyo.paper.advancement.CraftAdvancementManager advancementManager = new com.destroystokyo.paper.advancement.CraftAdvancementManager(); // Paper - custom advancement API
     public boolean playerCommandState;
     private boolean printSaveWarning;
     private CraftIconCache icon;
@@ -1738,6 +1739,12 @@ public final class CraftServer implements Server {
         return scoreboardManager;
     }
 
+    // Paper start - custom advancement API
+    public com.destroystokyo.paper.advancement.CraftAdvancementManager getAdvancementManager() {
+        return advancementManager;
+    }
+    // Paper end
+
     public void checkSaveState() {
         if (this.playerCommandState || this.printSaveWarning || this.console.autosavePeriod <= 0) {
             return;
-- 
2.17.1

