From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Amin <amin.haddou@frg.wwschool.de>
Date: Wed, 22 Feb 2023 10:27:04 +0100
Subject: [PATCH] Piglin Dancing API


diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
index 48d0a4e42e1b90d1323784d1284acabfe9497dd6..c2d11d00eed5cb3c3c81e5e22af55d5318736e88 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
@@ -1,9 +1,7 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
-import java.util.Collections;
-import java.util.Set;
-import java.util.stream.Collectors;
+import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.item.Item;
 import org.bukkit.Material;
 import org.bukkit.craftbukkit.CraftServer;
@@ -13,6 +11,10 @@ import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Piglin;
 import org.bukkit.inventory.Inventory;
 
+import java.util.Collections;
+import java.util.Set;
+import java.util.stream.Collectors;
+
 public class CraftPiglin extends CraftPiglinAbstract implements Piglin, com.destroystokyo.paper.entity.CraftRangedEntity<net.minecraft.world.entity.monster.piglin.Piglin> { // Paper
 
     public CraftPiglin(CraftServer server, net.minecraft.world.entity.monster.piglin.Piglin entity) {
@@ -90,6 +92,7 @@ public class CraftPiglin extends CraftPiglinAbstract implements Piglin, com.dest
     public String toString() {
         return "CraftPiglin";
     }
+
     // Paper start
     @Override
     public void setChargingCrossbow(boolean chargingCrossbow) {
@@ -100,5 +103,26 @@ public class CraftPiglin extends CraftPiglinAbstract implements Piglin, com.dest
     public boolean isChargingCrossbow() {
         return this.getHandle().isChargingCrossbow();
     }
+
+    @Override
+    public void setDancing(boolean dancing) {
+        if (dancing) {
+            this.getHandle().getBrain().setMemory(MemoryModuleType.DANCING, true);
+            this.getHandle().getBrain().setMemory(MemoryModuleType.CELEBRATE_LOCATION, this.getHandle().getOnPos());
+        } else {
+            this.getHandle().getBrain().eraseMemory(MemoryModuleType.DANCING);
+        }
+    }
+
+    @Override
+    public void setDancing(int duration) {
+        this.getHandle().getBrain().setMemory(MemoryModuleType.DANCING, true);
+        this.getHandle().getBrain().setMemoryWithExpiry(MemoryModuleType.CELEBRATE_LOCATION, this.getHandle().getOnPos(), duration);
+    }
+
+    @Override
+    public boolean isDancing() {
+        return this.getHandle().isDancing();
+    }
     // Paper end
 }
