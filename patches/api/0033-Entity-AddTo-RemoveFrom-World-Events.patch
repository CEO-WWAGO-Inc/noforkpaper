From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Mon, 28 Mar 2016 20:26:34 -0400
Subject: [PATCH] Entity AddTo/RemoveFrom World Events


diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityAddToWorldEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityAddToWorldEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..1d8e3c93a139bba11affca74b742269f24300d2c
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityAddToWorldEvent.java
@@ -0,0 +1,45 @@
+package com.destroystokyo.paper.event.entity;
+
+import org.bukkit.World;
+import org.bukkit.entity.Entity;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.entity.EntityEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Fired any time an entity is being added to the world for any reason (including a chunk loading).
+ * <p>
+ * Not to be confused with {@link CreatureSpawnEvent}
+ */
+public class EntityAddToWorldEvent extends EntityEvent {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    @NotNull private final World world;
+
+    @ApiStatus.Internal
+    public EntityAddToWorldEvent(@NotNull Entity entity, @NotNull World world) {
+        super(entity);
+        this.world = world;
+    }
+
+    /**
+     * @return The world that the entity is being added to
+     */
+    @NotNull
+    public World getWorld() {
+        return this.world;
+    }
+
+    @NotNull
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityRemoveFromWorldEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityRemoveFromWorldEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..53288666e3f81f7063987cfc3ea3919c766bb3db
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityRemoveFromWorldEvent.java
@@ -0,0 +1,115 @@
+package com.destroystokyo.paper.event.entity;
+
+import org.bukkit.World;
+import org.bukkit.entity.Entity;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.EntityEvent;
+import org.bukkit.event.player.PlayerQuitEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Fired any time an entity is being removed from a world for any reason (including a chunk unloading).
+ * Note: The entity is updated prior to this event being called, as such, the entity's world may not be equal to {@link #getWorld()}.
+ */
+public class EntityRemoveFromWorldEvent extends EntityEvent {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    private final World world;
+    private final RemovalReason removalReason;
+
+    @ApiStatus.Internal
+    public EntityRemoveFromWorldEvent(@NotNull Entity entity, @NotNull World world, @NotNull RemovalReason removalReason) {
+        super(entity);
+
+        this.world = world;
+        this.removalReason = removalReason;
+    }
+
+    /**
+     * @return The world that the entity is being removed from
+     */
+    @NotNull
+    public World getWorld() {
+        return this.world;
+    }
+
+    /**
+     * Gets the reason the entity is being removed from the world.
+     * @return the removal reason
+     */
+    @NotNull
+    public RemovalReason getRemovalReason() {
+        return removalReason;
+    }
+
+    @NotNull
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+
+    public enum RemovalReason {
+
+        /**
+         * When an entity is removed after being killed.
+         */
+        KILLED(true, false),
+        /**
+         * When an entity is removed after being discarded, such as from despawning.
+         */
+        DISCARDED(true, false),
+        /**
+         * When an entity is removed after its containing chunk unloads.
+         */
+        UNLOADED_TO_CHUNK(false, true),
+        /**
+         * When a player and its vehicle/passengers are removed after a player quits.
+         */
+        UNLOADED_WITH_PLAYER(false, false),
+        /**
+         * When an entity is removed after moving to another world.
+         */
+        CHANGED_DIMENSION(false, false),
+        /**
+         * Used when the cause of a removal is unknown.
+         */
+        UNKNOWN(false, false);
+
+        private final boolean destroy;
+        private final boolean save;
+
+        RemovalReason(boolean destroy, boolean save) {
+            this.destroy = destroy;
+            this.save = save;
+        }
+
+        /**
+         * Whether the entity instance being removed will be destroyed.
+         *
+         * @return whether the entity will be destroyed
+         */
+        public boolean willDestroy() {
+            return this.destroy;
+        }
+
+        /**
+         * Whether the entity instance being removed will be saved. This does not account for the value of
+         * {@link Entity#isPersistent}. Entities removed with {@link RemovalReason#UNLOADED_WITH_PLAYER} are saved
+         * prior to the event firing, and thus should be modified prior to this using another event, such as
+         * with {@link PlayerQuitEvent}.
+         *
+         * @return whether the entity will be saved
+         */
+        public boolean willSave() {
+            return this.save;
+        }
+
+    }
+
+}
