From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lulu13022002 <41980282+Lulu13022002@users.noreply.github.com>
Date: Sat, 29 Oct 2022 15:41:56 +0200
Subject: [PATCH] Call missing BlockDispenseEvent


diff --git a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
index 415d387f8cfa3ae99b1c809233c86c18b76ad1e2..7092dcc5c5d25b352cf47b031d6c7039c4c27561 100644
--- a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
@@ -1106,6 +1106,13 @@ public interface DispenseItemBehavior {
                 this.setSuccess(true);
                 if (iblockdata.is(Blocks.RESPAWN_ANCHOR)) {
                     if ((Integer) iblockdata.getValue(RespawnAnchorBlock.CHARGE) != 4) {
+                        // Paper start
+                        ItemStack result = org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockDispenseEvent(pointer, blockposition, stack, this).result();
+                        if (result != null) {
+                            this.setSuccess(false);
+                            return result;
+                        }
+                        // Paper end
                         RespawnAnchorBlock.charge((Entity) null, worldserver, blockposition, iblockdata);
                         stack.shrink(1);
                     } else {
@@ -1128,6 +1135,13 @@ public interface DispenseItemBehavior {
                 Optional<BlockState> optional = HoneycombItem.getWaxed(iblockdata);
 
                 if (optional.isPresent()) {
+                    // Paper start
+                    ItemStack result = org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockDispenseEvent(pointer, blockposition, stack, this).result();
+                    if (result != null) {
+                        this.setSuccess(false);
+                        return result;
+                    }
+                    // Paper end
                     worldserver.setBlockAndUpdate(blockposition, (BlockState) optional.get());
                     worldserver.levelEvent(3003, blockposition, 0);
                     stack.shrink(1);
@@ -1153,6 +1167,12 @@ public interface DispenseItemBehavior {
                     if (!worldserver.getBlockState(blockposition1).is(BlockTags.CONVERTABLE_TO_MUD)) {
                         return this.defaultDispenseItemBehavior.dispense(pointer, stack);
                     } else {
+                        // Paper start
+                        ItemStack result = org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockDispenseEvent(pointer, blockposition1, stack, this).result();
+                        if (result != null) {
+                            return result;
+                        }
+                        // Paper end
                         if (!worldserver.isClientSide) {
                             for (int k = 0; k < 5; ++k) {
                                 worldserver.sendParticles(ParticleTypes.SPLASH, (double) blockposition.getX() + worldserver.random.nextDouble(), (double) (blockposition.getY() + 1), (double) blockposition.getZ() + worldserver.random.nextDouble(), 1, 0.0D, 0.0D, 0.0D, 1.0D);
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index d55e1611028a836a34dd85f08c4463f1ec15662e..6a1a2af8793d47d8b46f0d654eb98e168bba88d2 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -2098,6 +2098,36 @@ public class CraftEventFactory {
     }
     // Paper end
 
+    // Paper start - missing BlockDispenseEvent calls
+    public static DispenseResult handleBlockDispenseEvent(final net.minecraft.core.dispenser.BlockSource pointer, final BlockPos to, final ItemStack itemStack, final net.minecraft.core.dispenser.DispenseItemBehavior instance) {
+        return handleBlockDispenseEvent(pointer, to, itemStack, CraftVector.toBukkit(to), instance);
+    }
+    public static DispenseResult handleBlockDispenseEvent(final net.minecraft.core.dispenser.BlockSource pointer, final BlockPos to, final ItemStack itemStack, final Vector velocity, final net.minecraft.core.dispenser.DispenseItemBehavior instance) {
+        final Block bukkitBlock = CraftBlock.at(pointer.level(), pointer.pos());
+        final CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemStack.getMaxDamage() > 0 ? itemStack : itemStack.copyWithCount(1)); // ignore stack size on damageable items
+
+        final org.bukkit.event.block.BlockDispenseEvent event = new org.bukkit.event.block.BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(to.getX(), to.getY(), to.getZ()));
+        if (!net.minecraft.world.level.block.DispenserBlock.eventFired) {
+            if (!event.callEvent()) {
+                return new DispenseResult(true, itemStack);
+            }
+        }
+
+        if (!event.getItem().equals(craftItem)) {
+            // Chain to handler for new item
+            final ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+            final net.minecraft.core.dispenser.DispenseItemBehavior newDispenseBehavior = net.minecraft.world.level.block.DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+            if (newDispenseBehavior != net.minecraft.core.dispenser.DispenseItemBehavior.NOOP && newDispenseBehavior != instance) {
+                newDispenseBehavior.dispense(pointer, eventStack);
+                return new DispenseResult(false, itemStack);
+            }
+        }
+        return new DispenseResult(false, null);
+    }
+    public record DispenseResult(boolean cancelled, @Nullable ItemStack result) {
+    }
+    // Paper end - missing BlockDispenseEvent calls
+
     // Paper start - add EntityFertilizeEggEvent
     /**
      * Calls the io.papermc.paper.event.entity.EntityFertilizeEggEvent.
