From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mariell Hoversholm <proximyst@proximyst.com>
Date: Sun, 28 Jun 2020 01:59:01 +0200
Subject: [PATCH] Stuff


diff --git a/src/main/java/net/minecraft/server/BlockPosition.java b/src/main/java/net/minecraft/server/BlockPosition.java
index 52b2bff9ee3ccb4cea9549542b2b484685a70bfb..8f2b1c23a8ff444adec90240a3b1aec580db1fc6 100644
--- a/src/main/java/net/minecraft/server/BlockPosition.java
+++ b/src/main/java/net/minecraft/server/BlockPosition.java
@@ -238,54 +238,55 @@ public class BlockPosition extends BaseBlockPosition {
         };
     }
 
-    public static Iterable<BlockPosition> a(BlockPosition blockposition, int i, int j, int k) {
-        int l = i + j + k;
-        int i1 = blockposition.getX();
-        int j1 = blockposition.getY();
-        int k1 = blockposition.getZ();
+    public static Iterable<BlockPosition> iterateOutwards(BlockPosition pos, int i, int j, int k) { return a(pos, i, j, k); } // Paper - OBFHELPER - thanks yarn
+    public static Iterable<BlockPosition> a(BlockPosition sourcePos, int i, int j, int k) {
+        final int l = i + j + k;
+        final int origX = sourcePos.getX();
+        final int origY = sourcePos.getY();
+        final int origZ = sourcePos.getZ();
 
         return () -> {
             return new AbstractIterator<BlockPosition>() {
-                private final BlockPosition.MutableBlockPosition h = new BlockPosition.MutableBlockPosition();
-                private int i;
-                private int j;
-                private int k;
-                private int l;
-                private int m;
+                private final BlockPosition.MutableBlockPosition currentPos = new BlockPosition.MutableBlockPosition();
+                private int manhattanDistance;
+                private int limitX;
+                private int limitY;
+                private int dx;
+                private int dy;
                 private boolean n;
 
                 protected BlockPosition computeNext() {
                     if (this.n) {
                         this.n = false;
-                        this.h.q(k1 - (this.h.getZ() - k1));
-                        return this.h;
+                        this.currentPos.q(i - (this.currentPos.getZ() - i));
+                        return this.currentPos;
                     } else {
                         BlockPosition.MutableBlockPosition blockposition_mutableblockposition;
 
-                        for (blockposition_mutableblockposition = null; blockposition_mutableblockposition == null; ++this.m) {
-                            if (this.m > this.k) {
-                                ++this.l;
-                                if (this.l > this.j) {
-                                    ++this.i;
-                                    if (this.i > l) {
+                        for (blockposition_mutableblockposition = null; blockposition_mutableblockposition == null; ++this.dy) {
+                            if (this.dy > this.limitY) {
+                                ++this.dx;
+                                if (this.dx > this.limitX) {
+                                    ++this.manhattanDistance;
+                                    if (this.manhattanDistance > j) {
                                         return (BlockPosition) this.endOfData();
                                     }
 
-                                    this.j = Math.min(i, this.i);
-                                    this.l = -this.j;
+                                    this.limitX = Math.min(k, this.manhattanDistance);
+                                    this.dx = -this.limitX;
                                 }
 
-                                this.k = Math.min(j, this.i - Math.abs(this.l));
-                                this.m = -this.k;
+                                this.limitY = Math.min(l, this.manhattanDistance - Math.abs(this.dx));
+                                this.dy = -this.limitY;
                             }
 
-                            int l1 = this.l;
-                            int i2 = this.m;
-                            int j2 = this.i - Math.abs(l1) - Math.abs(i2);
+                            int ix = this.dx;
+                            int jx = this.dy;
+                            int kx = this.manhattanDistance - Math.abs(ix) - Math.abs(jx);
 
-                            if (j2 <= k) {
-                                this.n = j2 != 0;
-                                blockposition_mutableblockposition = this.h.d(i1 + l1, j1 + i2, k1 + j2);
+                            if (kx <= origX) {
+                                this.n = kx != 0;
+                                blockposition_mutableblockposition = this.currentPos.d(origY + ix, origZ + jx, i + kx);
                             }
                         }
 
