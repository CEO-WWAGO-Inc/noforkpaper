From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lulu13022002 <41980282+Lulu13022002@users.noreply.github.com>
Date: Sat, 9 Jul 2022 17:28:42 +0200
Subject: [PATCH] Add Offline PDC API


diff --git a/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java b/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
index 601f8099f74e81c17600566b3c9b7a6dd39c9bcb..bf7c29c481539d796521de725e17a58955410866 100644
--- a/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
+++ b/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
@@ -47,6 +47,22 @@ public class PlayerDataStorage {
         }
 
     }
+    // Paper start
+    public void save(java.util.UUID uuid, CompoundTag tag) {
+        if (org.spigotmc.SpigotConfig.disablePlayerDataSaving) return; // Spigot
+        try {
+            File file = File.createTempFile(uuid + "-", ".dat", this.playerDir);
+
+            NbtIo.writeCompressed(tag, file);
+            File file1 = new File(this.playerDir, uuid + ".dat");
+            File file2 = new File(this.playerDir, uuid + ".dat_old");
+
+            Util.safeReplaceFile(file1, file, file2);
+        } catch (Exception exception) {
+            PlayerDataStorage.LOGGER.warn("Failed to save offline player data for {}", uuid, exception); // Paper
+        }
+    }
+    // Paper end
 
     @Nullable
     public CompoundTag load(Player player) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
index 6d2ba650f53de8a460857f1846401a20b50cc43c..527e602ed47d11442b57eefbf3566b7793aa36db 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
@@ -304,6 +304,48 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
 
         return result;
     }
+
+    @Override
+    public org.bukkit.persistence.PersistentDataContainer getPersistentDataContainer() {
+        Player player = getPlayer();
+        if(player != null) return player.getPersistentDataContainer();
+
+        CompoundTag result = getData();
+        if(result == null) return null; // never called
+
+        org.bukkit.craftbukkit.persistence.CraftPersistentDataContainer pdc = new org.bukkit.craftbukkit.persistence.CraftPersistentDataContainer(org.bukkit.craftbukkit.entity.CraftEntity.DATA_TYPE_REGISTRY) {
+
+            private void save() {
+                if (!isEmpty()) {
+                    result.put("BukkitValues", toTagCompound());
+                } else {
+                    result.remove("BukkitValues");
+                }
+                storage.save(getUniqueId(), result);
+            }
+
+            @Override
+            public <T, Z> void set(org.bukkit.NamespacedKey key, org.bukkit.persistence.PersistentDataType<T, Z> type, Z value) {
+                super.set(key, type, value);
+                save();
+            }
+
+            @Override
+            public void remove(org.bukkit.NamespacedKey key) {
+                super.remove(key);
+                save();
+            }
+        };
+
+        if (result != null) {
+            net.minecraft.nbt.Tag base = result.get("BukkitValues");
+            if (base instanceof CompoundTag compound) {
+                pdc.putAll(compound);
+            }
+        }
+
+        return pdc;
+    }
     // Paper end
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 2a6c67634c31c332102d24bef293da1bacd0c000..424a5a8a8345c89dda54687aaf74be3b69f81ca3 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -190,7 +190,7 @@ import org.bukkit.util.Vector;
 
 public abstract class CraftEntity implements org.bukkit.entity.Entity {
     private static PermissibleBase perm;
-    private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
+    public static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry(); // Paper private -> public
 
     protected final CraftServer server;
     protected Entity entity;
