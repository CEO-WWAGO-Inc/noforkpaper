From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dmitry Sidorov <jonmagon@gmail.com>
Date: Tue, 2 Feb 2021 17:28:26 +0300
Subject: [PATCH] Add PlayerGlassBottleFillEvent


diff --git a/src/main/java/io/papermc/paper/event/player/PlayerGlassBottleFillEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerGlassBottleFillEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..c2a4554bd1f1b29e786d20e34d07272249b1c59b
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/player/PlayerGlassBottleFillEvent.java
@@ -0,0 +1,84 @@
+package io.papermc.paper.event.player;
+
+import org.bukkit.Material;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public class PlayerGlassBottleFillEvent extends PlayerEvent implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+
+    @NotNull
+    private final ItemStack item;
+    @NotNull
+    private ItemStack newitem;
+
+    private boolean cancelled;
+
+    public PlayerGlassBottleFillEvent(@NotNull final Player player, @NotNull final ItemStack item,
+                                      @NotNull final ItemStack newitem) {
+        super(player);
+        this.item = item;
+        this.newitem = newitem;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    /**
+     * Gets the existing item that's being replaced. Modifying the returned item will
+     * have no effect, you should use {@link
+     * #setNewItem(ItemStack)} instead.
+     *
+     * @return old item
+     */
+    @NotNull
+    public ItemStack getItem() {
+        return item.clone();
+    }
+
+    /**
+     * Gets the new item that's replacing the old
+     *
+     * @return new item
+     */
+    @NotNull
+    public ItemStack getNewItem() {
+        return newitem;
+    }
+
+    /**
+     * Set the new item that's replacing the old
+     *
+     * @param item the new item
+     */
+    public void setNewItem(@Nullable ItemStack item) {
+        if (item == null) {
+            this.newitem = new ItemStack(Material.AIR);
+        } else {
+            this.newitem = item;
+        }
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
