From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lukas Planz <lukas.planz@web.de>
Date: Sat, 14 Oct 2023 14:28:02 +0200
Subject: [PATCH] Add Grindstone experience reward API


diff --git a/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java b/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
index a21eadcdfbdc4be803c5793bc97996db3e706071..93f1ec2e492335c3862e07f33e38fb71e143c627 100644
--- a/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
@@ -36,7 +36,7 @@ public class GrindstoneMenu extends AbstractContainerMenu {
             return this.bukkitEntity;
         }
 
-        CraftInventoryGrindstone inventory = new CraftInventoryGrindstone(this.repairSlots, this.resultSlots);
+        CraftInventoryGrindstone inventory = new CraftInventoryGrindstone(this.repairSlots, this.resultSlots, this); // Paper
         this.bukkitEntity = new CraftInventoryView(this.player, inventory, this);
         return this.bukkitEntity;
     }
@@ -52,6 +52,7 @@ public class GrindstoneMenu extends AbstractContainerMenu {
     private final Container resultSlots;
     final Container repairSlots;
     private final ContainerLevelAccess access;
+    public int experienceReward = 0; // Paper
 
     public GrindstoneMenu(int syncId, Inventory playerInventory) {
         this(syncId, playerInventory, ContainerLevelAccess.NULL);
@@ -97,8 +98,9 @@ public class GrindstoneMenu extends AbstractContainerMenu {
             public void onTake(net.minecraft.world.entity.player.Player player, ItemStack stack) {
                 context.execute((world, blockposition) -> {
                     if (world instanceof ServerLevel) {
-                        ExperienceOrb.award((ServerLevel) world, Vec3.atCenterOf(blockposition), this.getExperienceAmount(world), org.bukkit.entity.ExperienceOrb.SpawnReason.GRINDSTONE, player); // Paper
+                        ExperienceOrb.award((ServerLevel) world, Vec3.atCenterOf(blockposition), experienceReward, org.bukkit.entity.ExperienceOrb.SpawnReason.GRINDSTONE, player); // Paper // Paper - calculate experience amount for event
                     }
+                    experienceReward = 0; // Paper
 
                     world.levelEvent(1042, blockposition, 0);
                 });
@@ -106,37 +108,7 @@ public class GrindstoneMenu extends AbstractContainerMenu {
                 GrindstoneMenu.this.repairSlots.setItem(1, ItemStack.EMPTY);
             }
 
-            private int getExperienceAmount(Level world) {
-                byte b0 = 0;
-                int j = b0 + this.getExperienceFromItem(GrindstoneMenu.this.repairSlots.getItem(0));
-
-                j += this.getExperienceFromItem(GrindstoneMenu.this.repairSlots.getItem(1));
-                if (j > 0) {
-                    int k = (int) Math.ceil((double) j / 2.0D);
-
-                    return k + world.random.nextInt(k);
-                } else {
-                    return 0;
-                }
-            }
-
-            private int getExperienceFromItem(ItemStack stack) {
-                int j = 0;
-                Map<Enchantment, Integer> map = EnchantmentHelper.getEnchantments(stack);
-                Iterator iterator = map.entrySet().iterator();
-
-                while (iterator.hasNext()) {
-                    Entry<Enchantment, Integer> entry = (Entry) iterator.next();
-                    Enchantment enchantment = (Enchantment) entry.getKey();
-                    Integer integer = (Integer) entry.getValue();
-
-                    if (!enchantment.isCurse()) {
-                        j += enchantment.getMinCost(integer);
-                    }
-                }
-
-                return j;
-            }
+            // Paper - moved down into parent class, diff on change
         });
 
         int j;
@@ -159,10 +131,44 @@ public class GrindstoneMenu extends AbstractContainerMenu {
         super.slotsChanged(inventory);
         if (inventory == this.repairSlots) {
             this.createResult();
+            experienceReward = this.access.evaluate((level, blockPos) -> getExperienceAmount(level), 0); // Paper - calculate experience for event
             org.bukkit.craftbukkit.event.CraftEventFactory.callPrepareResultEvent(this, RESULT_SLOT); // Paper
         }
 
     }
+    // Paper start - extracted from anonymous Slot class above
+    private int getExperienceAmount(Level world) {
+        byte b0 = 0;
+        int j = b0 + this.getExperienceFromItem(GrindstoneMenu.this.repairSlots.getItem(0));
+
+        j += this.getExperienceFromItem(GrindstoneMenu.this.repairSlots.getItem(1));
+        if (j > 0) {
+            int k = (int) Math.ceil((double) j / 2.0D);
+
+            return k + world.random.nextInt(k);
+        } else {
+            return 0;
+        }
+    }
+
+    private int getExperienceFromItem(ItemStack stack) {
+        int j = 0;
+        Map<Enchantment, Integer> map = EnchantmentHelper.getEnchantments(stack);
+        Iterator iterator = map.entrySet().iterator();
+
+        while (iterator.hasNext()) {
+            Entry<Enchantment, Integer> entry = (Entry) iterator.next();
+            Enchantment enchantment = (Enchantment) entry.getKey();
+            Integer integer = (Integer) entry.getValue();
+
+            if (!enchantment.isCurse()) {
+                j += enchantment.getMinCost(integer);
+            }
+        }
+
+        return j;
+    }
+    // Paper end
 
     private void createResult() {
         ItemStack itemstack = this.repairSlots.getItem(0);
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryGrindstone.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryGrindstone.java
index 9adf5a4440c75d1659693bfb4f8b492861ab0199..afb10e36da3a4766a1b8ad066c0dc4b5afef75c6 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryGrindstone.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryGrindstone.java
@@ -4,8 +4,22 @@ import net.minecraft.world.Container;
 import org.bukkit.inventory.GrindstoneInventory;
 
 public class CraftInventoryGrindstone extends CraftResultInventory implements GrindstoneInventory {
+    private final net.minecraft.world.inventory.GrindstoneMenu container; // Paper
 
-    public CraftInventoryGrindstone(Container inventory, Container resultInventory) {
+    public CraftInventoryGrindstone(Container inventory, Container resultInventory, net.minecraft.world.inventory.GrindstoneMenu container) { // Paper
         super(inventory, resultInventory);
+        this.container = container; // Paper
     }
+    // Paper start
+    @Override
+    public int getExperienceReward() {
+        return container.experienceReward;
+    }
+
+    @Override
+    public void setExperienceReward(final int experienceReward) {
+        com.google.common.base.Preconditions.checkArgument(experienceReward >= 0, "The new experience reward must not be negative");
+        container.experienceReward = experienceReward;
+    }
+    // Paper end
 }
