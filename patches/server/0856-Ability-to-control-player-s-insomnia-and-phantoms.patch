From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jan Villim <jan.villim@student.tuke.sk>
Date: Sat, 22 Jan 2022 17:56:19 +0100
Subject: [PATCH] Ability to control player's insomnia and phantoms


diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index d7dcf36c8c972e30320c56e447822cf26f6d5fb3..48a87aee52e5fc183ba4243d729348706f095f32 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -871,6 +871,27 @@ public class PaperWorldConfig {
         phantomOnlyAttackInsomniacs = getBoolean("phantoms-only-attack-insomniacs", phantomOnlyAttackInsomniacs);
     }
 
+    public int playerInsomniaStartTicks = 72000;
+    private void playerInsomniaStartTicks() {
+        playerInsomniaStartTicks = getInt("player-insomnia-start-ticks", playerInsomniaStartTicks);
+    }
+
+    public int phantomsSpawnAttemptMinSeconds = 60;
+    public int phantomsSpawnAttemptMaxSeconds = 119;
+    public boolean phantomSpawnerEnabled = false;
+    private void phantomsSpawnAttemptSettings() {
+        phantomsSpawnAttemptMinSeconds = getInt("game-mechanics.phantoms-spawn-attempt-seconds.min", phantomsSpawnAttemptMinSeconds);
+        phantomsSpawnAttemptMaxSeconds = getInt("game-mechanics.phantoms-spawn-attempt-seconds.max", phantomsSpawnAttemptMaxSeconds);
+
+        if (phantomsSpawnAttemptMinSeconds > phantomsSpawnAttemptMaxSeconds) {
+            int temp = phantomsSpawnAttemptMinSeconds;
+            phantomsSpawnAttemptMinSeconds = phantomsSpawnAttemptMaxSeconds;
+            phantomsSpawnAttemptMaxSeconds = temp;
+        }
+
+        phantomSpawnerEnabled = (phantomsSpawnAttemptMinSeconds >= 0 && phantomsSpawnAttemptMaxSeconds >= 0) && (phantomsSpawnAttemptMinSeconds != 0 || phantomsSpawnAttemptMaxSeconds != 0);
+    }
+
     public boolean zombiesAlwaysCanPickUpLoot;
     public boolean skeletonsAlwaysCanPickUpLoot;
     private void setMobsAlwaysCanPickUpLoot() {
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index a2abb8aa1a257ccd2b5dbddc037fffc6eb600758..10e501eae443d0239c7b67c8643673c9e491502b 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -2,6 +2,7 @@ package net.minecraft.server.level;
 
 import com.google.common.annotations.VisibleForTesting;
 import co.aikar.timings.TimingHistory; // Paper
+import com.google.common.collect.ImmutableList; // Paper
 import com.google.common.collect.Lists;
 import com.mojang.datafixers.DataFixer;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
@@ -129,6 +130,7 @@ import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.gameevent.GameEventListenerRegistrar;
 import net.minecraft.world.level.gameevent.vibrations.VibrationPath;
 import net.minecraft.world.level.levelgen.Heightmap;
+import net.minecraft.world.level.levelgen.PhantomSpawner; // Paper
 import net.minecraft.world.level.levelgen.feature.StructureFeature;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
 import net.minecraft.world.level.levelgen.structure.StructureCheck;
@@ -495,7 +497,13 @@ public class ServerLevel extends Level implements WorldGenLevel {
         this.dragonParts = new Int2ObjectOpenHashMap();
         this.tickTime = flag1;
         this.server = minecraftserver;
-        this.customSpawners = list;
+        // Paper start
+        if (this.paperConfig.phantomSpawnerEnabled) {
+            this.customSpawners = list;
+        } else {
+            this.customSpawners = ImmutableList.copyOf(list.stream().filter(s -> !(s instanceof PhantomSpawner)).toList());
+        }
+        // Paper end
         // CraftBukkit start
         this.serverLevelData = (PrimaryLevelData) iworlddataserver;
         serverLevelData.world = this;
diff --git a/src/main/java/net/minecraft/world/entity/EntitySelector.java b/src/main/java/net/minecraft/world/entity/EntitySelector.java
index e39965c2e50bc8ee424ea07819346e0611398e28..a09d02d454d165136649b142cf9e88724a62e284 100644
--- a/src/main/java/net/minecraft/world/entity/EntitySelector.java
+++ b/src/main/java/net/minecraft/world/entity/EntitySelector.java
@@ -27,7 +27,18 @@ public final class EntitySelector {
         return !entity.isSpectator();
     };
     public static final Predicate<Entity> CAN_BE_COLLIDED_WITH = EntitySelector.NO_SPECTATORS.and(Entity::canBeCollidedWith);
-    public static Predicate<Player> isInsomniac = (player) -> net.minecraft.util.Mth.clamp(((net.minecraft.server.level.ServerPlayer) player).getStats().getValue(net.minecraft.stats.Stats.CUSTOM.get(net.minecraft.stats.Stats.TIME_SINCE_REST)), 1, Integer.MAX_VALUE) >= 72000; // Paper
+    // Paper start
+    public static Predicate<Player> isInsomniac = (player) -> {
+        net.minecraft.server.level.ServerPlayer serverPlayer = (net.minecraft.server.level.ServerPlayer) player;
+        int playerInsomniaTicks = serverPlayer.getLevel().paperConfig.playerInsomniaStartTicks;
+
+        if (playerInsomniaTicks <= 0) {
+            return false;
+        }
+
+        return net.minecraft.util.Mth.clamp(serverPlayer.getStats().getValue(net.minecraft.stats.Stats.CUSTOM.get(net.minecraft.stats.Stats.TIME_SINCE_REST)), 1, Integer.MAX_VALUE) >= playerInsomniaTicks;
+    };
+    // Paper end
 
     private EntitySelector() {}
     // Paper start
diff --git a/src/main/java/net/minecraft/world/level/levelgen/PhantomSpawner.java b/src/main/java/net/minecraft/world/level/levelgen/PhantomSpawner.java
index 1e21d6cf2f03219fb2b7217c9a72bdd83c2146f7..b91af480dbe866c0c73f9102b331bc5b13f94ab7 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/PhantomSpawner.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/PhantomSpawner.java
@@ -41,7 +41,11 @@ public class PhantomSpawner implements CustomSpawner {
             if (this.nextTick > 0) {
                 return 0;
             } else {
-                this.nextTick += (60 + random.nextInt(60)) * 20;
+                // Paper start
+                int spawnAttemptMinSeconds = world.getLevel().paperConfig.phantomsSpawnAttemptMinSeconds;
+                int spawnAttemptMaxSeconds = world.getLevel().paperConfig.phantomsSpawnAttemptMaxSeconds;
+                this.nextTick += (spawnAttemptMinSeconds + random.nextInt(spawnAttemptMaxSeconds - spawnAttemptMinSeconds + 1)) * 20;
+                // Paper end
                 if (world.getSkyDarken() < 5 && world.dimensionType().hasSkyLight()) {
                     return 0;
                 } else {
@@ -62,7 +66,7 @@ public class PhantomSpawner implements CustomSpawner {
                                     int j = Mth.clamp(serverstatisticmanager.getValue(Stats.CUSTOM.get(Stats.TIME_SINCE_REST)), (int) 1, Integer.MAX_VALUE);
                                     boolean flag2 = true;
 
-                                    if (random.nextInt(j) >= 72000) {
+                                    if (random.nextInt(j) >= world.paperConfig.playerInsomniaStartTicks) { // Paper
                                         BlockPos blockposition1 = blockposition.above(20 + random.nextInt(15)).east(-10 + random.nextInt(21)).south(-10 + random.nextInt(21));
                                         BlockState iblockdata = world.getBlockState(blockposition1);
                                         FluidState fluid = world.getFluidState(blockposition1);
