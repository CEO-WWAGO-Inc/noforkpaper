From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: dfsek <dfsek@protonmail.com>
Date: Sat, 19 Jun 2021 20:15:29 -0700
Subject: [PATCH] Add more LimitedRegion API


diff --git a/src/main/java/org/bukkit/generator/LimitedRegion.java b/src/main/java/org/bukkit/generator/LimitedRegion.java
index 85faeeeef908243aa5f172284784e7e67995ebfb..ea757f8005b9deb52710f57740c65f4ab6b56dc4 100644
--- a/src/main/java/org/bukkit/generator/LimitedRegion.java
+++ b/src/main/java/org/bukkit/generator/LimitedRegion.java
@@ -53,4 +53,137 @@ public interface LimitedRegion extends RegionAccessor {
      */
     @NotNull
     List<BlockState> getTileEntities();
+
+
+    // Paper start
+    /**
+     * Sets the block at a vector location to the provided {@link org.bukkit.block.data.BlockData}.
+     *
+     * @param vector {@link org.bukkit.util.Vector} representing the position of the block to set.
+     * @param data   {@link org.bukkit.block.data.BlockData} to set the block at the provided coordinates to.
+     */
+    default void setBlockData(@NotNull org.bukkit.util.Vector vector, @NotNull org.bukkit.block.data.BlockData data) {
+        setBlockData(vector.getBlockX(), vector.getBlockY(), vector.getBlockZ(), data);
+    }
+
+    /**
+     * Sets the {@link BlockState} at a location.
+     *
+     * @param x X coordinate.
+     * @param y Y coordinate.
+     * @param z Z coordinate.
+     * @param state The block state.
+     */
+    void setBlockState(int x, int y, int z, @NotNull BlockState state);
+
+    /**
+     * Sets the {@link BlockState} at a location.
+     *
+     * @param location Location to set block state.
+     * @param state The block state.
+     */
+    default void setBlockState(@NotNull org.bukkit.util.Vector location, @NotNull BlockState state) {
+        setBlockState(location.getBlockX(), location.getBlockY(), location.getBlockZ(), state);
+    }
+
+    /**
+     * Gets the {@link BlockState} at a location.
+     *
+     * @param location Location to get block state from.
+     * @return The block state.
+     */
+    @NotNull
+    default BlockState getBlockState(@NotNull org.bukkit.util.Vector location) {
+        return getBlockState(location.getBlockX(), location.getBlockY(), location.getBlockZ());
+    }
+
+    /**
+     * Schedules a block update at (x, y, z).
+     *
+     * @param x X coordinate
+     * @param y Y coordinate
+     * @param z Z coordinate
+     */
+    void scheduleBlockUpdate(int x, int y, int z);
+
+    /**
+     * Schedules a block update at a vector location.
+     *
+     * @param location {@link org.bukkit.util.Vector} representing the position of the block to update.
+     */
+    default void scheduleBlockUpdate(@NotNull org.bukkit.util.Vector location) {
+        scheduleBlockUpdate(location.getBlockX(), location.getBlockY(), location.getBlockZ());
+    }
+
+    /**
+     * Schedules a fluid update at (x, y, z).
+     *
+     * @param x X coordinate
+     * @param y Y coordinate
+     * @param z Z coordinate
+     */
+    void scheduleFluidUpdate(int x, int y, int z);
+
+    /**
+     * Schedules a fluid update at a vector location.
+     *
+     * @param location {@link org.bukkit.util.Vector} representing the position of the block to update.
+     */
+    default void scheduleFluidUpdate(@NotNull org.bukkit.util.Vector location) {
+        scheduleFluidUpdate(location.getBlockX(), location.getBlockY(), location.getBlockZ());
+    }
+
+    /**
+     * Gets the {@link org.bukkit.World} object this region represents.
+     * <p>
+     * Do <b>not</b> attempt to read from/write to this world! Doing so during generation <b>will cause a deadlock!</b>
+     *
+     * @return The {@link org.bukkit.World} object that this region represents.
+     */
+    @NotNull
+    org.bukkit.World getWorld();
+
+    /**
+     * Gets the {@link org.bukkit.block.data.BlockData} of the block at the provided coordinates.
+     *
+     * @param vector {@link org.bukkit.util.Vector} representing the position of the block to get.
+     * @return {@link org.bukkit.block.data.BlockData} at the coordinates
+     */
+    @NotNull
+    default org.bukkit.block.data.BlockData getBlockData(@NotNull org.bukkit.util.Vector vector) {
+        return getBlockData(vector.getBlockX(), vector.getBlockY(), vector.getBlockZ());
+    }
+
+    /**
+     * Gets the X-coordinate of the chunk in the center of the region.
+     *
+     * @return The center chunk's X coordinate.
+     */
+    int getCenterChunkX();
+
+    /**
+     * Gets the X-coordinate of the block in the center of the region.
+     *
+     * @return The center chunk's X coordinate.
+     */
+    default int getCenterBlockX() {
+        return getCenterChunkX() << 4;
+    }
+
+    /**
+     * Gets the Z-coordinate of the chunk in the center of the region.
+     *
+     * @return The center chunk's Z coordinate.
+     */
+    int getCenterChunkZ();
+
+    /**
+     * Gets the Z-coordinate of the block in the center of the region.
+     *
+     * @return The center chunk's Z coordinate.
+     */
+    default int getCenterBlockZ() {
+        return getCenterChunkZ() << 4;
+    }
+    // Paper end
 }
