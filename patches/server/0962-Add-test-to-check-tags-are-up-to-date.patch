From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Sun, 11 Dec 2022 14:30:11 -0800
Subject: [PATCH] Add test to check tags are up to date


diff --git a/src/test/java/io/papermc/paper/TagTest.java b/src/test/java/io/papermc/paper/TagTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..ecbb6d16c494e233f1d3aa0cdad94ad4ed842253
--- /dev/null
+++ b/src/test/java/io/papermc/paper/TagTest.java
@@ -0,0 +1,88 @@
+package io.papermc.paper;
+
+import com.google.common.collect.Sets;
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Optional;
+import java.util.Set;
+import java.util.StringJoiner;
+import java.util.function.Predicate;
+import java.util.stream.Collectors;
+import net.minecraft.core.HolderSet;
+import net.minecraft.core.Registry;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.core.registries.Registries;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.Bootstrap;
+import net.minecraft.tags.TagKey;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.level.block.Block;
+import org.bukkit.Fluid;
+import org.bukkit.GameEvent;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Tag;
+import org.bukkit.craftbukkit.tag.CraftBlockTag;
+import org.bukkit.craftbukkit.tag.CraftEntityTag;
+import org.bukkit.craftbukkit.tag.CraftFluidTag;
+import org.bukkit.craftbukkit.tag.CraftItemTag;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.entity.EntityType;
+import org.bukkit.support.AbstractTestingBase;
+import org.junit.Test;
+
+import static org.junit.Assert.assertTrue;
+
+public class TagTest extends AbstractTestingBase {
+
+    @Test
+    public void ensureApiTagsUpToDate() throws ReflectiveOperationException {
+        System.setOut(Bootstrap.STDOUT);
+        final Map<Class<?>, Map<ResourceLocation, Tag<?>>> tags = new LinkedHashMap<>();
+        for (Field field : Tag.class.getFields()) {
+            if (Modifier.isStatic(field.getModifiers()) && field.getType() == Tag.class) {
+                Tag<?> tag = (Tag<?>) field.get(null);
+                tags.computeIfAbsent(tag.getClass(), t -> new LinkedHashMap<>()).put(CraftNamespacedKey.toMinecraft(tag.getKey()), tag);
+            }
+        }
+        checkTags(tags, BuiltInRegistries.BLOCK, CraftBlockTag.class, Material.class, "REGISTRY_BLOCKS", "");
+        checkTags(tags, BuiltInRegistries.ITEM, CraftItemTag.class, Material.class, "REGISTRY_ITEMS", "ITEMS_");
+        checkTags(tags, BuiltInRegistries.ENTITY_TYPE, CraftEntityTag.class, EntityType.class, "REGISTRY_ENTITY_TYPES", "ENTITY_TYPES_");
+        checkTags(tags, BuiltInRegistries.FLUID, CraftFluidTag.class, Fluid.class, "REGISTRY_FLUIDS", "FLUIDS_");
+        checkTags(tags, BuiltInRegistries.GAME_EVENT, CraftGameEventTag.class, GameEvent.class, "REGISTRY_GAME_EVENTS", "GAME_EVENT_");
+        assertTrue("Need to handle these tag types: " + tags.keySet(), tags.isEmpty());
+    }
+
+    private static void checkTags(Map<Class<?>, Map<ResourceLocation, Tag<?>>> tags, Registry<?> nmsRegistry, Class<?> cbTagClass, Class<?> apiValueClass, String registry, String prefix) {
+        Set<ResourceLocation> nmsTags = nmsRegistry.getTagNames().map(TagKey::location).collect(Collectors.toSet());
+        Set<ResourceLocation> apiTags = tags.remove(cbTagClass).keySet();
+        Set<ResourceLocation> missingApi = Sets.difference(nmsTags, apiTags);
+        Predicate<ResourceLocation> isDuplicate = ignored -> false;
+        if (nmsRegistry == BuiltInRegistries.ITEM) {
+            isDuplicate = loc -> {
+                return BuiltInRegistries.BLOCK.getTag(TagKey.create(Registries.BLOCK, loc)).isPresent();
+            };
+        }
+        Set<ResourceLocation> extraApi = Sets.difference(apiTags, nmsTags);
+        assertTrue("Missing %s\n".formatted(cbTagClass.getSimpleName()) + printMissing(missingApi, prefix, apiValueClass, registry, isDuplicate), missingApi.isEmpty());
+        assertTrue("Extra %s\n".formatted(cbTagClass.getSimpleName()) + String.join("\n", extraApi.stream().map(Object::toString).toList()), missingApi.isEmpty());
+    }
+
+    private static String printMissing(Set<ResourceLocation> missing, String prefix, Class<?> apiValueClass, String registry, Predicate<ResourceLocation> duplicateCheck) {
+        List<String> toPrint = new ArrayList<>();
+        for (ResourceLocation loc : missing) {
+            if (duplicateCheck.test(loc)) {
+                toPrint.addAll(List.of("/**", " * @see #%s".formatted(loc.getPath().toUpperCase(Locale.ENGLISH)), " */"));
+            }
+            toPrint.add("Tag<%s> %s = Bukkit.getTag(%s, NamespacedKey.minecraft(\"%s\"), %s.class);".formatted(apiValueClass.getSimpleName(), prefix + loc.getPath().toUpperCase(Locale.ENGLISH), registry, loc.getPath(), apiValueClass.getSimpleName()));
+        }
+        return String.join("\n", toPrint);
+    }
+}
diff --git a/src/test/java/org/bukkit/support/DummyServer.java b/src/test/java/org/bukkit/support/DummyServer.java
index 2ddceb709291d3bd713621ffa4020c02ec26bb21..c1835beeebf49fe4dc7cb197d32415585a4bfd59 100644
--- a/src/test/java/org/bukkit/support/DummyServer.java
+++ b/src/test/java/org/bukkit/support/DummyServer.java
@@ -116,6 +116,22 @@ public final class DummyServer implements InvocationHandler {
                     }
                 }
             );
+            methods.put(
+                Server.class.getMethod("getTag", String.class, NamespacedKey.class, Class.class),
+                new MethodHandler() {
+                    @Override
+                    public Object handle(DummyServer server, Object[] args) {
+                        return switch ((String) args[0]) {
+                            case org.bukkit.Tag.REGISTRY_BLOCKS -> new org.bukkit.craftbukkit.tag.CraftBlockTag(net.minecraft.core.registries.BuiltInRegistries.BLOCK, net.minecraft.tags.TagKey.create(net.minecraft.core.registries.Registries.BLOCK, CraftNamespacedKey.toMinecraft((NamespacedKey) args[1])));
+                            case org.bukkit.Tag.REGISTRY_ITEMS -> new org.bukkit.craftbukkit.tag.CraftItemTag(net.minecraft.core.registries.BuiltInRegistries.ITEM, net.minecraft.tags.TagKey.create(net.minecraft.core.registries.Registries.ITEM, CraftNamespacedKey.toMinecraft((NamespacedKey) args[1])));
+                            case org.bukkit.Tag.REGISTRY_ENTITY_TYPES -> new org.bukkit.craftbukkit.tag.CraftEntityTag(net.minecraft.core.registries.BuiltInRegistries.ENTITY_TYPE, net.minecraft.tags.TagKey.create(net.minecraft.core.registries.Registries.ENTITY_TYPE, CraftNamespacedKey.toMinecraft((NamespacedKey) args[1])));
+                            case org.bukkit.Tag.REGISTRY_FLUIDS -> new org.bukkit.craftbukkit.tag.CraftFluidTag(net.minecraft.core.registries.BuiltInRegistries.FLUID, net.minecraft.tags.TagKey.create(net.minecraft.core.registries.Registries.FLUID, CraftNamespacedKey.toMinecraft((NamespacedKey) args[1])));
+                            case org.bukkit.Tag.REGISTRY_GAME_EVENTS -> new io.papermc.paper.CraftGameEventTag(net.minecraft.core.registries.BuiltInRegistries.GAME_EVENT, net.minecraft.tags.TagKey.create(net.minecraft.core.registries.Registries.GAME_EVENT, CraftNamespacedKey.toMinecraft((NamespacedKey) args[1])));
+                            default -> throw new IllegalArgumentException(java.util.Arrays.toString(args));
+                        };
+                    }
+                }
+            );
             DummyServer server = new DummyServer();
             Server instance = Proxy.getProxyClass(Server.class.getClassLoader(), Server.class).asSubclass(Server.class).getConstructor(InvocationHandler.class).newInstance(server);
             Bukkit.setServer(instance);
