From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kyle Wood <demonwav@gmail.com>
Date: Thu, 10 Dec 2020 20:54:19 -0800
Subject: [PATCH] Setup Gradle project

The pom.xml file is deleted in this patch so the patch will fail to
apply if there are changes made to it from upstream - thus notifying us
that changes were made.

diff --git a/.gitignore b/.gitignore
index 67fb370cad6924895a6b27052dbd5c1767e3f0c9..3e05459f27c4c5697ae65da504d67a6a2f617b57 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,6 @@
+.gradle/
+build/
+
 # Eclipse stuff
 /.classpath
 /.project
diff --git a/build.gradle.kts b/build.gradle.kts
new file mode 100644
index 0000000000000000000000000000000000000000..e9db6b3bad237c0b3fdb14e96b6f0f29ba8ee312
--- /dev/null
+++ b/build.gradle.kts
@@ -0,0 +1,135 @@
+import com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer
+import com.github.jengelman.gradle.plugins.shadow.transformers.Transformer
+import io.papermc.paperweight.util.Git
+import io.papermc.paperweight.util.path
+import shadow.org.apache.logging.log4j.core.config.plugins.processor.PluginProcessor.PLUGIN_CACHE_FILE
+import java.text.SimpleDateFormat
+import java.util.Date
+import java.util.Locale
+
+plugins {
+    java
+    `maven-publish`
+    id("com.github.johnrengelman.shadow")
+}
+
+repositories {
+    maven("https://libraries.minecraft.net/")
+}
+
+dependencies {
+    implementation(project(":Paper-API"))
+    implementation("jline:jline:2.12.1")
+    implementation("org.apache.logging.log4j:log4j-iostreams:2.14.1") {
+        exclude(group = "org.apache.logging.log4j", module = "log4j-api")
+    }
+    implementation("org.ow2.asm:asm:9.1")
+    implementation("com.googlecode.json-simple:json-simple:1.1.1") {
+        // This includes junit transitively for whatever reason
+        isTransitive = false
+    }
+    runtimeOnly("org.xerial:sqlite-jdbc:3.34.0")
+    runtimeOnly("mysql:mysql-connector-java:5.1.49")
+
+    runtimeOnly("org.apache.maven:maven-resolver-provider:3.8.1")
+    runtimeOnly("org.apache.maven.resolver:maven-resolver-connector-basic:1.7.0")
+    runtimeOnly("org.apache.maven.resolver:maven-resolver-transport-http:1.7.0")
+
+    testImplementation("junit:junit:4.13.1")
+    testImplementation("org.hamcrest:hamcrest-library:1.3")
+}
+
+tasks.jar {
+    archiveClassifier.set("dev")
+
+    manifest {
+        val git = Git(rootProject.layout.projectDirectory.path)
+        val gitHash = git("rev-parse", "--short=7", "HEAD").getText().trim()
+        val implementationVersion = System.getenv("BUILD_NUMBER") ?: "\"$gitHash\""
+        attributes(
+            "Main-Class" to "org.bukkit.craftbukkit.Main",
+            "Implementation-Title" to "CraftBukkit",
+            "Implementation-Version" to "git-Paper-$implementationVersion",
+            "Implementation-Vendor" to SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'").format(Date()), // Paper
+            "Specification-Title" to "Bukkit",
+            "Specification-Version" to project.version,
+            "Specification-Vendor" to "Bukkit Team",
+        )
+        for (tld in setOf("net", "com", "org")) {
+            attributes("$tld/bukkit", "Sealed" to true)
+        }
+    }
+}
+
+publishing {
+    publications.create<MavenPublication>("maven") {
+        artifactId = rootProject.name.toLowerCase(Locale.ENGLISH)
+        artifact(tasks.reobfJar) {
+            classifier = null
+        }
+        artifact(tasks.shadowJar)
+    }
+}
+
+tasks.shadowJar {
+    archiveClassifier.set("mojang-mapped")
+
+    val packageVersion = "1_17_R1"
+    relocate("org.bukkit.craftbukkit", "org.bukkit.craftbukkit.v$packageVersion") {
+        exclude("org.bukkit.craftbukkit.Main*")
+    }
+    listOf(
+        "jline", "it.unimi", "org.apache.commons.codec", "org.apache.commons.io",
+        "org.apache.commons.lang3", "org.apache.http", "org.apache.maven", "org.codehaus.plexus",
+        "org.eclipse.aether", "org.eclipse.sisu", "org.objectweb.asm"
+    ).forEach { pack ->
+        relocate(pack, "org.bukkit.craftbukkit.libs.$pack")
+    }
+    mergeServiceFiles()
+    transform(ModifiedLog4j2PluginsCacheFileTransformer::class.java)
+}
+
+tasks.test {
+    exclude("org/bukkit/craftbukkit/inventory/ItemStack*Test.class")
+}
+
+fun TaskContainer.registerRunTask(
+    name: String, block: JavaExec.() -> Unit
+): TaskProvider<JavaExec> = register<JavaExec>(name) {
+    group = "paper"
+    standardInput = System.`in`
+    workingDir = rootProject.layout.projectDirectory.dir(
+        providers.gradleProperty("runWorkDir").forUseAtConfigurationTime().orElse("run")
+    ).get().asFile
+    args("--nogui")
+    systemProperty("net.kyori.adventure.text.warnWhenLegacyFormattingDetected", true)
+    if (project.hasProperty("disableWatchdog")) {
+        systemProperty("disable.watchdog", true)
+    }
+    doFirst {
+        workingDir.mkdirs()
+    }
+    block(this)
+}
+
+tasks.registerRunTask("runShadow") {
+    description = "Spin up a test server from the shadowJar archiveFile"
+    classpath(tasks.shadowJar.flatMap { it.archiveFile })
+}
+
+tasks.registerRunTask("runReobf") {
+    description = "Spin up a test server from the reobfJar output jar"
+    classpath(tasks.reobfJar.flatMap { it.outputJar })
+}
+
+tasks.registerRunTask("runDev") {
+    description = "Spin up a non-shaded non-remapped test server"
+    classpath = java.sourceSets.main.get().runtimeClasspath
+    mainClass.set("org.bukkit.craftbukkit.Main")
+}
+
+class ModifiedLog4j2PluginsCacheFileTransformer : Transformer by Log4j2PluginsCacheFileTransformer() {
+    override fun canTransformResource(element: FileTreeElement): Boolean {
+        return PLUGIN_CACHE_FILE == element.name || element.name == "Log4j2Plugins.dat"
+    }
+}
