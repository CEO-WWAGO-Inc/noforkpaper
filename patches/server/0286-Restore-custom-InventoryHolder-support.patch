From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Mon, 5 Nov 2018 04:23:51 +0000
Subject: [PATCH] Restore custom InventoryHolder support

Co-authored-by: Shane Freeder <theboyetronic@gmail.com>

Upstream removed the ability to consistently use a custom InventoryHolder,
However, the implementation does not use an InventoryHolder in any form
outside of custom inventories.

diff --git a/src/main/java/io/papermc/paper/inventory/PaperInventoryCustomHolderContainer.java b/src/main/java/io/papermc/paper/inventory/PaperInventoryCustomHolderContainer.java
new file mode 100644
index 0000000000000000000000000000000000000000..e6b043e7ceaf7aeda464153b0ac369ef5626fe95
--- /dev/null
+++ b/src/main/java/io/papermc/paper/inventory/PaperInventoryCustomHolderContainer.java
@@ -0,0 +1,114 @@
+package io.papermc.paper.inventory;
+
+import net.minecraft.world.Container;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.ItemStack;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.inventory.InventoryType;
+import org.bukkit.inventory.InventoryHolder;
+
+import java.util.List;
+
+public class PaperInventoryCustomHolderContainer implements Container {
+
+    private final InventoryHolder owner;
+    private final Container delegate;
+    private final InventoryType type;
+
+    public PaperInventoryCustomHolderContainer(InventoryHolder owner, Container delegate, InventoryType type) {
+        this.owner = owner;
+        this.delegate = delegate;
+        this.type = type;
+    }
+
+    public InventoryType getType() {
+        return this.type;
+    }
+
+    @Override
+    public int getContainerSize() {
+        return this.delegate.getContainerSize();
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return this.delegate.isEmpty();
+    }
+
+    @Override
+    public ItemStack getItem(int slot) {
+        return this.delegate.getItem(slot);
+    }
+
+    @Override
+    public ItemStack removeItem(int slot, int amount) {
+        return this.delegate.removeItem(slot, amount);
+    }
+
+    @Override
+    public ItemStack removeItemNoUpdate(int slot) {
+        return this.delegate.removeItemNoUpdate(slot);
+    }
+
+    @Override
+    public void setItem(int slot, ItemStack stack) {
+        this.delegate.setItem(slot, stack);
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return this.delegate.getMaxStackSize();
+    }
+
+    @Override
+    public void setChanged() {
+        this.delegate.setChanged();
+    }
+
+    @Override
+    public boolean stillValid(Player player) {
+        return this.delegate.stillValid(player);
+    }
+
+    @Override
+    public List<ItemStack> getContents() {
+        return this.delegate.getContents();
+    }
+
+    @Override
+    public void onOpen(CraftHumanEntity who) {
+        this.delegate.onOpen(who);
+    }
+
+    @Override
+    public void onClose(CraftHumanEntity who) {
+        this.delegate.onClose(who);
+    }
+
+    @Override
+    public List<HumanEntity> getViewers() {
+        return this.delegate.getViewers();
+    }
+
+    @Override
+    public InventoryHolder getOwner() {
+        return this.owner;
+    }
+
+    @Override
+    public void setMaxStackSize(int size) {
+        this.delegate.setMaxStackSize(size);
+    }
+
+    @Override
+    public Location getLocation() {
+        return this.delegate.getLocation();
+    }
+
+    @Override
+    public void clearContent() {
+        this.delegate.clearContent();
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
index 60fa587ce17e138d2baf8959c26e25ed1db17a4a..cbe39d25ddfce0e92273b68f1e1d984b50dd2291 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
@@ -230,6 +230,10 @@ public class CraftContainer extends AbstractContainerMenu {
             this.lastSlots = delegate.lastSlots;
             this.slots = delegate.slots;
             this.remoteSlots = delegate.remoteSlots;
+            // Paper start - copy data slots for InventoryView#set/getProperty
+            this.dataSlots = delegate.dataSlots;
+            this.remoteDataSlots = delegate.remoteDataSlots;
+            // Paper end
         }
 
         // SPIGOT-4598 - we should still delegate the shift click handler
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
index 6ca8e76d1569f3f631275fea187e7110f09fc69e..3796f8b122ad981b6faacd2afcaf3696314aad6b 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
@@ -490,6 +490,10 @@ public class CraftInventory implements Inventory {
             return InventoryType.BREWING;
         } else if (this.inventory instanceof CraftInventoryCustom.MinecraftInventory) {
             return ((CraftInventoryCustom.MinecraftInventory) this.inventory).getType();
+            // Paper start
+        } else if (this.inventory instanceof io.papermc.paper.inventory.PaperInventoryCustomHolderContainer holderContainer) {
+            return holderContainer.getType();
+        // Paper end
         } else if (this.inventory instanceof PlayerEnderChestContainer) {
             return InventoryType.ENDER_CHEST;
         } else if (this.inventory instanceof MerchantContainer) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java
index 08fc05836b26f5f93ae74324705d5f593b57315a..ac38475a293e175b48d19074b19ca68f87dee992 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java
@@ -15,6 +15,11 @@ import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.InventoryHolder;
 
 public class CraftInventoryCustom extends CraftInventory {
+    // Paper start
+    public CraftInventoryCustom(InventoryHolder owner, InventoryType type, Container delegate) {
+        super(new io.papermc.paper.inventory.PaperInventoryCustomHolderContainer(owner, delegate, type));
+    }
+    // Paper end
     public CraftInventoryCustom(InventoryHolder owner, InventoryType type) {
         super(new MinecraftInventory(owner, type));
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftTileInventoryConverter.java b/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftTileInventoryConverter.java
index 7a7f3f53aef601f124d474d9890e23d87dd96900..0293f948c2128af13a090931ffcfc3fa7439344b 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftTileInventoryConverter.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftTileInventoryConverter.java
@@ -28,7 +28,7 @@ public abstract class CraftTileInventoryConverter implements CraftInventoryCreat
 
     @Override
     public Inventory createInventory(InventoryHolder holder, InventoryType type) {
-        return this.getInventory(this.getTileEntity());
+        return this.getInventory(holder, type, this.getTileEntity()); // Paper
     }
 
     // Paper start
@@ -39,7 +39,7 @@ public abstract class CraftTileInventoryConverter implements CraftInventoryCreat
             ((RandomizableContainerBlockEntity) te).setCustomName(io.papermc.paper.adventure.PaperAdventure.asVanilla(title));
         }
 
-        return getInventory(te);
+        return getInventory(owner, type, te); // Paper
     }
     // Paper end
 
@@ -50,10 +50,18 @@ public abstract class CraftTileInventoryConverter implements CraftInventoryCreat
             ((RandomizableContainerBlockEntity) te).setCustomName(CraftChatMessage.fromStringOrNull(title));
         }
 
-        return this.getInventory(te);
+        return this.getInventory(holder, type, te); // Paper
     }
 
+    @Deprecated // Paper - use getInventory with owner and type
     public Inventory getInventory(Container tileEntity) {
+        // Paper start
+        return getInventory(null, null, tileEntity);
+    }
+
+    public Inventory getInventory(InventoryHolder owner, InventoryType type, Container tileEntity) { // Paper
+        if (owner != null) return new org.bukkit.craftbukkit.inventory.CraftInventoryCustom(owner, type, tileEntity); // Paper
+        // Paper end
         return new CraftInventory(tileEntity);
     }
 
@@ -70,7 +78,7 @@ public abstract class CraftTileInventoryConverter implements CraftInventoryCreat
         public Inventory createInventory(InventoryHolder owner, InventoryType type, net.kyori.adventure.text.Component title) {
             Container tileEntity = getTileEntity();
             ((AbstractFurnaceBlockEntity) tileEntity).setCustomName(io.papermc.paper.adventure.PaperAdventure.asVanilla(title));
-            return getInventory(tileEntity);
+            return getInventory(owner, type, tileEntity); // Paper
         }
         // Paper end
 
@@ -78,11 +86,19 @@ public abstract class CraftTileInventoryConverter implements CraftInventoryCreat
         public Inventory createInventory(InventoryHolder owner, InventoryType type, String title) {
             Container tileEntity = this.getTileEntity();
             ((AbstractFurnaceBlockEntity) tileEntity).setCustomName(CraftChatMessage.fromStringOrNull(title));
-            return this.getInventory(tileEntity);
+            return this.getInventory(owner, type, tileEntity); // Paper
         }
 
         @Override
         public Inventory getInventory(Container tileEntity) {
+            // Paper start
+            return getInventory(null, null, tileEntity);
+        }
+
+        @Override
+        public Inventory getInventory(InventoryHolder owner, InventoryType type, net.minecraft.world.Container tileEntity) { // Paper
+            if (owner != null) return new org.bukkit.craftbukkit.inventory.CraftInventoryCustom(owner, type, tileEntity); // Paper
+            // Paper end
             return new CraftInventoryFurnace((AbstractFurnaceBlockEntity) tileEntity);
         }
     }
@@ -102,7 +118,7 @@ public abstract class CraftTileInventoryConverter implements CraftInventoryCreat
             if (tileEntity instanceof BrewingStandBlockEntity) {
                 ((BrewingStandBlockEntity) tileEntity).setCustomName(io.papermc.paper.adventure.PaperAdventure.asVanilla(title));
             }
-            return getInventory(tileEntity);
+            return getInventory(owner, type, tileEntity); // Paper
         }
         // Paper end
 
@@ -113,11 +129,19 @@ public abstract class CraftTileInventoryConverter implements CraftInventoryCreat
             if (tileEntity instanceof BrewingStandBlockEntity) {
                 ((BrewingStandBlockEntity) tileEntity).setCustomName(CraftChatMessage.fromStringOrNull(title));
             }
-            return this.getInventory(tileEntity);
+            return this.getInventory(holder, type, tileEntity); // Paper
         }
 
         @Override
         public Inventory getInventory(Container tileEntity) {
+            // Paper start
+            return getInventory(null, null, tileEntity);
+        }
+
+        @Override
+        public Inventory getInventory(InventoryHolder owner, InventoryType type, net.minecraft.world.Container tileEntity) { // Paper
+            if (owner != null) return new org.bukkit.craftbukkit.inventory.CraftInventoryCustom(owner, type, tileEntity); // Paper
+            // Paper end
             return new CraftInventoryBrewer(tileEntity);
         }
     }
