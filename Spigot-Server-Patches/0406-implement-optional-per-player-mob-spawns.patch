From 9478588c2491b971d0974e48d4f061ee0b5b7a6e Mon Sep 17 00:00:00 2001
From: kickash32 <kickash32@gmail.com>
Date: Fri, 26 Jul 2019 10:24:32 +0500
Subject: [PATCH] implement optional per player mob spawns


diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index 318a470ee..ff1e27e7d 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -562,4 +562,9 @@ public class PaperWorldConfig {
     private void disableRelativeProjectileVelocity() {
         disableRelativeProjectileVelocity = getBoolean("game-mechanics.disable-relative-projectile-velocity", false);
     }
+
+    public boolean perPlayerMobSpawns = false;
+    private void perPlayerMobSpawns() {
+        perPlayerMobSpawns = getBoolean("per-player-mob-spawns", false);
+    }
 }
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 2554c2840..e4acf310b 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -489,8 +489,24 @@ public class ChunkProviderServer extends IChunkProvider {
                                 if (enumcreaturetype != EnumCreatureType.MISC && (!enumcreaturetype.c() || this.allowAnimals) && (enumcreaturetype.c() || this.allowMonsters) && (!enumcreaturetype.d() || flag2)) {
                                     int k1 = limit * l / ChunkProviderServer.b; // CraftBukkit - use per-world limits
 
-                                    if (object2intmap.getInt(enumcreaturetype) <= k1) {
-                                        SpawnerCreature.a(enumcreaturetype, (World) this.world, chunk, blockposition);
+                                    // Paper start - only allow spawns upto the limit per chunk and update count afterwards
+                                    int currEntityCount = object2intmap.getInt(enumcreaturetype);
+                                    int difference = k1 - currEntityCount;
+                                    if(this.world.paperConfig.perPlayerMobSpawns){
+                                        final int[] min = {Integer.MAX_VALUE};
+                                        final int finalLimit = limit;
+                                        playerChunkMap.getPlayersNear(chunk.getPos())
+                                            .forEach((entityplayer) -> min[0] = Math.min(
+                                                finalLimit - ((WorldServer)chunk.getWorld()).getMobCountNear(entityplayer, enumcreaturetype),
+                                                min[0]));
+                                        difference = (min[0] == Integer.MAX_VALUE) ? 0 : min[0];
+                                    }
+
+                                    if (difference > 0) {
+                                        List spawned = SpawnerCreature.spawnMobs(enumcreaturetype, this.world, chunk, blockposition, difference);
+                                        object2intmap.put(enumcreaturetype, currEntityCount + spawned.size());
+                                        this.world.updatePlayerMobTypeMap(spawned);
+                                        // Paper end
                                     }
                                 }
                             }
diff --git a/src/main/java/net/minecraft/server/EntityTypes.java b/src/main/java/net/minecraft/server/EntityTypes.java
index a7fc34f85..6111166d3 100644
--- a/src/main/java/net/minecraft/server/EntityTypes.java
+++ b/src/main/java/net/minecraft/server/EntityTypes.java
@@ -253,6 +253,7 @@ public class EntityTypes<T extends Entity> {
         return this.be;
     }
 
+    public EnumCreatureType getEnumCreatureType(){ return this.e(); } // Paper - OBFHELPER
     public EnumCreatureType e() {
         return this.ba;
     }
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index b447c49a6..202243d0c 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -1097,6 +1097,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
     }
 
+    public Stream<EntityPlayer> getPlayersNear(ChunkCoordIntPair coordIntPair) { return a(coordIntPair, false); } // Paper - OBFHELPER
     @Override
     public Stream<EntityPlayer> a(ChunkCoordIntPair chunkcoordintpair, boolean flag) {
         return this.playerMap.a(chunkcoordintpair.pair()).filter((entityplayer) -> {
diff --git a/src/main/java/net/minecraft/server/SpawnerCreature.java b/src/main/java/net/minecraft/server/SpawnerCreature.java
index c6ea37ffb..11087fd73 100644
--- a/src/main/java/net/minecraft/server/SpawnerCreature.java
+++ b/src/main/java/net/minecraft/server/SpawnerCreature.java
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import java.util.ArrayList; // Paper
 import java.util.List;
 import java.util.Objects;
 import java.util.Random;
@@ -16,7 +17,13 @@ public final class SpawnerCreature {
 
     private static final Logger LOGGER = LogManager.getLogger();
 
+    // Paper start - add maxSpawns parameter and update counts
     public static void a(EnumCreatureType enumcreaturetype, World world, Chunk chunk, BlockPosition blockposition) {
+        spawnMobs(enumcreaturetype, world, chunk, blockposition, Integer.MAX_VALUE);
+    }
+    public static List<Entity> spawnMobs(EnumCreatureType enumcreaturetype, World world, Chunk chunk, BlockPosition blockposition, int maxSpawns) {
+        List<Entity> mobsSpawned = new ArrayList<>();
+        // Paper end
         ChunkGenerator<?> chunkgenerator = world.getChunkProvider().getChunkGenerator();
         int i = 0;
         BlockPosition blockposition1 = getRandomPosition(world, chunk);
@@ -88,7 +95,7 @@ public final class SpawnerCreature {
                                                         );
                                                         if (!event.callEvent()) {
                                                             if (event.shouldAbortSpawn()) {
-                                                                return;
+                                                                return mobsSpawned; // Paper
                                                             }
                                                             ++i2;
                                                             continue;
@@ -107,7 +114,7 @@ public final class SpawnerCreature {
                                                         } catch (Exception exception) {
                                                             SpawnerCreature.LOGGER.warn("Failed to create mob", exception);
                                                             ServerInternalException.reportInternalException(exception); // Paper
-                                                            return;
+                                                            return mobsSpawned; // Paper
                                                         }
 
                                                         entityinsentient.setPositionRotation((double) f, (double) k, (double) f1, world.random.nextFloat() * 360.0F, 0.0F);
@@ -117,10 +124,16 @@ public final class SpawnerCreature {
                                                             if (world.addEntity(entityinsentient, SpawnReason.NATURAL)) {
                                                                 ++i;
                                                                 ++i2;
+                                                                // Paper start - stop when limit is reached
+                                                                mobsSpawned.add(entityinsentient);
+                                                            }
+                                                            if (mobsSpawned.size() >= maxSpawns){
+                                                                return mobsSpawned;
                                                             }
+                                                            // Paper end
                                                             // CraftBukkit end
                                                             if (i >= entityinsentient.dC()) {
-                                                                return;
+                                                                return mobsSpawned; // Paper
                                                             }
 
                                                             if (entityinsentient.c(i2)) {
@@ -146,6 +159,7 @@ public final class SpawnerCreature {
 
             }
         }
+        return mobsSpawned; // Paper
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 649159653..9bfd7328d 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -21,6 +21,9 @@ import java.io.BufferedWriter;
 import java.io.IOException;
 import java.io.Writer;
 import java.nio.file.Files;
+import java.util.ArrayList; // Paper
+import java.util.EnumMap; // Paper
+import java.util.HashMap; // Paper
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -70,6 +73,7 @@ public class WorldServer extends World {
     private boolean ticking;
     @Nullable
     private final MobSpawnerTrader mobSpawnerTrader;
+    private Map<UUID, Map<EnumCreatureType, Integer>> playerMobTypeMap; // Paper
 
     // CraftBukkit start
     private int tickPosition;
@@ -846,6 +850,7 @@ public class WorldServer extends World {
     }
 
     public Object2IntMap<EnumCreatureType> l() {
+        List<Entity> filteredEntities = new ArrayList<>(); // Paper
         Object2IntMap<EnumCreatureType> object2intmap = new Object2IntOpenHashMap();
         ObjectIterator objectiterator = this.entitiesById.values().iterator();
 
@@ -870,14 +875,48 @@ public class WorldServer extends World {
                         entity.spawnReason == CreatureSpawnEvent.SpawnReason.CHUNK_GEN)) {
                     continue;
                 }
+                filteredEntities.add(entity);
                 // Paper end
                 object2intmap.mergeInt(enumcreaturetype, 1, Integer::sum);
             }
         }
 
+        // Paper start
+        if(this.paperConfig.perPlayerMobSpawns) {
+            this.playerMobTypeMap = new HashMap<>(this.players.size());
+            updatePlayerMobTypeMap(filteredEntities);
+        }
+        // Paper end
         return object2intmap;
     }
 
+    // Paper start
+    public void updatePlayerMobTypeMap(List<Entity> entities) {
+        if (this.playerMobTypeMap == null) { return; }
+        for (Entity entity : entities) {
+            ((ChunkProviderServer) this.chunkProvider).playerChunkMap.getPlayersNear(entity.getChunkAtLocation().getPos()).forEach( (player) -> {
+                if (!this.playerMobTypeMap.containsKey(player.uniqueID)) { this.playerMobTypeMap.put(player.uniqueID, new EnumMap<>(EnumCreatureType.class)); }
+                Map<EnumCreatureType, Integer> tmpMap = this.playerMobTypeMap.get(player.uniqueID);
+                EnumCreatureType enumType = entity.getEntityType().getEnumCreatureType();
+                tmpMap.put(
+                    enumType,
+                    tmpMap.getOrDefault(enumType, 0) + 1);
+            });
+        }
+    }
+
+    public int getMobCountNear(EntityPlayer entityPlayer, EnumCreatureType enumCreatureType) {
+        int count = 0;
+        if (this.playerMobTypeMap != null) {
+            Map<EnumCreatureType, Integer> map = this.playerMobTypeMap.get(entityPlayer.uniqueID);
+            if (map != null) {
+                count = map.getOrDefault(enumCreatureType, 0);
+            }
+        }
+        return count;
+    }
+    // Paper end
+
     @Override
     public boolean addEntity(Entity entity) {
         // CraftBukkit start
-- 
2.22.0

