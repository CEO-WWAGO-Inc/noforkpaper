#!/bin/sh
set -ue

TOOL_NAME="paper" # The name of this very tool. There is no POSIX sh way to find this.

# Find the base directory. This is the directory which contains this tool.
basedir="$(pwd -P)"
while [ ! -x "$basedir/$TOOL_NAME" ]; do # Resolve until the tool is found.
    basedir="$(cd -P "$(dirname "$basedir")" && pwd -P)" # Find the new basedir.
done

# Require all dependencies we need to exist.
"$basedir"/scripts/requireDeps.sh

# We define gitcmd and some helper functions in here.
. "$basedir"/scripts/functions.sh

case "${1:-}" in
    ## Commands: Patch and source process
    "rb" | "rbp" | "rebuild")
        "$basedir"/scripts/rebuildPatches.sh "$basedir" "${2:-}"
        ;;

    "rbf" | "rbfull")
        "$basedir"/scripts/rebuildPatches.sh "$basedir" "nofilter"
        ;;

    "p" | "patch")
        "$basedir"/scripts/build.sh "$basedir"
        ;;

    "m" | "mcdev")
        "$basedir"/scripts/makemcdevsrc.sh "$basedir"
        ;;

    ## Commands: Build and run process
    "j" | "jar")
        "$basedir"/scripts/build.sh "$basedir" "--jar"
        ;;

    "b" | "build")
        "$basedir"/scripts/build.sh "$basedir"
        (cd "$basedir"/Paper-API; mvn clean install)
        (cd "$basedir"/Paper-MojangAPI; mvn clean install)
        (cd "$basedir"/Paper-Server; mvn clean package)
        echo "Paper jar successfully built. This is not a paperclip!"
        ls -l "$basedir"/Paper-Server/target/paper*.jar
        ;;

    "pc" | "paperclip")
        "$basedir"/scripts/paperclip.sh "$basedir"
        ;;

    "t" | "test" | "testserver")
        (shift; "$basedir"/scripts/testServer.sh "$basedir" "$@")
        ;;

    ## Commands: Upstream management
    "u" | "up" | "upstream")
        "$basedir"/scripts/upstreamMerge.sh "$basedir" "$2"
        ;;

    "cu" | "commitup" | "commitupstream" | "upc" | "upcommit" | "upstreamcommit")
        (shift; "$basedir"/scripts/upstreamCommit.sh "$@")
        ;;

    ## Commands: cd into specific directories
    "r" | "root")
        cd "$basedir"
        ;;

    "a" | "api")
        cd "$basedir"/Paper-API
        ;;

    "s" | "server")
        cd "$basedir"/Paper-Server
        ;;

    "td" | "testdir")
        cd "${PAPER_TEST_DIR:-${2:-"$basedir"/work/test-server}}"
        ;;

    ## Commands: Cleanup
    "c" | "clean")
        # Ensure we're not in a subdirectory first.
        case "$(pwd)" in
            "$basedir"/*)
                # Uh oh, we're in a subdirectory.
                echo "You were in a subdirectory of the base directory and have been cd'd into the base directory before cleanup."
                cd "$basedir"
                ;;
        esac

        rm -rf "$basedir"/Paper-API "$basedir"/Paper-Server "$basedir"/work
        echo "Cleaned build files"
        ;;

    ## Commands: Rebasing
    "con" | "continue")
        if [ -d ".git/rebase-apply" ]; then
            $gitcmd am --continue
        elif [ -d ".git/rebase-merge" ]; then
            $gitcmd rebase --continue
        fi
    ;;

    "e" | "edit")
        case "${2:-}" in
            "s" | "server")
                mkdir -p "$basedir"/work/Temp
                echo "$basedir/Paper-Server" > "$basedir"/work/Temp/PAPER_LAST_EDIT
                cd "$basedir"/Paper-Server
                paperstash
                $gitcmd rebase -i upstream/upstream
                paperunstash
                ;;

            "a" | "api")
                mkdir -p "$basedir"/work/Temp
                echo "$basedir/Paper-API" > "$basedir"/work/Temp/PAPER_LAST_EDIT
                cd "$basedir"/Paper-API
                paperstash
                $gitcmd rebase -i upstream/upstream
                paperunstash
                ;;

            "c" | "continue")
                if [ ! -f "$basedir"/work/Temp/PAPER_LAST_EDIT ]; then
                    echo "You must first edit to continue."
                    exit 1
                fi
                cd "$(cat "$basedir"/work/Temp/PAPER_LAST_EDIT)"
                rm -f "$basedir"/work/Temp/PAPER_LAST_EDIT

                $gitcmd add .
                $gitcmd commit --amend
                $gitcmd rebase --continue

                "$basedir"/scripts/rebuildPatches.sh "$basedir"
                ;;

            *)
                echo "You must edit either the \`api\` or \`server\`."
                exit 1
                ;;
        esac
        ;;

    ## Commands: Deprecated
    "setup")
        echo "Please read the CONTRIBUTING.md file for information on how to do this."
        exit 1
        ;;

    ## No match, print help
    *)
        echo "PaperMC build tool command. This provides a variety of commands to build and manage the PaperMC build"
        echo "environment. For all of the functionality of this command to be available, you must first set up the"
        echo "PATH to include this script. View below for details. For essential building and patching, you do"
        echo "not need to do the setup. Read the CONTRIBUTING.md file for more information on setting up."
        echo ""
        echo " Normal commands:"
        echo "  * rb, rebuild       | Rebuild patches, can be called from anywhere."
        echo "  * p, patch          | Apply all patches to the project without building it. Can be run from anywhere."
        echo "  * j, jar            | Apply all patches and build the project, paperclip.jar will be output. Can be run from anywhere."
        echo "  * m, mcdev          | Setup decompiled sources for non-modified NMS files to be imported into an IDE. Can be run from anywhere."
        echo "  * u, up, upstream   | Updates the submodules used by Paper to their latest upstream versions."
        echo "  * t, testserver     | Run the test server with the set of plugins Paper uses as a basis for server tests."
        echo ""
        echo " These commands require setting up PATH before use:"
        echo "  * r, root           | Change directory to the root of the project."
        echo "  * a, api            | Move to the Paper-API directory."
        echo "  * s, server         | Move to the Paper-Server directory."
        echo "  * td, testdirectory | Move to the test-server directory."
        echo "  * e, edit           | Use to edit a specific patch, give it the argument \"server\" or \"api\""
        echo "                      | respectively to edit the correct project. Use the argument \"continue\" after"
        echo "                      | the changes have been made to finish and rebuild patches. Can be called from anywhere."
        ;;
esac

# vim: set ff=unix autoindent ts=4 sw=4 tw=0 et :
