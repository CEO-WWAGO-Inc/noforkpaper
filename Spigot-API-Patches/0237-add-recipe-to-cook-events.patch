From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Thonk <30448663+ExcessiveAmountsOfZombies@users.noreply.github.com>
Date: Sat, 28 Nov 2020 15:13:24 -0600
Subject: [PATCH] add recipe to cook events


diff --git a/src/main/java/org/bukkit/event/block/BlockCookEvent.java b/src/main/java/org/bukkit/event/block/BlockCookEvent.java
index be7af5440bf9923f0c9c84efa4d70a89337a2f96..cd03b48b285cd5ff1c79d5b02f7b38495633e18c 100644
--- a/src/main/java/org/bukkit/event/block/BlockCookEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockCookEvent.java
@@ -4,7 +4,9 @@ import org.bukkit.block.Block;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.Recipe;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Called when an ItemStack is successfully cooked in a block.
@@ -12,15 +14,28 @@ import org.jetbrains.annotations.NotNull;
 public class BlockCookEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private final ItemStack source;
+    private final Recipe recipe; // Paper
     private ItemStack result;
     private boolean cancelled;
 
     public BlockCookEvent(@NotNull final Block block, @NotNull final ItemStack source, @NotNull final ItemStack result) {
+        this(block, source, result, null); // Paper
+    }
+
+    // Paper start
+    public BlockCookEvent(@NotNull final Block block, @NotNull final ItemStack source, @NotNull final ItemStack result, @Nullable Recipe recipe) {
         super(block);
         this.source = source;
         this.result = result;
         this.cancelled = false;
+        this.recipe = recipe;
+    }
+
+    @Nullable
+    public Recipe getRecipe() {
+        return recipe;
     }
+    // Paper end
 
     /**
      * Gets the smelted ItemStack for this event
