From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Moulberry <james.jenour@protonmail.com>
Date: Wed, 26 Jul 2023 20:13:31 +0800
Subject: [PATCH] Implement PlayerFailMoveEvent


diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 316740b2ba4c85828f544249c8cdd6fa1b525d3f..e17fea7e89e22bb5e9e3f350be4ec964cadea5cf 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -1471,8 +1471,20 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                             }
                             // Paper start - Prevent moving into unloaded chunks
                             if (this.player.level().paperConfig().chunks.preventMovingIntoUnloadedChunks && (this.player.getX() != toX || this.player.getZ() != toZ) && !worldserver.areChunksLoadedForMove(this.player.getBoundingBox().expandTowards(new Vec3(toX, toY, toZ).subtract(this.player.position())))) {
-                                this.internalTeleport(this.player.getX(), this.player.getY(), this.player.getZ(), this.player.getYRot(), this.player.getXRot(), Collections.emptySet());
-                                return;
+                                // Paper start - Add fail move event
+                                Player player = this.getCraftPlayer();
+                                Location from = player.getLocation().clone();
+                                Location to = new Location(player.getWorld(), toX, toY, toZ, f, f1);
+                                io.papermc.paper.event.player.PlayerFailMoveEvent event = new io.papermc.paper.event.player.PlayerFailMoveEvent(player,
+                                    io.papermc.paper.event.player.PlayerFailMoveEvent.FailReason.MOVED_INTO_UNLOADED_CHUNK,
+                                    false, false, from, to);
+                                event.callEvent();
+
+                                if (!event.isAllowed()) {
+                                    this.internalTeleport(this.player.getX(), this.player.getY(), this.player.getZ(), this.player.getYRot(), this.player.getXRot(), Collections.emptySet());
+                                    return;
+                                }
+                                // Paper end
                             }
                             // Paper end
 
@@ -1481,9 +1493,23 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
                                 if (d10 - d9 > Math.max(f2, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && !this.isSingleplayerOwner()) {
                                 // CraftBukkit end
-                                    ServerGamePacketListenerImpl.LOGGER.warn("{} moved too quickly! {},{},{}", new Object[]{this.player.getName().getString(), d6, d7, d8});
-                                    this.teleport(this.player.getX(), this.player.getY(), this.player.getZ(), this.player.getYRot(), this.player.getXRot());
-                                    return;
+                                    // Paper start - Add fail move event
+                                    Player player = this.getCraftPlayer();
+                                    Location from = player.getLocation().clone();
+                                    Location to = new Location(player.getWorld(), toX, toY, toZ, f, f1);
+                                    io.papermc.paper.event.player.PlayerFailMoveEvent event = new io.papermc.paper.event.player.PlayerFailMoveEvent(player,
+                                        io.papermc.paper.event.player.PlayerFailMoveEvent.FailReason.MOVED_TOO_QUICKLY,
+                                        false, true, from, to);
+                                    event.callEvent();
+
+                                    if (!event.isAllowed()) {
+                                        if (event.getLogWarning()) {
+                                            ServerGamePacketListenerImpl.LOGGER.warn("{} moved too quickly! {},{},{}", new Object[]{this.player.getName().getString(), d6, d7, d8});
+                                        }
+                                        this.teleport(this.player.getX(), this.player.getY(), this.player.getZ(), this.player.getYRot(), this.player.getXRot());
+                                        return;
+                                    }
+                                    // Paper end
                                 }
                             }
 
@@ -1548,8 +1574,22 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                             boolean flag2 = false;
 
                             if (!this.player.isChangingDimension() && d10 > org.spigotmc.SpigotConfig.movedWronglyThreshold && !this.player.isSleeping() && !this.player.gameMode.isCreative() && this.player.gameMode.getGameModeForPlayer() != GameType.SPECTATOR) { // Spigot
-                                flag2 = true; // Paper - diff on change, this should be moved wrongly
-                                ServerGamePacketListenerImpl.LOGGER.warn("{} moved wrongly!", this.player.getName().getString());
+                                // Paper start - Add fail move event
+                                Player player = this.getCraftPlayer();
+                                Location from = new Location(player.getWorld(), this.lastPosX, this.lastPosY, this.lastPosZ, this.lastYaw, this.lastPitch);
+                                Location to = new Location(player.getWorld(), toX, toY, toZ, f, f1);
+                                io.papermc.paper.event.player.PlayerFailMoveEvent event = new io.papermc.paper.event.player.PlayerFailMoveEvent(player,
+                                    io.papermc.paper.event.player.PlayerFailMoveEvent.FailReason.MOVED_WRONGLY,
+                                    false, true, from, to);
+                                event.callEvent();
+
+                                if (!event.isAllowed()) {
+                                    flag2 = true; // Paper - diff on change, this should be moved wrongly
+                                    if (event.getLogWarning()) {
+                                        ServerGamePacketListenerImpl.LOGGER.warn("{} moved wrongly!", this.player.getName().getString());
+                                    }
+                                }
+                                // Paper end
                             }
 
                             // Paper start - optimise out extra getCubes
@@ -1562,6 +1602,21 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                                 if (didCollide || !axisalignedbb.equals(newBox)) {
                                     // note: only call after setLocation, or else getBoundingBox is wrong
                                     teleportBack = this.hasNewCollision(worldserver, this.player, axisalignedbb, newBox);
+                                    // Paper start - Add fail move event
+                                    if (teleportBack) {
+                                        Player player = this.getCraftPlayer();
+                                        Location from = new Location(player.getWorld(), this.lastPosX, this.lastPosY, this.lastPosZ, this.lastYaw, this.lastPitch);
+                                        Location to = new Location(player.getWorld(), toX, toY, toZ, f, f1);
+                                        io.papermc.paper.event.player.PlayerFailMoveEvent event = new io.papermc.paper.event.player.PlayerFailMoveEvent(player,
+                                            io.papermc.paper.event.player.PlayerFailMoveEvent.FailReason.CLIPPED_INTO_BLOCK,
+                                            false, false, from, to);
+                                        event.callEvent();
+
+                                        if (event.isAllowed()) {
+                                            teleportBack = false;
+                                        }
+                                    }
+                                    // Paper end
                                 } // else: no collision at all detected, why do we care?
                             }
                             if (!this.player.noPhysics && !this.player.isSleeping() && teleportBack) { // Paper end - optimise out extra getCubes
