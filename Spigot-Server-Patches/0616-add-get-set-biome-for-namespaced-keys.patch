From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Thonk <30448663+ExcessiveAmountsOfZombies@users.noreply.github.com>
Date: Sun, 13 Dec 2020 23:12:42 -0600
Subject: [PATCH] add get/set biome for namespaced keys


diff --git a/src/main/java/net/minecraft/server/IRegistry.java b/src/main/java/net/minecraft/server/IRegistry.java
index 6c7caef36b484a16b62977b5495247588c34dc2b..b4a67c359e95761a1099e581fae44c8201b943f1 100644
--- a/src/main/java/net/minecraft/server/IRegistry.java
+++ b/src/main/java/net/minecraft/server/IRegistry.java
@@ -156,7 +156,7 @@ public abstract class IRegistry<T> implements Codec<T>, Keyable, Registry<T> {
     public static final ResourceKey<IRegistry<StructureFeature<?, ?>>> av = a("worldgen/configured_structure_feature");
     public static final ResourceKey<IRegistry<ProcessorList>> aw = a("worldgen/processor_list");
     public static final ResourceKey<IRegistry<WorldGenFeatureDefinedStructurePoolTemplate>> ax = a("worldgen/template_pool");
-    public static final ResourceKey<IRegistry<BiomeBase>> ay = a("worldgen/biome");
+    public static final ResourceKey<IRegistry<BiomeBase>> ay = a("worldgen/biome"); public static ResourceKey<IRegistry<BiomeBase>> getBiomeKeys() { return ay; } // paper - OBFhelper
     public static final ResourceKey<IRegistry<WorldGenSurface<?>>> az = a("worldgen/surface_builder");
     public static final IRegistry<WorldGenSurface<?>> SURFACE_BUILDER = a(IRegistry.az, () -> {
         return WorldGenSurface.v;
@@ -266,9 +266,9 @@ public abstract class IRegistry<T> implements Codec<T>, Keyable, Registry<T> {
         MinecraftKey minecraftkey = resourcekey.a();
 
         IRegistry.a.put(minecraftkey, supplier);
-        IRegistryWritable<R> iregistrywritable = IRegistry.e;
+        IRegistryWritable<R> iregistrywritable = (IRegistryWritable<R>) IRegistry.e; // Paper - decompile fix
 
-        return (IRegistryWritable) iregistrywritable.a(resourcekey, (Object) r0, lifecycle);
+        return (R) iregistrywritable.a((ResourceKey<R>) resourcekey, r0, lifecycle); // Paper - decompile fix
     }
 
     protected IRegistry(ResourceKey<? extends IRegistry<T>> resourcekey, Lifecycle lifecycle) {
@@ -355,11 +355,11 @@ public abstract class IRegistry<T> implements Codec<T>, Keyable, Registry<T> {
     }
 
     public static <V, T extends V> T a(IRegistry<V> iregistry, MinecraftKey minecraftkey, T t0) {
-        return ((IRegistryWritable) iregistry).a(ResourceKey.a(iregistry.b, minecraftkey), t0, Lifecycle.stable());
+        return (T) ((IRegistryWritable) iregistry).a(ResourceKey.a(iregistry.b, minecraftkey), t0, Lifecycle.stable()); // Paper - decompile fix
     }
 
     public static <V, T extends V> T a(IRegistry<V> iregistry, int i, String s, T t0) {
-        return ((IRegistryWritable) iregistry).a(i, ResourceKey.a(iregistry.b, new MinecraftKey(s)), t0, Lifecycle.stable());
+        return (T) ((IRegistryWritable) iregistry).a(i, ResourceKey.a(iregistry.b, new MinecraftKey(s)), t0, Lifecycle.stable()); // Paper - decompile fix
     }
 
     static {
diff --git a/src/main/java/net/minecraft/server/IRegistryCustom.java b/src/main/java/net/minecraft/server/IRegistryCustom.java
index a8f5d6c025f73f6af7ffdcbbf50d9fd0361c5bdd..cac3540bbae31fec2dd2b6ed3c1aa72acc847dff 100644
--- a/src/main/java/net/minecraft/server/IRegistryCustom.java
+++ b/src/main/java/net/minecraft/server/IRegistryCustom.java
@@ -56,6 +56,7 @@ public abstract class IRegistryCustom {
             return new IllegalStateException("Missing registry: " + resourcekey);
         });
     }
+    public <E> IRegistryWritable<E> getRegistry(ResourceKey<? extends IRegistry<E>> resourcekey) { return b(resourcekey); } // Paper - OBFHELPER
 
     public IRegistry<DimensionManager> a() {
         return this.b(IRegistry.K);
@@ -105,7 +106,7 @@ public abstract class IRegistryCustom {
     }
 
     private static <R extends IRegistry<?>> void a(IRegistryCustom.Dimension iregistrycustom_dimension, ResourceKey<R> resourcekey) {
-        IRegistry<R> iregistry = RegistryGeneration.b;
+        IRegistry<R> iregistry = (IRegistry<R>) RegistryGeneration.b; // paper - decompile fix
         IRegistry<?> iregistry1 = (IRegistry) iregistry.a(resourcekey);
 
         if (iregistry1 == null) {
@@ -199,14 +200,12 @@ public abstract class IRegistryCustom {
         }
 
         private static <E> RegistryMaterials<?> d(ResourceKey<? extends IRegistry<?>> resourcekey) {
-            return new RegistryMaterials<>(resourcekey, Lifecycle.stable());
+            return new RegistryMaterials(resourcekey, Lifecycle.stable()); // Paper - decompile fix
         }
 
         @Override
         public <E> Optional<IRegistryWritable<E>> a(ResourceKey<? extends IRegistry<E>> resourcekey) {
-            return Optional.ofNullable(this.b.get(resourcekey)).map((registrymaterials) -> {
-                return registrymaterials;
-            });
+            return Optional.ofNullable((IRegistryWritable<E>) this.b.get(resourcekey)); // Paper - decompile fix
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 5b0b6edfa790918e56399ff6c83f3feb6e5aca49..26ecdd39fc30baff0f58eb5b212a179e0bb8cd75 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -1768,6 +1768,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
     public IRegistryCustom r() {
         return this.server.getCustomRegistry();
     }
+    public IRegistryCustom getCustomRegistry() { return r(); } // Paper - OBFHELPER
 
     public WorldPersistentData getWorldPersistentData() {
         return this.getChunkProvider().getWorldPersistentData();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index b71316cce3bdbf3485be456f0260c6b3463cff8e..0565955b1f5c6db226a0c9c7acc65d58698b102b 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -103,6 +103,7 @@ import org.bukkit.Effect;
 import org.bukkit.FluidCollisionMode;
 import org.bukkit.GameRule;
 import org.bukkit.Location;
+import org.bukkit.NamespacedKey;
 import org.bukkit.Particle;
 import org.bukkit.Raid;
 import org.bukkit.Sound;
@@ -1087,6 +1088,31 @@ public class CraftWorld implements World {
         return CraftBlock.biomeBaseToBiome(getHandle().r().b(IRegistry.ay), this.world.getBiome(x >> 2, y >> 2, z >> 2));
     }
 
+    // Paper start
+    @Override
+    public NamespacedKey getBiomeKey(int x, int y, int z) {
+        return CraftBlock.biomeBaseToKey(getHandle().getCustomRegistry().getRegistry(IRegistry.getBiomeKeys()), this.world.getBiome(x >> 2, y >> 2, z >> 2));
+    }
+
+
+    @Override
+    public void setBiome(int x, int y, int z, NamespacedKey key) {
+        BiomeBase base = CraftBlock.biomeToBiomeBase(getHandle().getCustomRegistry().getRegistry(IRegistry.getBiomeKeys()), key);
+        if (base == null) {
+            throw new NullPointerException("Invalid biome key, biome was null.");
+        }
+        BlockPosition pos = new BlockPosition(x, 0, z);
+        if (this.world.isLoaded(pos)) {
+            net.minecraft.server.Chunk chunk = this.world.getChunkAtWorldCoords(pos);
+
+            if (chunk != null) {
+                chunk.getBiomeIndex().setBiome(x >> 2, y >> 2, z >> 2, base);
+
+                chunk.markDirty(); // SPIGOT-2890
+            }
+        }
+    }
+    // paper end
     @Override
     public void setBiome(int x, int z, Biome bio) {
         for (int y = 0; y < getMaxHeight(); y++) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index 6fde449aca446001145e49b5859725f840cc317c..e03788fc20fffe54b1e24a5c64cedffb6fa0d638 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -33,6 +33,7 @@ import org.bukkit.Chunk;
 import org.bukkit.FluidCollisionMode;
 import org.bukkit.Location;
 import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
 import org.bukkit.Registry;
 import org.bukkit.World;
 import org.bukkit.block.Biome;
@@ -503,6 +504,16 @@ public class CraftBlock implements Block {
         return getWorld().getBiome(getX(), getY(), getZ());
     }
 
+    // Paper start
+    public NamespacedKey getBiomeKey() {
+        return getWorld().getBiomeKey(getX(), getY(), getZ());
+    }
+
+    @Override
+    public void setBiome(NamespacedKey key) {
+        getWorld().setBiome(getX(), getY(), getZ(), key);
+    }
+    // Paper end
     @Override
     public void setBiome(Biome bio) {
         getWorld().setBiome(getX(), getY(), getZ(), bio);
@@ -515,6 +526,19 @@ public class CraftBlock implements Block {
 
         return Registry.BIOME.get(CraftNamespacedKey.fromMinecraft(registry.getKey(base)));
     }
+    // Paper start
+    public static NamespacedKey biomeBaseToKey(IRegistry<BiomeBase> registry, BiomeBase base) {
+        if (base == null) {
+            return null;
+        }
+
+        return CraftNamespacedKey.fromMinecraft(registry.getKey(base));
+    }
+
+    public static BiomeBase biomeToBiomeBase(IRegistry<BiomeBase> registry, NamespacedKey key) {
+        return registry.get(CraftNamespacedKey.toMinecraft(key));
+    }
+    // Paper end
 
     public static BiomeBase biomeToBiomeBase(IRegistry<BiomeBase> registry, Biome bio) {
         if (bio == null) {
