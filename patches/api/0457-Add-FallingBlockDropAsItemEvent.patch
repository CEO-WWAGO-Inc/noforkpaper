From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Esophose <esophose@gmail.com>
Date: Sat, 6 Jan 2024 20:44:16 -0700
Subject: [PATCH] Add FallingBlockDropAsItemEvent


diff --git a/src/main/java/io/papermc/paper/event/entity/FallingBlockDropAsItemEvent.java b/src/main/java/io/papermc/paper/event/entity/FallingBlockDropAsItemEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..240d4d7fab95c7408da317ec8452d9f033a1abad
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/entity/FallingBlockDropAsItemEvent.java
@@ -0,0 +1,83 @@
+package io.papermc.paper.event.entity;
+
+import org.bukkit.entity.FallingBlock;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.EntityEvent;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when a {@link FallingBlock} is going to be dropped as an item.
+ * <p>
+ * Only called when {@link FallingBlock#getDropItem()} is <code>true</code> and {@link FallingBlock#getCancelDrop()} is <code>false</code>.
+ * <p>
+ * This can happen due to the following causes:
+ * <ul>
+ *     <li>The FallingBlock tried to land but broke due to no valid space</li>
+ *     <li>The EntityChangeBlockEvent for the FallingBlock was cancelled</li>
+ *     <li>The FallingBlock has expired</li>
+ * </ul>
+ */
+public class FallingBlockDropAsItemEvent extends EntityEvent implements Cancellable {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    private ItemStack toDrop;
+    private boolean cancelled;
+
+    public FallingBlockDropAsItemEvent(@NotNull FallingBlock fallingBlock, @NotNull ItemStack toDrop) {
+        super(fallingBlock);
+        this.toDrop = toDrop;
+    }
+
+    /**
+     * Returns the {@link FallingBlock} that is being dropped as an item
+     *
+     * @return The falling block that is being dropped as an item
+     */
+    @Override
+    public @NotNull FallingBlock getEntity() {
+        return (FallingBlock) entity;
+    }
+
+    /**
+     * Gets the {@link ItemStack} to be dropped.
+     *
+     * @return The item to be dropped
+     */
+    public @NotNull ItemStack getItem() {
+        return toDrop;
+    }
+
+    /**
+     * Sets the {@link ItemStack} to be dropped.
+     *
+     * @param itemStack The item to be dropped
+     */
+    public void setItem(@NotNull ItemStack itemStack) {
+        toDrop = itemStack;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+
+}
