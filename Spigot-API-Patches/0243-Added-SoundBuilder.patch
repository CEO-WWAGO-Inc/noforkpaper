From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Fruxz <cedricspitzer@outlook.de>
Date: Fri, 18 Dec 2020 01:02:39 +0100
Subject: [PATCH] Added SoundBuilder


diff --git a/src/main/java/io/papermc/paper/sound/SoundBuilder.java b/src/main/java/io/papermc/paper/sound/SoundBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..38655c591f6a1063f6405504aeac0cb0c227154e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/sound/SoundBuilder.java
@@ -0,0 +1,164 @@
+package io.papermc.paper.sound;
+
+import org.bukkit.Location;
+import org.bukkit.Sound;
+import org.bukkit.SoundCategory;
+import org.bukkit.World;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Collection;
+
+/**
+ * This class helps to easily and flexibly transmit sound with
+ * specifications and additional parameters to desired players
+ * so that they can hear the sounds at the desired location.
+ */
+public interface SoundBuilder {
+
+    /**
+     * This will do play the sound with the entered parameters
+     * and specifications to all specified receivers at the
+     * desired position.
+     */
+    @NotNull
+    void play();
+
+    /**
+     * @return The sound going to be sent
+     */
+    @NotNull
+    Sound sound();
+
+    /**
+     * Changes what sound will be sent
+     *
+     * @param sound The sound
+     * @return a reference to this object.
+     */
+    @NotNull
+    SoundBuilder sound(@NotNull Sound sound);
+
+    /**
+     * @return The category under which the sound will be played
+     */
+    @NotNull
+    SoundCategory category();
+
+    /**
+     * Changes under which category the sound will be played
+     */
+    @NotNull
+    SoundBuilder category(@NotNull SoundCategory category);
+
+    /**
+     * @return The volume level of the sound played
+     */
+    float volume();
+
+    /**
+     * Changes the volume level of the sound played
+     *
+     * @param volume The volume
+     * @return a reference to this object.
+     */
+    @NotNull
+    SoundBuilder volume(float volume);
+
+    /**
+     * @return The pitch of the sound played
+     */
+    float pitch();
+
+    /**
+     * Changes the pitch of the sound played
+     *
+     * @param pitch The pitch
+     * @return a reference to this object.
+     */
+    @NotNull
+    SoundBuilder pitch(float pitch);
+
+    /**
+     * @return List of players who will receive the sound, or null for no one
+     */
+    @Nullable
+    Collection<Player> receivers();
+
+    /**
+     * @return If this sound is going to be sent to someone specific
+     */
+    boolean hasReceivers();
+
+    /**
+     * Sends this sound to all players in the world. (they have to be near to hear it)
+     *
+     * @return a reference to this object.
+     */
+    @NotNull
+    SoundBuilder allPlayers();
+
+    /**
+     * @param receivers List of players to receive this sound, or null for no one
+     *
+     * @return a reference to this object.
+     */
+    @NotNull
+    SoundBuilder receivers(@Nullable Collection<Player> receivers);
+
+    /**
+     * @param receivers Array of players to be receive this sound
+     *
+     * @return a reference to this object.
+     */
+    @NotNull
+    SoundBuilder receivers(@NotNull Player... receivers);
+
+    /**
+     * Selects all players within a specified radius around the sound location as sound receivers
+     *
+     * @param radius radius around the sound location
+     * @return a reference to this object.
+     */
+    @NotNull
+    SoundBuilder receivers(int radius);
+
+    /**
+     * Selects all players within a specified radius around the sound location as sound receivers
+     *
+     * @param radiusxz horizontal radius around the sound location
+     * @param radiusy vertical radius around the sound location
+     * @return a reference to this object.
+     */
+    @NotNull
+    SoundBuilder receivers(int radiusxz, int radiusy);
+
+    /**
+     * @return Location of where the sound will play
+     */
+    @NotNull
+    Location location();
+
+    /**
+     * Sets the location of where to play the sound
+     *
+     * @param location The location of the sound
+     * @return a reference to this object.
+     */
+    @NotNull
+    SoundBuilder location(@NotNull Location location);
+
+    /**
+     * Sets the location of where to play the sound
+     *
+     * @param world World to play sounds in
+     * @param x X location
+     * @param y Y location
+     * @param z Z location
+     * @return a reference to this object.
+     */
+    @NotNull
+    SoundBuilder location(@NotNull World world, double x, double y, double z);
+
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index fecd7b14d317f55eb1ce7b5c6af9913917971427..2c638bfab3929e359cb90384c0ac09143f445d82 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -13,6 +13,8 @@ import java.util.Set;
 import java.util.UUID;
 import java.util.function.Consumer;
 import java.util.logging.Logger;
+
+import io.papermc.paper.sound.SoundBuilder; // Paper
 import org.bukkit.Warning.WarningState;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.block.data.BlockData;
@@ -1193,6 +1195,31 @@ public final class Bukkit {
         return server.createMerchant(title);
     }
 
+    /**
+     * Creates an empty SoundBuilder
+     *
+     * @param sound the type of the sound, which will be played
+     * @param location the location fo the sound, which will be played
+     * @return a new sound builder
+     */
+    @NotNull
+    public static SoundBuilder createSoundBuilder(@NotNull Sound sound, @NotNull Location location) {
+        return server.createSoundBuilder(sound, location);
+    }
+
+    /**
+     * Creates an empty SoundBuilder
+     *
+     * @param sound the type of the sound, which will be played
+     * @param category the category of the played sound
+     * @param location the location fo the sound, which will be played
+     * @return a new sound builder
+     */
+    @NotNull
+    public static SoundBuilder createSoundBuilder(@NotNull Sound sound, @NotNull SoundCategory category, @NotNull Location location) {
+        return server.createSoundBuilder(sound, category, location);
+    }
+
     /**
      * Gets user-specified limit for number of monsters that can spawn in a
      * chunk.
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 8e01e1bbb7cfd98b47dbdb3a0e132dafd1413de6..613bc94b2be656ccf21546b593d846c94cf8b9bb 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -13,6 +13,8 @@ import java.util.Set;
 import java.util.UUID;
 import java.util.function.Consumer;
 import java.util.logging.Logger;
+
+import io.papermc.paper.sound.SoundBuilder; // Paper
 import org.bukkit.Warning.WarningState;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.block.data.BlockData;
@@ -1002,6 +1004,19 @@ public interface Server extends PluginMessageRecipient {
     @NotNull
     Merchant createMerchant(@Nullable String title);
 
+    /**
+     * Creates an empty SoundBuilder.
+     */
+    @NotNull
+    SoundBuilder createSoundBuilder(@NotNull Sound sound, @NotNull Location location);
+
+    /**
+     * Creates an empty SoundBuilder.
+     */
+    @NotNull
+    SoundBuilder createSoundBuilder(@NotNull Sound sound, @NotNull SoundCategory category, @NotNull Location location);
+
+
     /**
      * Gets user-specified limit for number of monsters that can spawn in a
      * chunk.
