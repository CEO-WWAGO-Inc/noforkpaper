From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: The456gamer <the456gamer@the456gamer.dev>
Date: Mon, 28 Aug 2023 01:32:39 +0100
Subject: [PATCH] Fix spigot's Forced-Stats

moves the loading after vanilla loading, so it overrides the values.
disables saving any forced stats, so it stays at the same value (without enabling disableStatSaving)
fixes stat initialization to not cause a NullPointerException

diff --git a/src/main/java/net/minecraft/stats/ServerStatsCounter.java b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
index 9501e5f25f5c4d3069e554d4dc82b0e094156682..c5c156b30c70604b6d7d8b73048048abf65a7419 100644
--- a/src/main/java/net/minecraft/stats/ServerStatsCounter.java
+++ b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
@@ -48,13 +48,13 @@ public class ServerStatsCounter extends StatsCounter {
     public ServerStatsCounter(MinecraftServer server, File file) {
         this.server = server;
         this.file = file;
-        // Spigot start
-        for ( Map.Entry<ResourceLocation, Integer> entry : org.spigotmc.SpigotConfig.forcedStats.entrySet() )
-        {
-            Stat<ResourceLocation> wrapper = Stats.CUSTOM.get( entry.getKey() );
-            this.stats.put( wrapper, entry.getValue().intValue() );
-        }
-        // Spigot end
+        // Spigot start // Paper Start - move down and fix forcedStats
+        // for ( Map.Entry<ResourceLocation, Integer> entry : org.spigotmc.SpigotConfig.forcedStats.entrySet() )
+        // {
+        //    Stat<ResourceLocation> wrapper = Stats.CUSTOM.get( entry.getKey() );
+        //    this.stats.put( wrapper, entry.getValue().intValue() );
+        // }
+        // Spigot end // Paper end - move down and fix forcedStats
         if (file.isFile()) {
             try {
                 this.parseLocal(server.getFixerUpper(), FileUtils.readFileToString(file));
@@ -64,7 +64,7 @@ public class ServerStatsCounter extends StatsCounter {
                 ServerStatsCounter.LOGGER.error("Couldn't parse statistics file {}", file, jsonparseexception);
             }
         }
-
+        org.spigotmc.SpigotConfig.forcedStats.entrySet().forEach(entry -> BuiltInRegistries.CUSTOM_STAT.getOptional(entry.getKey()).ifPresent(resourceLocation -> this.stats.put(Stats.CUSTOM.get(resourceLocation), entry.getValue().intValue()))); // Paper start - move down and fix forcedStats
     }
 
     public void save() {
@@ -80,6 +80,11 @@ public class ServerStatsCounter extends StatsCounter {
     @Override
     public void setValue(Player player, Stat<?> stat, int value) {
         if ( org.spigotmc.SpigotConfig.disableStatSaving ) return; // Spigot
+        // Paper start - disable saving forced stats
+        if (stat.getType() == Stats.CUSTOM && stat.getValue() instanceof ResourceLocation resourceLocation) {
+            if (org.spigotmc.SpigotConfig.forcedStats.get(resourceLocation) != null) { return; }
+        }
+        // Paper end - disable saving forced stats
         super.setValue(player, stat, value);
         this.dirty.add(stat);
     }
