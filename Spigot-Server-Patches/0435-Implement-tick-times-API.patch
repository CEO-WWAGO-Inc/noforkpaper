From 00e0b9c64ff7d2ba6649dd82817ec2a0dd203c2a Mon Sep 17 00:00:00 2001
From: William Blake Galbreath <Blake.Galbreath@GMail.com>
Date: Sun, 2 Feb 2020 03:29:04 -0600
Subject: [PATCH] Implement tick times API


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 346664cee..c9deaffc4 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -105,7 +105,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     private String motd;
     private int G;
     private int H;
-    public final long[] f = new long[100];
+    public final long[] f = new long[100]; public long[] getTickTimes() { return f; } // Paper - OBFHELPER
     @Nullable
     private KeyPair I;
     @Nullable
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index ee5c57ca2..88e9aa183 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -2169,5 +2169,20 @@ public final class CraftServer implements Server {
     public int getCurrentTick() {
         return net.minecraft.server.MinecraftServer.currentTick;
     }
+
+    @Override
+    public long[] getTickTimes() {
+        return getServer().getTickTimes().clone();
+    }
+
+    @Override
+    public double getAverageTickTime() {
+        long total = 0L;
+        long[] tickTimes = getTickTimes();
+        for (long value : tickTimes) {
+            total += value;
+        }
+        return ((double) total / (double) tickTimes.length) * 1.0E-6D;
+    }
     // Paper end
 }
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index 6d21c3269..7ca605f81 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -6,6 +6,7 @@ import org.bukkit.command.CommandSender;
 
 public class TicksPerSecondCommand extends Command
 {
+    private static final java.text.DecimalFormat DF = new java.text.DecimalFormat("########0.000"); // Paper
 
     public TicksPerSecondCommand(String name)
     {
@@ -30,12 +31,20 @@ public class TicksPerSecondCommand extends Command
         for ( int i = 0; i < tps.length; i++) {
             tpsAvg[i] = format( tps[i] );
         }
+        double avg = org.bukkit.Bukkit.getAverageTickTime();
         sender.sendMessage( ChatColor.GOLD + "TPS from last 1m, 5m, 15m: " + org.apache.commons.lang.StringUtils.join(tpsAvg, ", "));
+        sender.sendMessage( ChatColor.GOLD + "Average tick time: " + getColor(avg) + DF.format(avg) + " ms");
         // Paper end
 
         return true;
     }
 
+    // Paper start
+    private static String getColor(double avg) {
+        return (avg >= 50 ? ChatColor.RED : avg >= 40 ? ChatColor.YELLOW : ChatColor.GREEN).toString();
+    }
+    // Paper end
+
     private static String format(double tps) // Paper - Made static
     {
         return ( ( tps > 18.0 ) ? ChatColor.GREEN : ( tps > 16.0 ) ? ChatColor.YELLOW : ChatColor.RED ).toString()
-- 
2.24.0

