From 6f06e8b8f2d2ddc5cc117ca776c0069457070e3e Mon Sep 17 00:00:00 2001
From: kickash32 <kickash32@gmail.com>
Date: Fri, 26 Jul 2019 10:24:32 +0500
Subject: [PATCH] implement optional per player mob spawns


diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index 318a470ee..ff1e27e7d 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -562,4 +562,9 @@ public class PaperWorldConfig {
     private void disableRelativeProjectileVelocity() {
         disableRelativeProjectileVelocity = getBoolean("game-mechanics.disable-relative-projectile-velocity", false);
     }
+
+    public boolean perPlayerMobSpawns = false;
+    private void perPlayerMobSpawns() {
+        perPlayerMobSpawns = getBoolean("per-player-mob-spawns", false);
+    }
 }
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index bf566135b..d1c4e4581 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -415,7 +415,7 @@ public class ChunkProviderServer extends IChunkProvider {
             this.world.timings.countNaturalMobs.startTiming(); // Paper - timings
             int l = this.chunkMapDistance.b();
             EnumCreatureType[] aenumcreaturetype = EnumCreatureType.values();
-            Object2IntMap<EnumCreatureType> object2intmap = this.world.l();
+            Object2IntMap<EnumCreatureType> object2intmap = this.world.countMobs(true); // Paper -- update player mob counts
 
             this.world.timings.countNaturalMobs.stopTiming(); // Paper - timings
             this.world.getMethodProfiler().exit();
@@ -468,8 +468,25 @@ public class ChunkProviderServer extends IChunkProvider {
                                 if (enumcreaturetype != EnumCreatureType.MISC && (!enumcreaturetype.c() || this.allowAnimals) && (enumcreaturetype.c() || this.allowMonsters) && (!enumcreaturetype.d() || flag2)) {
                                     int k1 = limit * l / ChunkProviderServer.b; // CraftBukkit - use per-world limits
 
-                                    if (object2intmap.getInt(enumcreaturetype) <= k1) {
-                                        SpawnerCreature.a(enumcreaturetype, (World) this.world, chunk, blockposition);
+                                    // Paper start - only allow spawns upto the limit per chunk and update count afterwards
+                                    int currEntityCount = object2intmap.getInt(enumcreaturetype);
+                                    int difference = k1 - currEntityCount;
+
+                                    if (this.world.paperConfig.perPlayerMobSpawns) {
+                                        int minDiff = Integer.MAX_VALUE;
+                                        for(EntityPlayer entityplayer : playerChunkMap.getPlayersNear(chunk.getPos())) {
+                                            if (entityplayer.isSpectator() || !entityplayer.affectsSpawning) { continue; }
+                                            minDiff = Math.min(limit - this.world.getMobCountNear(entityplayer, enumcreaturetype), minDiff);
+                                        }
+                                        difference = (minDiff == Integer.MAX_VALUE) ? 0 : minDiff;
+                                    }
+
+                                    if (difference > 0) {
+                                        SpawnerCreature.spawnMobs(enumcreaturetype, this.world, chunk, blockposition, difference, entity -> {
+                                            this.world.updatePlayerMobCounts(entity);
+                                            object2intmap.put(enumcreaturetype, currEntityCount + 1);
+                                        });
+                                    // Paper end
                                     }
                                 }
                             }
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 18695d9b5..764dd97ef 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -80,6 +80,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     public boolean queueHealthUpdatePacket = false;
     public net.minecraft.server.PacketPlayOutUpdateHealth queuedHealthUpdatePacket;
     // Paper end
+    public int[] mobCounts = new int[EnumCreatureType.values().length]; // Paper
 
     // CraftBukkit start
     public String displayName;
diff --git a/src/main/java/net/minecraft/server/EntityTypes.java b/src/main/java/net/minecraft/server/EntityTypes.java
index a7fc34f85..612b9b7e3 100644
--- a/src/main/java/net/minecraft/server/EntityTypes.java
+++ b/src/main/java/net/minecraft/server/EntityTypes.java
@@ -253,6 +253,7 @@ public class EntityTypes<T extends Entity> {
         return this.be;
     }
 
+    public EnumCreatureType getEnumCreatureType() { return this.e(); } // Paper - OBFHELPER
     public EnumCreatureType e() {
         return this.ba;
     }
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index fd0d2b6e6..edb517d20 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -146,6 +146,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         return d2 * d2 + d3 * d3;
     }
 
+    private static int distanceBetween(ChunkCoordIntPair chunkcoordintpair, EntityPlayer entityplayer) { return b(chunkcoordintpair, entityplayer, true); } // Paper - OBFHELPER
     private static int b(ChunkCoordIntPair chunkcoordintpair, EntityPlayer entityplayer, boolean flag) {
         int i;
         int j;
@@ -1115,6 +1116,14 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
     }
 
+    // Paper start
+    public List<EntityPlayer> getPlayersNear(ChunkCoordIntPair chunkcoordintpair) {
+        List<EntityPlayer> players = this.playerMap.getPlayers();
+        players.removeIf(
+            entityplayer -> distanceBetween(chunkcoordintpair, entityplayer) > this.viewDistance);
+        return players;
+    }
+    // Paper end
     @Override
     public Stream<EntityPlayer> a(ChunkCoordIntPair chunkcoordintpair, boolean flag) {
         return this.playerMap.a(chunkcoordintpair.pair()).filter((entityplayer) -> {
diff --git a/src/main/java/net/minecraft/server/PlayerMap.java b/src/main/java/net/minecraft/server/PlayerMap.java
index f386c4e99..f8f35b0e0 100644
--- a/src/main/java/net/minecraft/server/PlayerMap.java
+++ b/src/main/java/net/minecraft/server/PlayerMap.java
@@ -10,6 +10,7 @@ public final class PlayerMap {
 
     public PlayerMap() {}
 
+    public java.util.List<EntityPlayer> getPlayers() { return new java.util.ArrayList<>(this.a.keySet()); } // Paper - Based on method below without streams
     public Stream<EntityPlayer> a(long i) {
         return this.a.keySet().stream();
     }
diff --git a/src/main/java/net/minecraft/server/SpawnerCreature.java b/src/main/java/net/minecraft/server/SpawnerCreature.java
index c6ea37ffb..899c8c172 100644
--- a/src/main/java/net/minecraft/server/SpawnerCreature.java
+++ b/src/main/java/net/minecraft/server/SpawnerCreature.java
@@ -3,6 +3,7 @@ package net.minecraft.server;
 import java.util.List;
 import java.util.Objects;
 import java.util.Random;
+import java.util.function.Consumer; // Paper
 import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -16,9 +17,14 @@ public final class SpawnerCreature {
 
     private static final Logger LOGGER = LogManager.getLogger();
 
+    // Paper start - add maxSpawns parameter and return spawned mobs
     public static void a(EnumCreatureType enumcreaturetype, World world, Chunk chunk, BlockPosition blockposition) {
+        spawnMobs(enumcreaturetype, world, chunk, blockposition, Integer.MAX_VALUE, entity -> {});
+    }
+    public static void spawnMobs(EnumCreatureType enumcreaturetype, World world, Chunk chunk, BlockPosition blockposition, int maxSpawns, Consumer<Entity> trackEntity) {
+    // Paper end
         ChunkGenerator<?> chunkgenerator = world.getChunkProvider().getChunkGenerator();
-        int i = 0;
+        int i = 0; // Paper - force diff on name change
         BlockPosition blockposition1 = getRandomPosition(world, chunk);
         int j = blockposition1.getX();
         int k = blockposition1.getY();
@@ -115,9 +121,11 @@ public final class SpawnerCreature {
                                                             groupdataentity = entityinsentient.prepare(world, world.getDamageScaler(new BlockPosition(entityinsentient)), EnumMobSpawn.NATURAL, groupdataentity, (NBTTagCompound) null);
                                                             // CraftBukkit start
                                                             if (world.addEntity(entityinsentient, SpawnReason.NATURAL)) {
-                                                                ++i;
+                                                                ++i; // Paper - force diff on name change
                                                                 ++i2;
+                                                                trackEntity.accept(entityinsentient); // Paper
                                                             }
+                                                            if (i >= maxSpawns) { return; } // Paper
                                                             // CraftBukkit end
                                                             if (i >= entityinsentient.dC()) {
                                                                 return;
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 451ad4f32..03ec84be4 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -880,7 +880,17 @@ public class WorldServer extends World {
         return list.isEmpty() ? null : (EntityPlayer) list.get(this.random.nextInt(list.size()));
     }
 
-    public Object2IntMap<EnumCreatureType> l() {
+    // Paper start -- reset & update player mob counts only if updatePlayerCounts is true otherwise retain original functionality
+    public Object2IntMap<EnumCreatureType> l() { return this.countMobs(false); }
+    public Object2IntMap<EnumCreatureType> countMobs(boolean updatePlayerCounts) {
+        if (this.paperConfig.perPlayerMobSpawns && updatePlayerCounts) {
+            for(EntityPlayer player : this.players){ // TODO iterate over copy?
+                for(int i = 0, maxI = EnumCreatureType.values().length; i < maxI; i++) {
+                    player.mobCounts[i] = 0;
+                }
+            }
+        }
+    // Paper end
         Object2IntMap<EnumCreatureType> object2intmap = new Object2IntOpenHashMap();
         ObjectIterator objectiterator = this.entitiesById.values().iterator();
 
@@ -906,6 +916,7 @@ public class WorldServer extends World {
                     continue;
                 }
                 // Paper end
+                if (this.paperConfig.perPlayerMobSpawns && updatePlayerCounts) { updatePlayerMobCounts(entity); } // Paper
                 object2intmap.mergeInt(enumcreaturetype, 1, Integer::sum);
             }
         }
@@ -913,6 +924,20 @@ public class WorldServer extends World {
         return object2intmap;
     }
 
+    // Paper start
+    public void updatePlayerMobCounts(Entity entity) {
+        if (!this.paperConfig.perPlayerMobSpawns) { return; }
+        int ordinal = entity.getEntityType().getEnumCreatureType().ordinal();
+        for (EntityPlayer player : ((ChunkProviderServer) this.chunkProvider).playerChunkMap.getPlayersNear(entity.getChunkAtLocation().getPos())) {
+            player.mobCounts[ordinal]++;
+        }
+    }
+
+    public int getMobCountNear(EntityPlayer entityPlayer, EnumCreatureType enumCreatureType) {
+        return entityPlayer.mobCounts[enumCreatureType.ordinal()];
+    }
+    // Paper end
+
     @Override
     public boolean addEntity(Entity entity) {
         // CraftBukkit start
-- 
2.22.0

