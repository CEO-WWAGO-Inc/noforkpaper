From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Owen1212055 <23108066+Owen1212055@users.noreply.github.com>
Date: Sun, 5 Sep 2021 12:15:59 -0400
Subject: [PATCH] More Teleport API


diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 4843fefde77f37ee53092755bace9ab0f9e6c0ad..c07255a77d99865f790c31498e121efbbdfa6436 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -1621,12 +1621,23 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
             this.internalTeleport(d0, d1, d2, f, f1, set, flag);
             return false; // CraftBukkit - Return event status
         }
-
-        PlayerTeleportEvent event = new PlayerTeleportEvent(player, from.clone(), to.clone(), cause);
+        // Paper start - Teleport API
+        Set<io.papermc.paper.entity.RelativeTeleportFlag> relativeFlags = new java.util.HashSet<>(set.size());
+        for (net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket.RelativeArgument relativeArgument : set) {
+            relativeFlags.add(switch (relativeArgument) {
+                case X -> io.papermc.paper.entity.RelativeTeleportFlag.X;
+                case Y -> io.papermc.paper.entity.RelativeTeleportFlag.Y;
+                case Z -> io.papermc.paper.entity.RelativeTeleportFlag.Z;
+                case X_ROT -> io.papermc.paper.entity.RelativeTeleportFlag.PITCH;
+                case Y_ROT -> io.papermc.paper.entity.RelativeTeleportFlag.YAW;
+            });
+        }
+        PlayerTeleportEvent event = new PlayerTeleportEvent(player, from.clone(), to.clone(), cause, flag, relativeFlags);
+        // Paper end
         this.cserver.getPluginManager().callEvent(event);
 
         if (event.isCancelled() || !to.equals(event.getTo())) {
-            set.clear(); // Can't relative teleport
+            //set.clear(); // Can't relative teleport // Paper - Teleport API: Now you can!
             to = event.isCancelled() ? event.getFrom() : event.getTo();
             d0 = to.getX();
             d1 = to.getY();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index a3673e2943f251e056ecf84a9bff2de12efdb52a..692fc60e5f9a64d4fab86a147bbfb265b3b8c21a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -556,17 +556,25 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return this.teleport(location, TeleportCause.PLUGIN);
     }
 
+    // Paper start - Teleport passenger API
     @Override
-    public boolean teleport(Location location, TeleportCause cause) {
+    public boolean teleport(@org.jetbrains.annotations.NotNull Location location, @org.jetbrains.annotations.NotNull TeleportCause cause) {
+        return teleport(location, cause, false);
+    }
+
+    @Override
+    public boolean teleport(Location location, TeleportCause cause, boolean ignorePassengers, boolean dismount) {
+        // Paper end - Teleport passenger API
         Preconditions.checkArgument(location != null, "location");
+        Preconditions.checkArgument(!(ignorePassengers && !dismount) || location.getWorld().equals(getWorld()), "Cannot teleport to different world while keeping passengers or remaining as vehicle."); // Paper - Teleport passenger API
         location.checkFinite();
 
-        if (this.entity.isVehicle() || this.entity.isRemoved()) {
+        if ((!ignorePassengers && this.entity.isVehicle()) || this.entity.isRemoved()) { // Paper - Teleport passenger API
             return false;
         }
 
         // If this entity is riding another entity, we must dismount before teleporting.
-        this.entity.stopRiding();
+        if (dismount) this.entity.stopRiding(); // Paper - Teleport passenger API
 
         // Let the server handle cross world teleports
         if (!location.getWorld().equals(this.getWorld())) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 8cac6f49b23841414fbcc7f3a158a7342b382496..dc3ba5821394d5813dd14dd37e9569ebde670369 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -989,10 +989,39 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     // Paper end
 
+    // Paper start - Teleport API
     @Override
-    public boolean teleport(Location location, PlayerTeleportEvent.TeleportCause cause) {
+    public boolean teleport(Location location, PlayerTeleportEvent.TeleportCause cause, boolean ignorePassengers, boolean dismount) {
+        return teleport(location, cause, ignorePassengers, dismount, new io.papermc.paper.entity.RelativeTeleportFlag[0]);
+    }
+
+    @Override
+    public void lookAt(@NotNull io.papermc.paper.entity.LookAnchor playerAnchor, org.bukkit.entity.@NotNull Entity entity, @NotNull io.papermc.paper.entity.LookAnchor entityAnchor) {
+        net.minecraft.commands.arguments.EntityAnchorArgument.Anchor[] anchors = net.minecraft.commands.arguments.EntityAnchorArgument.Anchor.values();
+        getHandle().lookAt(anchors[playerAnchor.ordinal()], ((CraftEntity) entity).getHandle(), anchors[entityAnchor.ordinal()]);
+    }
+
+    @Override
+    public void lookAt(double x, double y, double z, @NotNull io.papermc.paper.entity.LookAnchor playerAnchor) {
+        getHandle().lookAt(net.minecraft.commands.arguments.EntityAnchorArgument.Anchor.values()[playerAnchor.ordinal()], new Vec3(x, y, z));
+    }
+
+    @Override
+    public boolean teleport(Location location, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause, boolean ignorePassengers, boolean dismount, io.papermc.paper.entity.RelativeTeleportFlag... flags) {
+        Set<net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket.RelativeArgument> relativeArguments = new HashSet<>(flags.length);
+        for (io.papermc.paper.entity.RelativeTeleportFlag flag : flags) {
+            relativeArguments.add(switch (flag) {
+                case X -> net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket.RelativeArgument.X;
+                case Y -> net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket.RelativeArgument.Y;
+                case Z -> net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket.RelativeArgument.Z;
+                case PITCH -> net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket.RelativeArgument.X_ROT;
+                case YAW -> net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket.RelativeArgument.Y_ROT;
+            });
+        }
+        // Paper end - Teleport API
         Preconditions.checkArgument(location != null, "location");
         Preconditions.checkArgument(location.getWorld() != null, "location.world");
+        Preconditions.checkArgument(!(ignorePassengers && !dismount) || location.getWorld().equals(getWorld()), "Cannot teleport to different world while keeping passengers or when mounted."); // Paper - Teleport passenger API
         location.checkFinite();
 
         ServerPlayer entity = this.getHandle();
@@ -1005,7 +1034,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
            return false;
         }
 
-        if (entity.isVehicle()) {
+        if (entity.isVehicle() && !ignorePassengers) { // Paper - Teleport API
             return false;
         }
 
@@ -1023,7 +1052,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
 
         // If this player is riding another entity, we must dismount before teleporting.
-        entity.stopRiding();
+        if (dismount) entity.stopRiding(); // Paper - Teleport API
 
         // SPIGOT-5509: Wakeup, similar to riding
         if (this.isSleeping()) {
@@ -1045,7 +1074,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         // Check if the fromWorld and toWorld are the same.
         if (fromWorld == toWorld) {
-            entity.connection.teleport(to);
+            entity.connection.internalTeleport(to.getX(), to.getY(), to.getZ(), to.getYaw(), to.getPitch(), relativeArguments, dismount); // Paper - Teleport API
         } else {
             server.getHandle().respawn(entity, toWorld, true, to, !toWorld.paperConfig.disableTeleportationSuffocationCheck); // Paper
         }
