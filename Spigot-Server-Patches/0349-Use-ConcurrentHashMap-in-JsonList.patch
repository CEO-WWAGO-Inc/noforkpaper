From 976042d34b38764c367ec887c03b76fa75ebf766 Mon Sep 17 00:00:00 2001
From: egg82 <phantom_zero@ymail.com>
Date: Tue, 7 Aug 2018 01:24:23 -0600
Subject: [PATCH] Use ConcurrentHashMap in JsonList

This is specifically aimed at fixing #471

Using a ConcurrentHashMap because thread safety
The performance benefit of Map over ConcurrentMap is negligabe at best in this scenaio, as most operations will be get and not add or remove
Even without considering the use-case the benefits are still negligable

Original ideas for the system included an expiration policy and/or handler
The simpler solution was to use a computeIfPresent in the get method
This will simultaneously have an O(1) lookup time and automatically expire any values
Since the get method (nor other similar methods) don't seem to have a critical need to flush the map to disk at any of these points further processing is simply wasteful
Meaning the original function expired values unrelated to the current value without actually having any explicit need to

The h method was left for NMS/reflection so plugins/the server doesn't break
However it was heavily modified to be much more efficient in its processing

Modified isEmpty to use the isEmpty() method instead of the slightly confusing size() < 1
The point of this is readability, but does have a side-benefit of a small microptimization

Finally, added a couple obfhelpers for the modified code

diff --git a/src/main/java/net/minecraft/server/JsonList.java b/src/main/java/net/minecraft/server/JsonList.java
index 0859c7eb..e92b4c7b 100644
--- a/src/main/java/net/minecraft/server/JsonList.java
+++ b/src/main/java/net/minecraft/server/JsonList.java
@@ -1,6 +1,5 @@
 package net.minecraft.server;
 
-import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.io.Files;
 import com.google.gson.Gson;
@@ -21,11 +20,12 @@ import java.io.Reader;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import java.nio.charset.StandardCharsets;
-import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.ConcurrentMap;
+
 import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -35,7 +35,8 @@ public class JsonList<K, V extends JsonListEntry<K>> {
     protected static final Logger a = LogManager.getLogger();
     protected final Gson b;
     private final File c;
-    private final Map<String, V> d = Maps.newHashMap();
+    private final ConcurrentMap<String, V> d = Maps.newConcurrentMap(); // Paper - replace HashMap is ConcurrentHashMap
+    private final ConcurrentMap<String, V> getBackingMap() { return this.d; } // Paper - OBFHELPER
     private boolean e = true;
     private static final ParameterizedType f = new ParameterizedType() {
         public Type[] getActualTypeArguments() {
@@ -83,8 +84,13 @@ public class JsonList<K, V extends JsonListEntry<K>> {
     }
 
     public V get(K k0) {
-        this.h();
-        return (V) this.d.get(this.a(k0)); // CraftBukkit - fix decompile error
+        // Paper start
+        // this.h();
+        // return (V) this.d.get(this.a(k0)); // CraftBukkit - fix decompile error
+        return (V) this.getBackingMap().computeIfPresent(this.getMappingKey(k0), (k, v) -> {
+            return v.hasExpired() ? null : v;
+        });
+        // Paper end
     }
 
     public void remove(K k0) {
@@ -109,19 +115,22 @@ public class JsonList<K, V extends JsonListEntry<K>> {
     // CraftBukkit end
 
     public boolean isEmpty() {
-        return this.d.size() < 1;
+        // return this.d.size() < 1; // Paper
+        return this.getBackingMap().isEmpty(); // Paper - readability is the goal. As an aside, isEmpty() uses only sumCount() and a comparison. size() uses sumCount(), casts, and boolean logic
     }
 
     protected String a(K k0) {
         return k0.toString();
     }
+    protected final String getMappingKey(K k0) { return k0.toString(); } // Paper - OBFHELPER
 
     protected boolean d(K k0) {
         return this.d.containsKey(this.a(k0));
     }
 
     private void h() {
-        ArrayList arraylist = Lists.newArrayList();
+        // Paper start
+        /*ArrayList arraylist = Lists.newArrayList();
         Iterator iterator = this.d.values().iterator();
 
         while (iterator.hasNext()) {
@@ -138,8 +147,14 @@ public class JsonList<K, V extends JsonListEntry<K>> {
             Object object = iterator.next();
 
             this.d.remove(object);
+        }*/
+        
+        for (Iterator<V> i = this.getBackingMap().values().iterator(); i.hasNext();) {
+            if (i.next().hasExpired()) {
+                i.remove();
+            }
         }
-
+        // Paper end
     }
 
     protected JsonListEntry<K> a(JsonObject jsonobject) {
-- 
2.18.0.windows.1

