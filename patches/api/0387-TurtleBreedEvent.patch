From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lulu13022002 <41980282+Lulu13022002@users.noreply.github.com>
Date: Thu, 23 Jun 2022 14:07:45 +0200
Subject: [PATCH] TurtleBreedEvent


diff --git a/src/main/java/io/papermc/paper/event/entity/TurtleBreedEvent.java b/src/main/java/io/papermc/paper/event/entity/TurtleBreedEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..ce59969726065c5f6a0b289653c473e72804712a
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/entity/TurtleBreedEvent.java
@@ -0,0 +1,129 @@
+package io.papermc.paper.event.entity;
+
+import com.google.common.base.Preconditions;
+import org.bukkit.entity.Player;
+import org.bukkit.entity.Turtle;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.EntityEvent;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Called when one Turtle breeds with another Turtle.
+ */
+public class TurtleBreedEvent extends EntityEvent implements Cancellable {
+
+    private static final HandlerList handlers = new HandlerList();
+    //
+    private final Turtle mother;
+    private final Turtle father;
+    private final Player breeder;
+    private final ItemStack bredWith;
+    private int experience;
+    //
+    private boolean cancel;
+
+    public TurtleBreedEvent(@NotNull Turtle mother, @NotNull Turtle father, @Nullable Player breeder, @Nullable ItemStack bredWith, int experience) {
+        super(mother);
+
+        Preconditions.checkArgument(mother != null, "Cannot have null mother");
+        Preconditions.checkArgument(father != null, "Cannot have null father");
+
+        // Breeder can be null in the case of spontaneous conception
+        this.mother = mother;
+        this.father = father;
+        this.breeder = breeder;
+        this.bredWith = bredWith;
+
+        setExperience(experience);
+    }
+
+    @NotNull
+    @Override
+    public Turtle getEntity() {
+        return (Turtle) entity;
+    }
+
+    /**
+     * Gets the parent creating this entity.
+     *
+     * @return The "birth" parent
+     */
+    @NotNull
+    public Turtle getMother() {
+        return mother;
+    }
+
+    /**
+     * Gets the other parent of the newly born entity.
+     *
+     * @return the other parent
+     */
+    @NotNull
+    public Turtle getFather() {
+        return father;
+    }
+
+    /**
+     * Gets the Entity responsible for breeding. Breeder is null for spontaneous
+     * conception.
+     *
+     * @return The Entity who initiated breeding.
+     */
+    @Nullable
+    public Player getBreeder() {
+        return breeder;
+    }
+
+    /**
+     * The ItemStack that was used to initiate breeding, if present.
+     *
+     * @return ItemStack used to initiate breeding.
+     */
+    @Nullable
+    public ItemStack getBredWith() {
+        return bredWith;
+    }
+
+    /**
+     * Get the amount of experience granted by breeding.
+     *
+     * @return experience amount
+     */
+    public int getExperience() {
+        return experience;
+    }
+
+    /**
+     * Set the amount of experience granted by breeding.
+     * If the amount is negative or zero, no experience will be dropped.
+     *
+     * @param experience experience amount
+     */
+    public void setExperience(int experience) {
+        this.experience = experience;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancel;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancel = cancel;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
