From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: BillyGalbreath <blake.galbreath@gmail.com>
Date: Fri, 14 May 2021 13:42:17 -0500
Subject: [PATCH] Add Mob#lookAt API


diff --git a/src/main/java/net/minecraft/world/entity/ai/control/ControllerLook.java b/src/main/java/net/minecraft/world/entity/ai/control/ControllerLook.java
index 3ce9edde641c8b8eea75479615bcd2866ffd2198..950c92e008545405aec6962e75117b84790c4548 100644
--- a/src/main/java/net/minecraft/world/entity/ai/control/ControllerLook.java
+++ b/src/main/java/net/minecraft/world/entity/ai/control/ControllerLook.java
@@ -20,18 +20,22 @@ public class ControllerLook {
         this.a = entityinsentient;
     }
 
+    public void lookAt(Vec3D vec3d) { a(vec3d); } // Paper - OBFHELPER
     public void a(Vec3D vec3d) {
         this.a(vec3d.x, vec3d.y, vec3d.z);
     }
 
+    public void lookAt(Entity entity, float f, float f1) { a(entity, f, f1); } // Paper - OBFHELPER
     public void a(Entity entity, float f, float f1) {
         this.a(entity.locX(), b(entity), entity.locZ(), f, f1);
     }
 
+    public void lookAt(double d0, double d1, double d2) { a(d0, d1, d2); } // Paper - OBFHELPER
     public void a(double d0, double d1, double d2) {
         this.a(d0, d1, d2, (float) this.a.ep(), (float) this.a.O());
     }
 
+    public void lookAt(double d0, double d1, double d2, float f, float f1) { a(d0, d1, d2, f, f1); } // Paper - OBFHELPER
     public void a(double d0, double d1, double d2, float f, float f1) {
         this.e = d0;
         this.f = d1;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
index 06cbe63ef04e0de824ac0b9d545b6da1f53701b3..9322fdabf52300335738a60366c4920cc223f96a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
@@ -1,13 +1,17 @@
 package org.bukkit.craftbukkit.entity;
 
+import com.google.common.base.Preconditions;
 import net.minecraft.world.entity.EntityInsentient;
 import org.bukkit.Bukkit;
+import org.bukkit.Location;
 import org.bukkit.NamespacedKey;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.entity.Entity;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Mob;
 import org.bukkit.loot.LootTable;
+import org.jetbrains.annotations.NotNull;
 
 public abstract class CraftMob extends CraftLivingEntity implements Mob {
     public CraftMob(CraftServer server, EntityInsentient entity) {
@@ -84,5 +88,45 @@ public abstract class CraftMob extends CraftLivingEntity implements Mob {
     public boolean isInDaylight() {
         return getHandle().isInDaylight();
     }
+
+    @Override
+    public void lookAt(@NotNull Location location) {
+        Preconditions.checkNotNull(location, "location cannot be null");
+        Preconditions.checkArgument(location.getWorld().equals(getWorld()), "location in a different world");
+        lookAt(location.getX(), location.getY(), location.getZ());
+    }
+
+    @Override
+    public void lookAt(@NotNull Location location, float yawSpeed, float pitchSpeed) {
+        Preconditions.checkNotNull(location, "location cannot be null");
+        Preconditions.checkArgument(location.getWorld().equals(getWorld()), "location in a different world");
+        lookAt(location.getX(), location.getY(), location.getZ(), yawSpeed, pitchSpeed);
+    }
+
+    @Override
+    public void lookAt(@NotNull Entity entity) {
+        Preconditions.checkNotNull(entity, "entity cannot be null");
+        Preconditions.checkArgument(entity.getWorld().equals(getWorld()), "entity in a different world");
+        Location location = entity instanceof LivingEntity ? ((LivingEntity) entity).getEyeLocation() : entity.getLocation();
+        lookAt(location.getX(), location.getY(), location.getZ());
+    }
+
+    @Override
+    public void lookAt(@NotNull Entity entity, float yawSpeed, float pitchSpeed) {
+        Preconditions.checkNotNull(entity, "entity cannot be null");
+        Preconditions.checkArgument(entity.getWorld().equals(getWorld()), "entity in a different world");
+        Location location = entity instanceof LivingEntity ? ((LivingEntity) entity).getEyeLocation() : entity.getLocation();
+        lookAt(location.getX(), location.getY(), location.getZ(), yawSpeed, pitchSpeed);
+    }
+
+    @Override
+    public void lookAt(double x, double y, double z) {
+        getHandle().getControllerLook().lookAt(x, y, z);
+    }
+
+    @Override
+    public void lookAt(double x, double y, double z, float yawSpeed, float pitchSpeed) {
+        getHandle().getControllerLook().lookAt(x, y, z, yawSpeed, pitchSpeed);
+    }
     // Paper end
 }
