From 7ac07ac07ac07ac07ac07ac07ac07ac07ac07ac0 Mon Sep 17 00:00:00 2001
From: BillyGalbreath <Blake.Galbreath@GMail.com>
Date: Fri, 12 Oct 2018 06:15:04 -0500
Subject: [PATCH] Add more Llama API


diff --git a/src/main/java/com/destroystokyo/paper/event/entity/LlamaJoinCaravanEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/LlamaJoinCaravanEvent.java
new file mode 100644
index 7ac07ac07ac0..7ac07ac07ac0
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/entity/LlamaJoinCaravanEvent.java
@@ -0,0 +1,56 @@
+package com.destroystokyo.paper.event.entity;
+
+import org.bukkit.entity.Llama;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.EntityEvent;
+
+/**
+ * Called when a Llama tries to join a caravan.
+ * <p>
+ * Cancelling the event will not let the Llama join. To prevent future attempts
+ * at joining a caravan use {@link Llama#setShouldJoinCaravan(boolean)}.
+ */
+public class LlamaJoinCaravanEvent extends EntityEvent implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+    private boolean canceled;
+    private final Llama head;
+
+    public LlamaJoinCaravanEvent(Llama llama, Llama head) {
+        super(llama);
+        this.head = head;
+    }
+
+    @Override
+    public Llama getEntity() {
+        return (Llama) entity;
+    }
+
+    /**
+     * Get the Llama that this Llama is about to follow
+     *
+     * @return Llama about to be followed
+     */
+    public Llama getHead() {
+        return head;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return canceled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        canceled = cancel;
+    }
+
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/LlamaLeaveCaravanEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/LlamaLeaveCaravanEvent.java
new file mode 100644
index 7ac07ac07ac0..7ac07ac07ac0
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/entity/LlamaLeaveCaravanEvent.java
@@ -0,0 +1,30 @@
+package com.destroystokyo.paper.event.entity;
+
+import org.bukkit.entity.Llama;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.EntityEvent;
+
+/**
+ * Called when a Llama leaves a caravan
+ */
+public class LlamaLeaveCaravanEvent extends EntityEvent {
+    private static final HandlerList handlers = new HandlerList();
+
+    public LlamaLeaveCaravanEvent(Llama llama) {
+        super(llama);
+    }
+
+    @Override
+    public Llama getEntity() {
+        return (Llama) entity;
+    }
+
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
diff --git a/src/main/java/org/bukkit/entity/Llama.java b/src/main/java/org/bukkit/entity/Llama.java
index 7ac07ac07ac0..7ac07ac07ac0 100644
--- a/src/main/java/org/bukkit/entity/Llama.java
+++ b/src/main/java/org/bukkit/entity/Llama.java
@@ -3,10 +3,64 @@ package org.bukkit.entity;
 import com.destroystokyo.paper.entity.RangedEntity;
 import org.bukkit.inventory.LlamaInventory;
 
+import javax.annotation.Nullable; // Paper
+
 /**
  * Represents a Llama.
  */
-public interface Llama extends ChestedHorse, RangedEntity { // Paper
+// Paper start
+public interface Llama extends ChestedHorse, RangedEntity {
+    /**
+     * Check if this Llama should attempt to join a caravan
+     *
+     * @return True if Llama is allowed to join a caravan
+     */
+    boolean shouldJoinCaravan();
+
+    /**
+     * Set if this Llama should attempt to join a caravan
+     *
+     * @param shouldJoinCaravan True to allow joining a caravan
+     */
+    void setShouldJoinCaravan(boolean shouldJoinCaravan);
+
+    /**
+     * Check if Llama is in a caravan
+     *
+     * @return True if in caravan
+     */
+    boolean inCaravan();
+
+    /**
+     * Leave current caravan if in one
+     */
+    void leaveCaravan();
+
+    /**
+     * Check if another Llama is following this Llama
+     *
+     * @return True if being followed in the caravan
+     */
+    boolean hasCaravanTail();
+
+    /**
+     * Get the Llama that this Llama is following
+     * <p>
+     * Does not necessarily mean the leader of the entire caravan
+     *
+     * @return The Llama being followed
+     */
+    @Nullable
+    Llama getCaravanHead();
+
+    /**
+     * Get the Llama following this Llama, if any
+     *
+     * @return The Llama following this one
+     */
+    @Nullable
+    Llama getCaravanTail();
+    // Paper end
 
     /**
      * Represents the base color that the llama has.
-- 
2.19.1

