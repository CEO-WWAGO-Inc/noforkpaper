From fa8485af1d2b99ea5ea294815845cbb5fcb67a95 Mon Sep 17 00:00:00 2001
From: BillyGalbreath <Blake.Galbreath@GMail.com>
Date: Sun, 21 Jan 2018 05:09:37 -0600
Subject: [PATCH] AnvilDamagedEvent


diff --git a/src/main/java/com/destroystokyo/paper/event/block/AnvilDamagedEvent.java b/src/main/java/com/destroystokyo/paper/event/block/AnvilDamagedEvent.java
new file mode 100644
index 00000000..e8de48d9
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/block/AnvilDamagedEvent.java
@@ -0,0 +1,82 @@
+package com.destroystokyo.paper.event.block;
+
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.inventory.InventoryEvent;
+import org.bukkit.inventory.AnvilInventory;
+import org.bukkit.inventory.InventoryView;
+
+/**
+ * Called when an anvil is damaged from being used
+ */
+public class AnvilDamagedEvent extends InventoryEvent implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+    private int damage;
+    private boolean cancel;
+
+    public AnvilDamagedEvent(InventoryView inventory, int damage) {
+        super(inventory);
+        this.damage = damage;
+    }
+
+    @Override
+    public AnvilInventory getInventory() {
+        return (AnvilInventory) super.getInventory();
+    }
+
+    /**
+     * Gets the new anvil damage value
+     *
+     * @return New damage value
+     */
+    public int getDamage() {
+        return damage;
+    }
+
+    /**
+     * Sets the new anvil damage value
+     *
+     * @param damage new damage value
+     */
+    public void setDamage(int damage) {
+        this.damage = damage;
+    }
+
+    /**
+     * Gets if the anvil is breaking on this use
+     *
+     * @return True if anvil is breaking
+     */
+    public boolean isBreaking() {
+        return damage > 2;
+    }
+
+    /**
+     * Set if the anvil will break from this use
+     *
+     * @param isBreaking True if anvil will break from this use
+     */
+    public void setBreaking(boolean isBreaking) {
+        if (isBreaking) {
+            damage = 3;
+        } else if (damage > 2) {
+            damage = 2;
+        }
+    }
+
+    public boolean isCancelled() {
+        return cancel;
+    }
+
+    public void setCancelled(boolean cancel) {
+        this.cancel = cancel;
+    }
+
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
-- 
2.11.0

