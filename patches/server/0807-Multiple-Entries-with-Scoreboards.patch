From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Cryptite <cryptite@gmail.com>
Date: Tue, 21 Sep 2021 15:06:49 -0500
Subject: [PATCH] Multiple Entries with Scoreboards


diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java
index 4c9660176e783999301565790b8cf6f47b0d02a2..3f1b093ae766c6e219ee233a75c64f0c522cc6c2 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java
@@ -42,6 +42,12 @@ public class ClientboundSetPlayerTeamPacket implements Packet<ClientGamePacketLi
         return new ClientboundSetPlayerTeamPacket(team.getName(), operation == ClientboundSetPlayerTeamPacket.Action.ADD ? 3 : 4, Optional.empty(), ImmutableList.of(playerName));
     }
 
+    // Paper start
+    public static ClientboundSetPlayerTeamPacket createMultiplePlayerPacket(PlayerTeam team, Collection<String> players, ClientboundSetPlayerTeamPacket.Action operation) {
+        return new ClientboundSetPlayerTeamPacket(team.getName(), operation == ClientboundSetPlayerTeamPacket.Action.ADD ? 3 : 4, Optional.empty(), players);
+    }
+    // Paper end
+
     public ClientboundSetPlayerTeamPacket(FriendlyByteBuf buf) {
         this.name = buf.readUtf(16);
         this.method = buf.readByte();
diff --git a/src/main/java/net/minecraft/server/ServerScoreboard.java b/src/main/java/net/minecraft/server/ServerScoreboard.java
index 130a928f156961bae9ca184b3ca31004dbba1012..de7b0bca59b6a72d5795c2a57c1ea910d40dc2ca 100644
--- a/src/main/java/net/minecraft/server/ServerScoreboard.java
+++ b/src/main/java/net/minecraft/server/ServerScoreboard.java
@@ -92,6 +92,19 @@ public class ServerScoreboard extends Scoreboard {
         }
     }
 
+    // Paper start
+    @Override
+    public boolean addPlayersToTeam(java.util.Collection<String> players, PlayerTeam team) {
+        if (super.addPlayersToTeam(players, team)) {
+            this.sendAll(ClientboundSetPlayerTeamPacket.createMultiplePlayerPacket(team, players, ClientboundSetPlayerTeamPacket.Action.ADD));
+            this.setDirty();
+            return true;
+        } else {
+            return false;
+        }
+    }
+    // Paper end
+
     @Override
     public void removePlayerFromTeam(String playerName, PlayerTeam team) {
         super.removePlayerFromTeam(playerName, team);
@@ -99,6 +112,19 @@ public class ServerScoreboard extends Scoreboard {
         this.setDirty();
     }
 
+    // Paper start
+    @Override
+    public boolean removePlayersFromTeam(java.util.Collection<String> players, PlayerTeam team) {
+        if (super.removePlayersFromTeam(players, team)) {
+            this.sendAll(ClientboundSetPlayerTeamPacket.createMultiplePlayerPacket(team, players, ClientboundSetPlayerTeamPacket.Action.REMOVE));
+            this.setDirty();
+            return true;
+        } else {
+            return false;
+        }
+    }
+    // Paper end
+
     @Override
     public void onObjectiveAdded(Objective objective) {
         super.onObjectiveAdded(objective);
diff --git a/src/main/java/net/minecraft/world/scores/Scoreboard.java b/src/main/java/net/minecraft/world/scores/Scoreboard.java
index 3e75ea4d5a6c83ca570b29e3c1a5d51fb132379a..48164cd490c8105a733752df5ab45fa05ad4470b 100644
--- a/src/main/java/net/minecraft/world/scores/Scoreboard.java
+++ b/src/main/java/net/minecraft/world/scores/Scoreboard.java
@@ -2,12 +2,14 @@ package net.minecraft.world.scores;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
+
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.function.Consumer;
 import javax.annotation.Nullable;
+
 import net.minecraft.ChatFormatting;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
@@ -95,7 +97,7 @@ public class Scoreboard {
     public Collection<Score> getPlayerScores(Objective objective) {
         List<Score> list = Lists.newArrayList();
 
-        for(Map<Objective, Score> map : this.playerScores.values()) {
+        for (Map<Objective, Score> map : this.playerScores.values()) {
             Score score = map.get(objective);
             if (score != null) {
                 list.add(score);
@@ -153,9 +155,9 @@ public class Scoreboard {
     public void removeObjective(Objective objective) {
         this.objectivesByName.remove(objective.getName());
 
-        for(int i = 0; i < 19; ++i) {
+        for (int i = 0; i < 19; ++i) {
             if (this.getDisplayObjective(i) == objective) {
-                this.setDisplayObjective(i, (Objective)null);
+                this.setDisplayObjective(i, (Objective) null);
             }
         }
 
@@ -164,7 +166,7 @@ public class Scoreboard {
             list.remove(objective);
         }
 
-        for(Map<Objective, Score> map : this.playerScores.values()) {
+        for (Map<Objective, Score> map : this.playerScores.values()) {
             map.remove(objective);
         }
 
@@ -204,7 +206,7 @@ public class Scoreboard {
     public void removePlayerTeam(PlayerTeam team) {
         this.teamsByName.remove(team.getName());
 
-        for(String string : team.getPlayers()) {
+        for (String string : team.getPlayers()) {
             this.teamsByPlayer.remove(string);
         }
 
@@ -224,6 +226,28 @@ public class Scoreboard {
         }
     }
 
+    // Paper start
+    public boolean addPlayersToTeam(Collection<String> players, PlayerTeam team) {
+        boolean anyAdded = false;
+        for (String playerName : players) {
+            if (playerName.length() > 40) {
+                net.minecraft.server.MinecraftServer.LOGGER.warn("The player name '" + playerName + "' is too long!");
+            } else {
+                if (this.getPlayersTeam(playerName) != null) {
+                    this.removePlayerFromTeam(playerName);
+                }
+
+                this.teamsByPlayer.put(playerName, team);
+                if (team.getPlayers().add(playerName)) {
+                    anyAdded = true;
+                }
+            }
+        }
+
+        return anyAdded;
+    }
+    // Paper end
+
     public boolean removePlayerFromTeam(String playerName) {
         PlayerTeam playerTeam = this.getPlayersTeam(playerName);
         if (playerTeam != null) {
@@ -243,6 +267,24 @@ public class Scoreboard {
         }
     }
 
+    // Paper start
+    public boolean removePlayersFromTeam(Collection<String> players, PlayerTeam team) {
+        boolean anyRemoved = false;
+        for (String playerName : players) {
+            if (this.getPlayersTeam(playerName) != team) {
+                net.minecraft.server.MinecraftServer.LOGGER.warn("Player " + playerName + " is either on another team or not on any team. Cannot remove from team '" + team.getName() + "'.");
+            } else {
+                this.teamsByPlayer.remove(playerName);
+                if (team.getPlayers().remove(playerName)) {
+                    anyRemoved = true;
+                }
+            }
+        }
+
+        return anyRemoved;
+    }
+    // Paper end
+
     public Collection<String> getTeamNames() {
         return this.teamsByName.keySet();
     }
@@ -284,22 +326,22 @@ public class Scoreboard {
     }
 
     public static String getDisplaySlotName(int slotId) {
-        switch(slotId) {
-        case 0:
-            return "list";
-        case 1:
-            return "sidebar";
-        case 2:
-            return "belowName";
-        default:
-            if (slotId >= 3 && slotId <= 18) {
-                ChatFormatting chatFormatting = ChatFormatting.getById(slotId - 3);
-                if (chatFormatting != null && chatFormatting != ChatFormatting.RESET) {
-                    return "sidebar.team." + chatFormatting.getName();
+        switch (slotId) {
+            case 0:
+                return "list";
+            case 1:
+                return "sidebar";
+            case 2:
+                return "belowName";
+            default:
+                if (slotId >= 3 && slotId <= 18) {
+                    ChatFormatting chatFormatting = ChatFormatting.getById(slotId - 3);
+                    if (chatFormatting != null && chatFormatting != ChatFormatting.RESET) {
+                        return "sidebar.team." + chatFormatting.getName();
+                    }
                 }
-            }
 
-            return null;
+                return null;
         }
     }
 
@@ -327,7 +369,7 @@ public class Scoreboard {
         if (displaySlotNames == null) {
             displaySlotNames = new String[19];
 
-            for(int i = 0; i < 19; ++i) {
+            for (int i = 0; i < 19; ++i) {
                 displaySlotNames[i] = getDisplaySlotName(i);
             }
         }
@@ -338,7 +380,7 @@ public class Scoreboard {
     public void entityRemoved(Entity entity) {
         if (entity != null && !(entity instanceof Player) && !entity.isAlive()) {
             String string = entity.getStringUUID();
-            this.resetPlayerScore(string, (Objective)null);
+            this.resetPlayerScore(string, (Objective) null);
             this.removePlayerFromTeam(string);
         }
     }
@@ -361,7 +403,7 @@ public class Scoreboard {
     }
 
     protected void loadPlayerScores(ListTag list) {
-        for(int i = 0; i < list.size(); ++i) {
+        for (int i = 0; i < list.size(); ++i) {
             CompoundTag compoundTag = list.getCompound(i);
             Objective objective = this.getOrCreateObjective(compoundTag.getString("Objective"));
             String string = compoundTag.getString("Name");
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
index 2b87a652798cb632fe76bf20e9e7f8cb8bfb3b7b..942e6e6459a3a2bf7f6bd72ca9140b2d20d694ac 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
@@ -226,6 +226,16 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
         scoreboard.board.addPlayerToTeam(entry, team);
     }
 
+    // Paper start
+    @Override
+    public void addEntries(java.util.Collection<String> entries) throws IllegalStateException, IllegalArgumentException {
+        Validate.notNull(entries, "Entries cannot be null");
+        CraftScoreboard scoreboard = checkState();
+
+        scoreboard.board.addPlayersToTeam(entries, team);
+    }
+    // Paper end
+
     @Override
     public boolean removePlayer(OfflinePlayer player) throws IllegalStateException, IllegalArgumentException {
         Validate.notNull(player, "OfflinePlayer cannot be null");
@@ -245,6 +255,25 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
         return true;
     }
 
+    // Paper start
+    @Override
+    public boolean removeEntries(java.util.Collection<String> entries) throws IllegalStateException, IllegalArgumentException {
+        Validate.notNull(entries, "Entry cannot be null");
+        CraftScoreboard scoreboard = this.checkState();
+
+        boolean anyRemoved = false;
+        java.util.Collection<String> teamPlayers = this.team.getPlayers();
+        for (String entry : entries) {
+            if (teamPlayers.remove(entry)) {
+                anyRemoved = true;
+            }
+        }
+
+        scoreboard.board.removePlayersFromTeam(entries, team);
+        return anyRemoved;
+    }
+    // Paper end
+
     @Override
     public boolean hasPlayer(OfflinePlayer player) throws IllegalArgumentException, IllegalStateException {
         Validate.notNull(player, "OfflinePlayer cannot be null");
