From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dmitry Lomov <drupal.doesnot.exists@mail.ru>
Date: Tue, 16 Aug 2022 11:13:27 +0300
Subject: [PATCH] Fix: Allow loading if no permission to write configuration
 file


diff --git a/src/main/java/io/papermc/paper/configuration/Configurations.java b/src/main/java/io/papermc/paper/configuration/Configurations.java
index 31325994ab441c59a4c0bd9f3f9db3d9440375d0..671fb1fb4d2fbe84717a84c61b79a78d7f211fb3 100644
--- a/src/main/java/io/papermc/paper/configuration/Configurations.java
+++ b/src/main/java/io/papermc/paper/configuration/Configurations.java
@@ -1,5 +1,6 @@
 package io.papermc.paper.configuration;
 
+import com.mojang.logging.LogUtils;
 import io.leangen.geantyref.TypeToken;
 import io.papermc.paper.configuration.constraint.Constraint;
 import io.papermc.paper.configuration.constraint.Constraints;
@@ -7,6 +8,7 @@ import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.jetbrains.annotations.MustBeInvokedByOverriders;
+import org.slf4j.Logger;
 import org.spongepowered.configurate.CommentedConfigurationNode;
 import org.spongepowered.configurate.ConfigurateException;
 import org.spongepowered.configurate.ConfigurationNode;
@@ -18,6 +20,7 @@ import org.spongepowered.configurate.yaml.YamlConfigurationLoader;
 
 import java.io.IOException;
 import java.lang.reflect.Type;
+import java.nio.file.AccessDeniedException;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.HashMap;
@@ -28,6 +31,7 @@ import java.util.function.UnaryOperator;
 
 public abstract class Configurations<G, W> {
 
+    private static final Logger LOGGER = LogUtils.getLogger();
     public static final String WORLD_DEFAULTS = "__world_defaults__";
     public static final ResourceLocation WORLD_DEFAULTS_KEY = new ResourceLocation("configurations", WORLD_DEFAULTS);
     protected final Path globalFolder;
@@ -111,7 +115,14 @@ public abstract class Configurations<G, W> {
         }
         this.applyGlobalConfigTransformations(node);
         final G instance = creator.apply(node);
-        loader.save(node);
+        // Do not crash if configuration is read-only
+        try {
+            loader.save(node);
+        } catch (ConfigurateException exception) {
+            if (exception.getCause() instanceof AccessDeniedException) {
+                LOGGER.warn("Configuration is read-only. If there any new settings, you need to apply them manually!");
+            }
+        }
         return instance;
     }
 
