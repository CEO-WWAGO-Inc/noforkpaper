From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Zach Brown <zach.brown@destroystokyo.com>
Date: Tue, 1 Mar 2016 00:16:08 +0100
Subject: [PATCH] Build system changes


diff --git a/build.gradle.kts b/build.gradle.kts
index 98fc174313ddbb3fb15354e228c95cd86e812848..1f8c4fcaeccaa259765968cce9e2faf6b31f6acf 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -15,13 +15,24 @@ dependencies {
     api(libs.bungeecordchat)
     api(libs.snakeyaml)
     api(libs.joml)
+    // Paper start
+    api(libs.jsonsimple) {
+        isTransitive = false; //includes junit
+    }
+    // Paper end
 
     compileOnly(libs.maven.resolver.provider)
     compileOnly(libs.maven.resolver.connector.basic)
     compileOnly(libs.maven.resolver.transport.http)
+    compileOnly(libs.jsr305)
+
+    compileOnly(libs.annotations) // Paper - we don't want Java 5 annotations...
+    testCompileOnly(libs.annotations) // Paper - we don't want Java 5 annotations...
 
-    compileOnly(libs.annotations.java5)
-    testCompileOnly(libs.annotations.java5)
+    // Paper start - add checker
+    compileOnlyApi(libs.checkerqual)
+    testCompileOnly(libs.checkerqual)
+    // Paper end
 
     testImplementation(libs.apache.commons)
     testImplementation(libs.junit)
@@ -64,7 +75,7 @@ tasks.withType<Javadoc> {
     options.links(
         "https://guava.dev/releases/31.1-jre/api/docs/",
         "https://javadoc.io/doc/org.yaml/snakeyaml/2.0/",
-        "https://javadoc.io/doc/org.jetbrains/annotations-java5/${libs.versions.annotations.get()}/",
+        "https://javadoc.io/doc/org.jetbrains/annotations/${libs.versions.annotations.get()}/", // Paper - we don't want Java 5 annotations
         "https://javadoc.io/doc/net.md-5/bungeecord-chat/1.16-R0.4/",
     )
     options.tags("apiNote:a:API Note:")
@@ -80,3 +91,14 @@ tasks.withType<Javadoc> {
         }
     }
 }
+
+// Paper start
+val scanJar = tasks.register("scanJarForBadCalls", io.papermc.paperweight.tasks.ScanJarForBadCalls::class) {
+    badAnnotations.add("Lio/papermc/paper/annotation/DoNotUse;")
+    jarToScan.set(tasks.jar.flatMap { it.archiveFile })
+    classpath.from(configurations.compileClasspath)
+}
+tasks.check {
+    dependsOn(scanJar)
+}
+// Paper end
diff --git a/src/main/java/io/papermc/paper/annotation/DoNotUse.java b/src/main/java/io/papermc/paper/annotation/DoNotUse.java
new file mode 100644
index 0000000000000000000000000000000000000000..4766e49d819e75e5c2127c698b44078bf2fd6219
--- /dev/null
+++ b/src/main/java/io/papermc/paper/annotation/DoNotUse.java
@@ -0,0 +1,18 @@
+package io.papermc.paper.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import org.jetbrains.annotations.ApiStatus;
+
+/**
+ * Annotation used to mark methods or constructors which should not be called.
+ *
+ * <p>Separate from {@link Deprecated} to differentiate from the large amount of deprecations.</p>
+ */
+@ApiStatus.Internal
+@Retention(RetentionPolicy.RUNTIME)
+@Target({ElementType.METHOD, ElementType.CONSTRUCTOR})
+public @interface DoNotUse {
+}
