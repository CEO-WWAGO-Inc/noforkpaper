From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Justin <justin@justinf.dev>
Date: Wed, 24 Aug 2022 05:17:20 -0700
Subject: [PATCH] Add Entity hidden by default flag

Adds a boolean to the server Entity controlling if the entity should be hidden by default.
The TrackedEntity maintains a set of all players that will be able to see the entity even
when it is hidden by default. This set is modified when Player#showEntity and Player#hideEntity
are invoked. Changes are made to the way that TrackedEntity updates players when the entity is
hidden by default - if a player is not present in the above set, the update is abandoned.

This functionality is expanded when a Player is hidden by default. The player will send out
PlayerInfo packets to hide themselves from other Players when hiddenByDefault. There remains a
discrepancy when trying to getHiddenPlayers - players that are hidden by default are currently
not returned from this method, only those hidden with hideEntity or hidePlayer.

Hiding entities by default also respects precedent of keeping entities hidden when other plugins
explicitly hide them from a player. If an entity is hidden by default and by a plugin, the entity
must have the plugin that hid them from a player show them in order to be shown to a player again.
If no plugin had previously hidden the entity before the entity was hidden by default, then any
plugin that attempts to show the entity to a player will succeed in doing so.

diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 55d8ced734a408c990c6c4fbc81707bcb1f27daa..29159963b29dde8cf24fda8c9fa75b1d67eb824f 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -1466,6 +1466,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         private final int range;
         SectionPos lastSectionPos;
         public final Set<ServerPlayerConnection> seenBy = new ReferenceOpenHashSet<>(); // Paper - optimise map impl
+        public final Set<ServerPlayerConnection> showToEvenWhenHiddenByDefault = new ReferenceOpenHashSet<>(); // Paper - Entity hiddenByDefault
 
         public TrackedEntity(Entity entity, int i, int j, boolean flag) {
             this.serverEntity = new ServerEntity(ChunkMap.this.level, entity, j, flag, this::broadcast, this.seenBy); // CraftBukkit
@@ -1574,6 +1575,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                     flag = false;
                 }
                 // CraftBukkit end
+
                 if (flag) {
                     if (this.seenBy.add(player.connection)) {
                         this.serverEntity.addPairing(player);
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 6fa47becd0f83ac4273ef3a10c314aa27b08184b..d62e562779346d58c46b27da44953abc3c9e8bd2 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -397,6 +397,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     @javax.annotation.Nullable
     private UUID originWorld;
     public boolean freezeLocked = false; // Paper - Freeze Tick Lock API
+    private boolean hiddenByDefault; // Paper - Entity hiddenByDefault
 
     public void setOrigin(@javax.annotation.Nonnull Location location) {
         this.origin = location.toVector();
@@ -4472,4 +4473,14 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         return ((net.minecraft.server.level.ServerChunkCache) level.getChunkSource()).isPositionTicking(this);
     }
     // Paper end
+
+    // Paper start - Entity hiddenByDefault
+    public void setHiddenByDefault(boolean hiddenByDefault) {
+        this.hiddenByDefault = hiddenByDefault;
+    }
+
+    public boolean isHiddenByDefault() {
+        return this.hiddenByDefault;
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 01132b10799034232e7e5cbb460d848601e04012..11907d947c4da5037dfe768c9ca6156931b2cc58 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1390,4 +1390,25 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return !this.getHandle().level.noCollision(this.getHandle(), aabb);
     }
     // Paper End - Collision API
+
+    // Paper start - Entity hiddenByDefault
+    @Override
+    public void setHiddenByDefault(boolean hiddenByDefault) {
+        this.getHandle().setHiddenByDefault(hiddenByDefault);
+
+        // We need to update the players again
+        ChunkMap.TrackedEntity entityTracker = this.getHandle().tracker;
+
+        // If the entity is already hiddenByDefault, we reset our "show to" set to again hide the entity from all players that may be seeing the entity
+        // We also clear the "show to" set when we stop hiding by default
+        entityTracker.showToEvenWhenHiddenByDefault.clear();
+
+        entityTracker.updatePlayers(this.server.getHandle().getPlayers());
+    }
+
+    @Override
+    public boolean isHiddenByDefault() {
+        return this.getHandle().isHiddenByDefault();
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index a5220a4e514865c70700527bcd2f941d852564c0..db2dabf6c8e5a1b98e120db4b2931b20353dfa64 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1765,6 +1765,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         ChunkMap tracker = ((ServerLevel) this.getHandle().level).getChunkSource().chunkMap;
         ChunkMap.TrackedEntity entry = tracker.entityMap.get(other.getId());
         if (entry != null) {
+            entry.showToEvenWhenHiddenByDefault.remove(this.getHandle().connection); // Paper - Entity hiddenByDefault
             entry.removePlayer(this.getHandle());
         }
 
@@ -1802,13 +1803,18 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         if (this.equals(entity)) return;
 
         Set<WeakReference<Plugin>> hidingPlugins = this.hiddenEntities.get(entity.getUniqueId());
-        if (hidingPlugins == null) {
-            return; // Entity isn't hidden
-        }
-        hidingPlugins.remove(CraftPlayer.getPluginWeakReference(plugin));
-        if (!hidingPlugins.isEmpty()) {
-            return; // Some other plugins still want the entity hidden
+        // Paper start - Entity hiddenByDefault
+        if (hidingPlugins != null) {
+            hidingPlugins.remove(CraftPlayer.getPluginWeakReference(plugin));
+            if (!hidingPlugins.isEmpty()) {
+                return; // Some other plugins still want the entity hidden
+            }
+        } else {
+            if (!entity.isHiddenByDefault() || ((CraftEntity) entity).getHandle().tracker.showToEvenWhenHiddenByDefault.contains(this.getHandle().connection)) {
+                return; // Entity isn't hidden
+            }
         }
+        // Paper end
         this.hiddenEntities.remove(entity.getUniqueId());
 
         // Paper start
@@ -1827,9 +1833,15 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
 
         ChunkMap.TrackedEntity entry = tracker.entityMap.get(other.getId());
-        if (entry != null && !entry.seenBy.contains(this.getHandle().connection)) {
-            entry.updatePlayer(this.getHandle());
+        // Paper start - Entity hiddenByDefault
+        if (entry != null) {
+            entry.showToEvenWhenHiddenByDefault.add(this.getHandle().connection);
+
+            if (!entry.seenBy.contains(this.getHandle().connection)) {
+                entry.updatePlayer(this.getHandle());
+            }
         }
+        // Paper end
     }
     // Paper start
     private void reregisterPlayer(ServerPlayer player) {
@@ -1887,7 +1899,16 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public boolean canSee(org.bukkit.entity.Entity entity) {
-        return !this.hiddenEntities.containsKey(entity.getUniqueId());
+        // Paper start - Entity hiddenByDefault
+        boolean shownWhenHiddenByDefault = true;
+
+        if (entity.isHiddenByDefault()) {
+            ChunkMap.TrackedEntity tracker = ((CraftEntity) entity).getHandle().tracker;
+            shownWhenHiddenByDefault = tracker == null || tracker.showToEvenWhenHiddenByDefault.contains(this.getHandle().connection);
+        }
+
+        return !this.hiddenEntities.containsKey(entity.getUniqueId()) && shownWhenHiddenByDefault;
+        // Paper end
     }
 
     @Override
@@ -2936,6 +2957,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     // Paper end
 
+<<<<<<< HEAD
     // Paper start
     @Override
     public void showElderGuardian(boolean silent) {
@@ -2978,6 +3000,27 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     // Paper end
 
+    // Paper start - Entity hiddenByDefault
+    @Override
+    public void setHiddenByDefault(boolean hiddenByDefault) {
+        // Update server lists
+        if (hiddenByDefault) {
+            server.getOnlinePlayers().stream()
+                .filter(entityPlayer -> entityPlayer != this)
+                .filter(entityPlayer -> entityPlayer.canSee(this))
+                .forEach(entityPlayer -> entityPlayer.getHandle().connection.send(new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.REMOVE_PLAYER, this.getHandle())));
+        } else {
+            server.getOnlinePlayers().stream()
+                .filter(entityPlayer -> entityPlayer != this)
+                .filter(entityPlayer -> !entityPlayer.canSee(this))
+                .forEach(entityPlayer -> entityPlayer.getHandle().connection.send(new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.ADD_PLAYER, this.getHandle())));
+        }
+
+        // Now, process trackers
+        super.setHiddenByDefault(hiddenByDefault);
+    }
+    // Paper end
+
     public Player.Spigot spigot()
     {
         return this.spigot;
