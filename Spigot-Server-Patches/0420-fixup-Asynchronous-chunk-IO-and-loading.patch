From 0cd505775f20f7c621b913f6479648d4a0891de7 Mon Sep 17 00:00:00 2001
From: Spottedleaf <Spottedleaf@users.noreply.github.com>
Date: Tue, 31 Dec 2019 07:34:32 -0800
Subject: [PATCH] fixup! Asynchronous chunk IO and loading


diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index b3ccb9a7b..f8a65b3df 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -1104,9 +1104,11 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
     // Paper start - chunk status cache "api"
     public ChunkStatus getChunkStatusOnDiskIfCached(ChunkCoordIntPair chunkPos) {
+        synchronized (this) { // Paper
         RegionFile regionFile = this.getRegionFileIfLoaded(chunkPos);
 
         return regionFile == null ? null : regionFile.getStatusIfCached(chunkPos.x, chunkPos.z);
+        } // Paper
     }
 
     public ChunkStatus getChunkStatusOnDisk(ChunkCoordIntPair chunkPos) throws IOException {
diff --git a/src/main/java/net/minecraft/server/RegionFile.java b/src/main/java/net/minecraft/server/RegionFile.java
index 0de24c792..87e667eef 100644
--- a/src/main/java/net/minecraft/server/RegionFile.java
+++ b/src/main/java/net/minecraft/server/RegionFile.java
@@ -36,6 +36,8 @@ public class RegionFile implements AutoCloseable {
     private final RegionFileBitSet freeSectors;
     public final File file;
 
+    public final java.util.concurrent.locks.ReentrantLock fileLock = new java.util.concurrent.locks.ReentrantLock(true); // Paper
+
     // Paper start - Cache chunk status
     private final ChunkStatus[] statuses = new ChunkStatus[32 * 32];
 
@@ -380,6 +382,8 @@ public class RegionFile implements AutoCloseable {
     }
 
     public synchronized void close() throws IOException { // Paper - Synchronized
+        this.fileLock.lock(); // Paper
+        try { // Paper
         this.closed = true; // Paper
         try {
             this.c();
@@ -394,6 +398,9 @@ public class RegionFile implements AutoCloseable {
                 }
             }
         }
+        } finally { // Paper start
+            this.fileLock.unlock();
+        } // Paper end
 
     }
 
diff --git a/src/main/java/net/minecraft/server/RegionFileCache.java b/src/main/java/net/minecraft/server/RegionFileCache.java
index d927f9321..0f201000f 100644
--- a/src/main/java/net/minecraft/server/RegionFileCache.java
+++ b/src/main/java/net/minecraft/server/RegionFileCache.java
@@ -26,10 +26,21 @@ public class RegionFileCache implements AutoCloseable { // Paper - no final
 
     // Paper end
     public synchronized RegionFile getFile(ChunkCoordIntPair chunkcoordintpair, boolean existingOnly) throws IOException { // CraftBukkit // Paper - private >  public, synchronize
+        // Paper start - add lock parameter
+        return this.getFile(chunkcoordintpair, existingOnly, false);
+    }
+    public synchronized RegionFile getFile(ChunkCoordIntPair chunkcoordintpair, boolean existingOnly, boolean lock) throws IOException {
+        // Paper end
         long i = ChunkCoordIntPair.pair(chunkcoordintpair.getRegionX(), chunkcoordintpair.getRegionZ());
         RegionFile regionfile = (RegionFile) this.cache.getAndMoveToFirst(i);
 
         if (regionfile != null) {
+            // Paper start
+            if (lock) {
+                // must be in this synchronized block
+                regionfile.fileLock.lock();
+            }
+            // Paper end
             return regionfile;
         } else {
             if (this.cache.size() >= com.destroystokyo.paper.PaperConfig.regionFileCacheSize) { // Paper - configurable
@@ -45,6 +56,12 @@ public class RegionFileCache implements AutoCloseable { // Paper - no final
             RegionFile regionfile1 = new RegionFile(file, this.b);
 
             this.cache.putAndMoveToFirst(i, regionfile1);
+            // Paper start
+            if (lock) {
+                // must be in this synchronized block
+                regionfile1.fileLock.lock();
+            }
+            // Paper end
             return regionfile1;
         }
     }
@@ -119,7 +136,8 @@ public class RegionFileCache implements AutoCloseable { // Paper - no final
 
     @Nullable
     public NBTTagCompound read(ChunkCoordIntPair chunkcoordintpair) throws IOException {
-        RegionFile regionfile = this.getFile(chunkcoordintpair, false); // CraftBukkit
+        RegionFile regionfile = this.getFile(chunkcoordintpair, false, true); // CraftBukkit // Paper
+        try { // Paper
         DataInputStream datainputstream = regionfile.a(chunkcoordintpair);
         // Paper start
         if (regionfile.isOversized(chunkcoordintpair.x, chunkcoordintpair.z)) {
@@ -157,10 +175,14 @@ public class RegionFileCache implements AutoCloseable { // Paper - no final
         }
 
         return nbttagcompound;
+        } finally { // Paper start
+            regionfile.fileLock.unlock();
+        } // Paper end
     }
 
     protected void write(ChunkCoordIntPair chunkcoordintpair, NBTTagCompound nbttagcompound) throws IOException {
-        RegionFile regionfile = this.getFile(chunkcoordintpair, false); // CraftBukkit
+        RegionFile regionfile = this.getFile(chunkcoordintpair, false, true); // CraftBukkit // Paper
+        try { // Paper
         int attempts = 0; Exception laste = null; while (attempts++ < 5) { try { // Paper
         DataOutputStream dataoutputstream = regionfile.c(chunkcoordintpair);
         Throwable throwable = null;
@@ -199,6 +221,9 @@ public class RegionFileCache implements AutoCloseable { // Paper - no final
             MinecraftServer.LOGGER.error("Failed to save chunk", laste);
         }
         // Paper end
+        } finally { // Paper start
+            regionfile.fileLock.unlock();
+        } // Paper end
     }
 
     public synchronized void close() throws IOException { // Paper -> synchronized
-- 
2.24.1.windows.2

