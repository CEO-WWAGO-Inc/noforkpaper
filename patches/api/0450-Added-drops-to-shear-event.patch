From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: twisti <twisti@slne.dev>
Date: Sat, 23 Dec 2023 16:16:53 +0100
Subject: [PATCH] Added drops to shear event


diff --git a/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java
index 04b3dce008edefb045162d0f69f87462ea1f3534..12cb23817f143646bdc71639d74317501728a182 100644
--- a/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java
@@ -18,13 +18,24 @@ public class PlayerShearEntityEvent extends PlayerEvent implements Cancellable {
     private final Entity what;
     private final ItemStack item;
     private final EquipmentSlot hand;
+    private final java.util.List<ItemStack> drops; // Paper - Add drops to shear event
 
-    public PlayerShearEntityEvent(@NotNull Player who, @NotNull Entity what, @NotNull ItemStack item, @NotNull EquipmentSlot hand) {
+    // Paper start - Add drops to shear event
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public PlayerShearEntityEvent(@NotNull Player who, @NotNull Entity what, @NotNull ItemStack item, @NotNull EquipmentSlot hand, java.util.List<ItemStack> drops) {
         super(who);
         this.what = what;
         this.item = item;
         this.hand = hand;
+        this.drops = drops;
+    }
+
+    @Deprecated
+    @io.papermc.paper.annotation.DoNotUse
+    public PlayerShearEntityEvent(@NotNull Player who, @NotNull Entity what, @NotNull ItemStack item, @NotNull EquipmentSlot hand) {
+        this(who, what, item, hand, java.util.List.of());
     }
+    // Paper end
 
     @Deprecated
     public PlayerShearEntityEvent(@NotNull final Player who, @NotNull final Entity what) {
@@ -71,6 +82,20 @@ public class PlayerShearEntityEvent extends PlayerEvent implements Cancellable {
         return hand;
     }
 
+    // Paper start - Add drops to shear event
+    /**
+     * Gets the drops that will be dropped from the entity.
+     * <p>
+     * This list is mutable, and changes will be applied to the drops.
+     * </p>
+     *
+     * @return the drops
+     */
+    public java.util.List<ItemStack> getDrops() {
+        return drops;
+    }
+    // Paper end
+
     @NotNull
     @Override
     public HandlerList getHandlers() {
