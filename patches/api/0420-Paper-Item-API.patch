From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Owen1212055 <23108066+Owen1212055@users.noreply.github.com>
Date: Mon, 17 Oct 2022 18:00:40 -0400
Subject: [PATCH] Paper Item API


diff --git a/build.gradle.kts b/build.gradle.kts
index cad12a2632b9ebb569280441c42869685db1f31a..0d0950622c3792091836b8081aec05c43e1a311a 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -32,6 +32,7 @@ dependencies {
     api("com.googlecode.json-simple:json-simple:1.1.1") {
         isTransitive = false // includes junit
     }
+    api("io.leangen.geantyref:geantyref:1.3.13") // Paper
     api("it.unimi.dsi:fastutil:8.5.6")
     apiAndDocs(platform("net.kyori:adventure-bom:$adventureVersion"))
     apiAndDocs("net.kyori:adventure-api")
diff --git a/src/main/java/io/papermc/paper/inventory/item/ItemStack.java b/src/main/java/io/papermc/paper/inventory/item/ItemStack.java
new file mode 100644
index 0000000000000000000000000000000000000000..3f6afc006ca529e92e25e291266f1f966727e9fa
--- /dev/null
+++ b/src/main/java/io/papermc/paper/inventory/item/ItemStack.java
@@ -0,0 +1,39 @@
+package io.papermc.paper.inventory.item;
+
+import com.google.common.base.Preconditions;
+import com.google.common.collect.ImmutableMap;
+import net.kyori.adventure.text.event.HoverEvent;
+import net.kyori.adventure.text.event.HoverEventSource;
+import net.kyori.adventure.translation.Translatable;
+import org.bukkit.Bukkit;
+import org.bukkit.Material;
+import org.bukkit.enchantments.Enchantment;
+import org.bukkit.inventory.meta.ItemMeta;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Map;
+
+@ApiStatus.Experimental
+// Temporary, soon will move this to the bukkit itemstack class
+public interface ItemStack extends HoverEventSource<HoverEvent.ShowItem>, Translatable, Cloneable {
+
+    @NotNull
+    Material getMaterial();
+
+    // This is behavior that is not officially supported anymore, and shouldn't be either.
+    @Deprecated
+    void setMaterial(@NotNull Material material);
+
+    int getSize();
+
+    void setSize(int size);
+
+    @Nullable
+    ItemMeta getMeta();
+
+    void setMeta(@Nullable ItemMeta meta);
+
+
+}
diff --git a/src/main/java/io/papermc/paper/inventory/item/properties/AttributePair.java b/src/main/java/io/papermc/paper/inventory/item/properties/AttributePair.java
new file mode 100644
index 0000000000000000000000000000000000000000..2d2cab1890cfdab945bb6700899da7906ff490c5
--- /dev/null
+++ b/src/main/java/io/papermc/paper/inventory/item/properties/AttributePair.java
@@ -0,0 +1,7 @@
+package io.papermc.paper.inventory.item.properties;
+
+import org.bukkit.attribute.Attribute;
+import org.bukkit.attribute.AttributeModifier;
+
+public record AttributePair(Attribute attribute, AttributeModifier modifier) {
+}
diff --git a/src/main/java/io/papermc/paper/inventory/item/properties/EnchantmentPair.java b/src/main/java/io/papermc/paper/inventory/item/properties/EnchantmentPair.java
new file mode 100644
index 0000000000000000000000000000000000000000..e338b2eb52c8cef657981b8744b95f894b0ebcf6
--- /dev/null
+++ b/src/main/java/io/papermc/paper/inventory/item/properties/EnchantmentPair.java
@@ -0,0 +1,6 @@
+package io.papermc.paper.inventory.item.properties;
+
+import org.bukkit.enchantments.Enchantment;
+
+public record EnchantmentPair(Enchantment enchantment, int level) {
+}
diff --git a/src/main/java/io/papermc/paper/inventory/item/properties/ItemProperties.java b/src/main/java/io/papermc/paper/inventory/item/properties/ItemProperties.java
new file mode 100644
index 0000000000000000000000000000000000000000..25a04d5b37616bda097377b58c5886ebaa57f97a
--- /dev/null
+++ b/src/main/java/io/papermc/paper/inventory/item/properties/ItemProperties.java
@@ -0,0 +1,122 @@
+package io.papermc.paper.inventory.item.properties;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import io.leangen.geantyref.TypeFactory;
+import io.papermc.paper.math.Position;
+import io.papermc.paper.property.MutablePropertyView;
+import io.papermc.paper.property.PropertyKey;
+import net.kyori.adventure.text.Component;
+import org.bukkit.Color;
+import org.bukkit.FireworkEffect;
+import org.bukkit.MusicInstrument;
+import org.bukkit.NamespacedKey;
+import org.bukkit.entity.Axolotl;
+import org.bukkit.inventory.ItemFlag;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.potion.PotionData;
+import org.bukkit.potion.PotionEffect;
+import org.jetbrains.annotations.ApiStatus;
+
+import java.util.List;
+import java.util.Set;
+
+@ApiStatus.Experimental
+public interface ItemProperties {
+
+    // COMMON
+    PropertyKey<List<EnchantmentPair>> ENCHANTMENTS = PropertyKey.of("Enchantments", TypeFactory.parameterizedClass(List.class, EnchantmentPair.class));
+    PropertyKey<Boolean> UNBREAKABLE = PropertyKey.of("Unbreakable", Boolean.class);
+    //PropertyKey<> CAN_DESTROY_BLOCK_LIST = PropertyKey.ofSimpleValue("CanDestroy", );
+    //PropertyKey CAN_PLACE_ON_BLOCK_LIST = PropertyKey.ofSimpleValue("CanPlaceOn", );
+    PropertyKey<Set<ItemFlag>> HIDE_FLAGS = PropertyKey.of("HideFlags", TypeFactory.parameterizedClass(Set.class, ItemFlag.class));
+    PropertyKey<Integer> REPAIR_COST = PropertyKey.of("RepairCost", Integer.class);
+    PropertyKey<Integer> CUSTOM_MODEL_DATA = PropertyKey.of("CustomModelData", Integer.class);
+    PropertyKey<Integer> DAMAGE = PropertyKey.of("damage", Integer.class);
+    PropertyKey<List<AttributePair>> ATTRIBUTES = PropertyKey.of("AttributeModifiers", TypeFactory.parameterizedClass(List.class, AttributePair.class));
+    PropertyKey<MutablePropertyView> BLOCK_STATE = PropertyKey.of("BlockStateTag", MutablePropertyView.class);
+    PropertyKey<MutablePropertyView> ENTITY_TAG = PropertyKey.of("EntityTag", MutablePropertyView.class);
+
+    // DISPLAY PROPERTIES
+    PropertyKey<MutablePropertyView> DISPLAY = PropertyKey.of("display", MutablePropertyView.class);
+
+    PropertyKey<Component> DISPLAY_NAME = PropertyKey.of("Name", Component.class);
+    PropertyKey<List<Component>> LORE = PropertyKey.of("Lore", TypeFactory.parameterizedClass(List.class, Component.class));
+    PropertyKey<Color> COLOR = PropertyKey.of("color", Color.class);
+    PropertyKey<Color> MAP_COLOR = PropertyKey.of("MapColor", Color.class);
+
+    // CUSTOM
+    PropertyKey<MutablePropertyView> PUBLIC_BUKKIT_VALUES = PropertyKey.of("PublicBukkitValues", MutablePropertyView.class);
+    @Deprecated(forRemoval = true)
+    PropertyKey<String> LOC_NAME = PropertyKey.of("LocName", String.class);
+
+
+    // TropicalFishBucketMeta
+    PropertyKey<TropicalFishVariant> TROPICAL_FISH_BUCKET_VARIANT = PropertyKey.of("BucketVariantTag", TropicalFishVariant.class);
+
+    // SuspiciousStewMeta
+    PropertyKey<List<StewEffect>> STEW_EFFECTS = PropertyKey.of("Effects", TypeFactory.parameterizedClass(List.class, StewEffect.class));
+
+    // CraftMetaSkull
+    // Can be a STRING or a skull profile
+    PropertyKey<PlayerProfile> SKULL_OWNER = PropertyKey.of("SkullOwner", PlayerProfile.class);
+    PropertyKey<String> SKULL_OWNER_NAME = PropertyKey.of("SkullOwner", String.class);
+
+    // PotionMeta
+    PropertyKey<PotionData> DEFAULT_POTION_TYPE = PropertyKey.of("Potion", PotionData.class);
+    PropertyKey<List<PotionEffect>> CUSTOM_POTION_EFFECTS = PropertyKey.of("CustomPotionEffects", TypeFactory.parameterizedClass(List.class, PotionEffect.class));
+
+    // MapMeta
+    PropertyKey<Integer> MAP_ID = PropertyKey.of("map", Integer.class);
+    PropertyKey<Byte> MAP_SCALE_DIRECTION = PropertyKey.of("map_scale_direction", Byte.class);
+    // Unused, really. Marks the map to be locked when crafted
+    PropertyKey<Boolean> MAP_TO_LOCK = PropertyKey.of("map_to_lock", Boolean.class);
+
+    // KnowledgeBookMeta
+    PropertyKey<List<NamespacedKey>> RECIPES = PropertyKey.of("Recipes", TypeFactory.parameterizedClass(List.class, NamespacedKey.class));
+
+    // FireworkMeta
+    PropertyKey<Byte> FLIGHT = PropertyKey.of("Flight", Byte.class);
+    PropertyKey<List<FireworkEffect>> EXPLOSIONS = PropertyKey.of("Explosions", TypeFactory.parameterizedClass(List.class, FireworkEffect.class));
+
+    // FireworkEffectMeta
+    PropertyKey<FireworkEffect> EXPLOSION = PropertyKey.of("Explosion", FireworkEffect.class);
+
+    // EnchantmentStorageMeta
+    PropertyKey<List<EnchantmentPair>> STORED_ENCHANTMENTS = PropertyKey.of("StoredEnchantments", TypeFactory.parameterizedClass(List.class, EnchantmentPair.class));
+
+    // CrossbowMeta
+    PropertyKey<Boolean> CHARGED = PropertyKey.of("Charged", Boolean.class);
+    PropertyKey<List<ItemStack>> CHARGED_PROJECTILES = PropertyKey.of("ChargedProjectiles", TypeFactory.parameterizedClass(List.class, ItemStack.class));
+
+    // CompassMeta
+    PropertyKey<Position> LODESTONE_POS = PropertyKey.of("LodestonePos", Position.class);
+    PropertyKey<NamespacedKey> LODESTONE_DIMENSION = PropertyKey.of("LodestoneDimension", NamespacedKey.class);
+    PropertyKey<Boolean> LODESTONE_TRACKED = PropertyKey.of("LodestoneTracked", Boolean.class);
+
+    // BundleMeta
+    PropertyKey<List<ItemStack>> ITEMS = PropertyKey.of("Items", TypeFactory.parameterizedClass(List.class, ItemStack.class));
+
+    // BookMeta
+    PropertyKey<String> TITLE = PropertyKey.of("title", String.class);
+    PropertyKey<String> TITLE_FILTERED = PropertyKey.of("filtered_title", String.class);
+    PropertyKey<String> AUTHOR = PropertyKey.of("author", String.class);
+    PropertyKey<List<Component>> PAGES = PropertyKey.of("pages", TypeFactory.parameterizedClass(List.class, Component.class));
+    PropertyKey<List<Component>> PAGES_FILTERED = PropertyKey.of("filtered_pages", TypeFactory.parameterizedClass(List.class, Component.class));
+    PropertyKey<Integer> GENERATION = PropertyKey.of("generation", Integer.class);
+    PropertyKey<Boolean> RESOLVED = PropertyKey.of("resolved", Boolean.class);
+
+    // UnsignedBookMeta
+    PropertyKey<List<String>> PAGES_WRITTEN = PropertyKey.of("pages", TypeFactory.parameterizedClass(List.class, String.class));
+
+    // BlockStateMeta
+    PropertyKey<MutablePropertyView> BLOCK_ENTITY_TAG = PropertyKey.of("BlockEntityTag", MutablePropertyView.class);
+    // Some odd entity tags included in item meta
+    PropertyKey<NamespacedKey> NOTE_BLOCK_SOUND = PropertyKey.of("note_block_sound", NamespacedKey.class);
+
+    // AxolotlBucket
+    PropertyKey<Axolotl.Variant> VARIANT = PropertyKey.of("Variant", Axolotl.Variant.class);
+
+    // MusicInstrumentMeta
+    PropertyKey<MusicInstrument> INSTRUMENT = PropertyKey.of("instrument", MusicInstrument.class);
+
+}
diff --git a/src/main/java/io/papermc/paper/inventory/item/properties/StewEffect.java b/src/main/java/io/papermc/paper/inventory/item/properties/StewEffect.java
new file mode 100644
index 0000000000000000000000000000000000000000..4861b9e3c431e3e9d61aa3949fed61c68869357d
--- /dev/null
+++ b/src/main/java/io/papermc/paper/inventory/item/properties/StewEffect.java
@@ -0,0 +1,8 @@
+package io.papermc.paper.inventory.item.properties;
+
+import org.bukkit.potion.PotionEffectType;
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Experimental
+public record StewEffect(PotionEffectType effect, int duration) {
+}
diff --git a/src/main/java/io/papermc/paper/inventory/item/properties/TropicalFishVariant.java b/src/main/java/io/papermc/paper/inventory/item/properties/TropicalFishVariant.java
new file mode 100644
index 0000000000000000000000000000000000000000..061e2627e2f1202504a214edb2f5764a8a757298
--- /dev/null
+++ b/src/main/java/io/papermc/paper/inventory/item/properties/TropicalFishVariant.java
@@ -0,0 +1,9 @@
+package io.papermc.paper.inventory.item.properties;
+
+import org.bukkit.DyeColor;
+import org.bukkit.entity.TropicalFish;
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Experimental
+public record TropicalFishVariant(DyeColor patternColor, DyeColor bodyColor, TropicalFish.Pattern type) {
+}
diff --git a/src/main/java/io/papermc/paper/property/MutablePropertyView.java b/src/main/java/io/papermc/paper/property/MutablePropertyView.java
new file mode 100644
index 0000000000000000000000000000000000000000..942c90c4102ed7a1da3da3ad6722d406095cc537
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/MutablePropertyView.java
@@ -0,0 +1,16 @@
+package io.papermc.paper.property;
+
+public interface MutablePropertyView extends PropertyView, Cloneable {
+
+    <T> void unset(PropertyKey<T> key);
+
+    <T> void set(PropertyKey<T> key, T value);
+
+    <T> T create(PropertyKey<T> key);
+
+    <T> T getOrCreate(PropertyKey<T> key);
+
+    MutablePropertyView clone();
+
+    void clear();
+}
diff --git a/src/main/java/io/papermc/paper/property/PropertyKey.java b/src/main/java/io/papermc/paper/property/PropertyKey.java
new file mode 100644
index 0000000000000000000000000000000000000000..2c1065656f05d150a5dc265a49d6f94ae354c921
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/PropertyKey.java
@@ -0,0 +1,69 @@
+package io.papermc.paper.property;
+
+import io.leangen.geantyref.TypeToken;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+import java.lang.reflect.Type;
+
+/**
+ * Represents a key that holds a property.
+ *
+ * @param <T> type
+ */
+@ApiStatus.Experimental
+public interface PropertyKey<T> {
+
+    /**
+     * Creates a property key with the provided key and class.
+     *
+     * @param key   string key
+     * @param token class type
+     * @param <T>   type
+     * @return property key
+     */
+    static <T> PropertyKey<T> of(String key, Class<T> token) {
+        return new PropertyKeyImpl<>(key, token);
+    }
+
+    /**
+     * Creates a property key with the provided key and type token.
+     *
+     * @param key   string key
+     * @param token type token
+     * @param <T>   type
+     * @return property key
+     */
+    static <T> PropertyKey<T> of(String key, TypeToken<T> token) {
+        return new PropertyKeyImpl<>(key, token.getType());
+    }
+
+    /**
+     * Creates a property key with the provided key and type.
+     *
+     * @param key  string key
+     * @param type type
+     * @param <T>  type
+     * @return property key
+     */
+    static <T> PropertyKey<T> of(String key, Type type) {
+        return new PropertyKeyImpl<>(key, type);
+    }
+
+    /**
+     * Gets they key of this propertykey.
+     *
+     * @return key
+     */
+    @NotNull
+    String getKey();
+
+    /**
+     * Gets the value type of this key
+     *
+     * @return value type
+     */
+    @NotNull
+    Type getValueType();
+
+}
diff --git a/src/main/java/io/papermc/paper/property/PropertyKeyImpl.java b/src/main/java/io/papermc/paper/property/PropertyKeyImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..325a0452f41b495184d718849f28056969902ca7
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/PropertyKeyImpl.java
@@ -0,0 +1,21 @@
+package io.papermc.paper.property;
+
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+import java.lang.reflect.Type;
+
+@ApiStatus.Internal
+record PropertyKeyImpl<V>(String key, Type value) implements PropertyKey<V> {
+
+    @Override
+    public @NotNull String getKey() {
+        return this.key;
+    }
+
+    @Override
+    public @NotNull Type getValueType() {
+        return this.value;
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/property/PropertyView.java b/src/main/java/io/papermc/paper/property/PropertyView.java
new file mode 100644
index 0000000000000000000000000000000000000000..d44edfb99b33556484f930a68e485163d490564f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/PropertyView.java
@@ -0,0 +1,56 @@
+package io.papermc.paper.property;
+
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Represents an object that can hold properties.
+ */
+@ApiStatus.Experimental
+public interface PropertyView {
+
+    /**
+     * Gets the value of a property with the given key.
+     * May return null if value is not present.
+     *
+     * @param key key
+     * @param <T> type
+     * @return value
+     */
+    @Nullable <T> T get(PropertyKey<T> key);
+
+    /**
+     * Gets the value of a property with the given key.
+     * Will return the provided default value if the value is not present.
+     *
+     * @param key key
+     * @param defaultValue value to return if returned key value is null
+     * @param <T> type
+     * @return value
+     */
+    @Contract("_,!null -> !null")
+    default @Nullable <T> T getOrDefault(@NotNull PropertyKey<T> key, @Nullable T defaultValue) {
+        T returnedValue = this.get(key);
+        if (returnedValue == null) {
+            return defaultValue;
+        }
+
+        return returnedValue;
+    }
+
+    /**
+     * Gets if the current property reader contains a property with a value.
+     *
+     * @param propertyKey key
+     * @return has property
+     */
+    boolean hasProperty(@NotNull PropertyKey<?> propertyKey);
+
+    /**
+     * Returns if the current reader contains no properties.
+     * @return is empty
+     */
+    boolean isEmpty();
+}
diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index b92255a9c87620f46adb140689b1cd328a476d61..bf91c5e84186a4124ef0e7665af36ac54dcb41e8 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -244,5 +244,9 @@ public interface UnsafeValues {
      * @throws IllegalStateException if no biome by the given key is registered.
      */
     void setBiomeKey(RegionAccessor accessor, int x, int y, int z, NamespacedKey biomeKey);
+
+    io.papermc.paper.property.MutablePropertyView getPropertyHolder(ItemStack itemStack);
+
+    ItemStack newItem(org.bukkit.Material material, int count);
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index 449d6e1995eedbfaeffdc5d1f1c2295378006aa8..27203ae4007bbad209b1c3a6bd423348d37bd457 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -985,5 +985,10 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
     public @NotNull ItemStack damage(int amount, @NotNull org.bukkit.entity.LivingEntity livingEntity) {
         return livingEntity.damageItemStack(this, amount);
     }
+
+
+    public io.papermc.paper.property.MutablePropertyView getPropertyHolder() {
+        return Bukkit.getUnsafe().getPropertyHolder(this);
+    }
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
index 86771934c76dd63b219069b045dbb5511ee0f45d..3402715035af2ccb6cd9d18abd35981aff56e929 100644
--- a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
@@ -2,6 +2,12 @@ package org.bukkit.plugin.java;
 
 import com.google.common.base.Preconditions;
 import com.google.common.io.ByteStreams;
+import org.bukkit.plugin.InvalidPluginException;
+import org.bukkit.plugin.PluginDescriptionFile;
+import org.bukkit.plugin.SimplePluginManager;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
@@ -20,11 +26,6 @@ import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 import java.util.jar.Manifest;
 import java.util.logging.Level;
-import org.bukkit.plugin.InvalidPluginException;
-import org.bukkit.plugin.PluginDescriptionFile;
-import org.bukkit.plugin.SimplePluginManager;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 /**
  * A ClassLoader for plugins, to allow shared classes across multiple plugins
@@ -71,6 +72,24 @@ public final class PluginClassLoader extends URLClassLoader implements io.paperm
         this.classLoaderGroup = io.papermc.paper.plugin.provider.classloader.PaperClassLoaderStorage.instance().registerSpigotGroup(this);
         // Paper end
         try {
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
             Class<?> jarClass;
             try {
                 jarClass = Class.forName(description.getMain(), true, this);
