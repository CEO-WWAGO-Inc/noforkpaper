From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Thu, 2 Jul 2020 16:10:10 -0700
Subject: [PATCH] added PlayerTradeEvent


diff --git a/src/main/java/io/papermc/paper/event/player/PlayerPurchaseEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerPurchaseEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..9d2592a4880a4d5c8021a08968960965f71f450a
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/player/PlayerPurchaseEvent.java
@@ -0,0 +1,113 @@
+package io.papermc.paper.event.player;
+
+import java.util.Objects;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.bukkit.inventory.MerchantRecipe;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Called when a player trades with a standalone merchant GUI.
+ */
+public class PlayerPurchaseEvent extends PlayerEvent implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+    private boolean cancelled;
+
+    private boolean increaseTradeUses;
+    private boolean rewardExp;
+    private MerchantRecipe trade;
+
+    public PlayerPurchaseEvent(@NotNull Player player,
+                               @NotNull MerchantRecipe trade,
+                               boolean rewardExp,
+                               boolean increaseTradeUses) {
+        super(Objects.requireNonNull(player, "Player cannot be null!"));
+        this.trade = Objects.requireNonNull(trade, "Trade cannot be null!");
+        this.rewardExp = rewardExp;
+        this.increaseTradeUses = increaseTradeUses;
+    }
+
+    /**
+     * Gets the associated trade with this event
+     * @return the trade
+     */
+    @NotNull
+    public MerchantRecipe getTrade() {
+        return trade;
+    }
+
+    /**
+     * Sets the trade. This is then used to determine the next prices
+     * @param trade the trade to use
+     */
+    public void setTrade(@Nullable MerchantRecipe trade) {
+        this.trade = trade;
+    }
+
+    /**
+     * @return will trade try to reward exp
+     */
+    public boolean isRewardingExp() {
+        return rewardExp;
+    }
+
+    /**
+     * Sets whether the trade will try to reward exp
+     * @param rewardExp try to reward exp
+     */
+    public void setRewardExp(boolean rewardExp) {
+        this.rewardExp = rewardExp;
+    }
+
+    /**
+     * @return whether or not the trade will count as a use of the trade
+     */
+    public boolean willIncreaseTradeUses() {
+        return increaseTradeUses;
+    }
+
+    /**
+     * Sets whether or not the trade will count as a use
+     * @param increaseTradeUses true to count/false to not count
+     */
+    public void setIncreaseTradeUses(boolean increaseTradeUses) {
+        this.increaseTradeUses = increaseTradeUses;
+    }
+
+    /**
+     * Gets the cancellation state of this event. A cancelled event will not
+     * be executed in the server, but will still pass to other plugins
+     *
+     * @return true if this event is cancelled
+     */
+    @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    /**
+     * Sets the cancellation state of this event. A cancelled event will not
+     * be executed in the server, but will still pass to other plugins.
+     *
+     * @param cancel true if you wish to cancel this event
+     */
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerTradeEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerTradeEvent.java
new file mode 100755
index 0000000000000000000000000000000000000000..a83a7f6c4f528b820320ba33c8d8ab074d2b2051
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/player/PlayerTradeEvent.java
@@ -0,0 +1,43 @@
+package io.papermc.paper.event.player;
+
+import org.bukkit.entity.AbstractVillager;
+import org.bukkit.entity.Player;
+import org.bukkit.event.HandlerList;
+import org.bukkit.inventory.MerchantRecipe;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when a player trades with a villager or wandering trader
+ */
+public class PlayerTradeEvent extends PlayerPurchaseEvent {
+
+    private static final HandlerList handlers = new HandlerList();
+
+    private final AbstractVillager villager;
+
+    public PlayerTradeEvent(@NotNull Player player, @NotNull AbstractVillager villager, @NotNull MerchantRecipe trade, boolean rewardExp, boolean increaseTradeUses) {
+        super(player, trade, rewardExp, increaseTradeUses);
+        this.villager = villager;
+    }
+
+    /**
+     * Gets the Villager or Wandering trader associated with this event
+     * @return the villager or wandering trader
+     */
+    @NotNull
+    public AbstractVillager getVillager() {
+        return villager;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+}
