From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Corey Shupe <coreyshupe101@gmail.com>
Date: Wed, 11 Jan 2023 16:40:39 -0500
Subject: [PATCH] Add Listing API for Player


diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java
index 4cd1cce5641c6001b34b9da6aac779bf6e8480d1..486cc72a9ba0d3ff644173f8de8f2d118ee57112 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java
@@ -28,11 +28,23 @@ public class ClientboundPlayerInfoUpdatePacket implements Packet<ClientGamePacke
         this.actions = EnumSet.of(action);
         this.entries = List.of(new ClientboundPlayerInfoUpdatePacket.Entry(player));
     }
+    // Paper start
+    public ClientboundPlayerInfoUpdatePacket(EnumSet<ClientboundPlayerInfoUpdatePacket.Action> actions, ClientboundPlayerInfoUpdatePacket.Entry entry) {
+        this.actions = actions;
+        this.entries = List.of(entry);
+    }
+    // Paper end
 
     public static ClientboundPlayerInfoUpdatePacket createPlayerInitializing(Collection<ServerPlayer> players) {
         EnumSet<ClientboundPlayerInfoUpdatePacket.Action> enumSet = EnumSet.of(ClientboundPlayerInfoUpdatePacket.Action.ADD_PLAYER, ClientboundPlayerInfoUpdatePacket.Action.INITIALIZE_CHAT, ClientboundPlayerInfoUpdatePacket.Action.UPDATE_GAME_MODE, ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LISTED, ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LATENCY, ClientboundPlayerInfoUpdatePacket.Action.UPDATE_DISPLAY_NAME);
         return new ClientboundPlayerInfoUpdatePacket(enumSet, players);
     }
+    // Paper start
+    public static ClientboundPlayerInfoUpdatePacket updateListed(UUID playerInfoId, boolean listed) {
+        EnumSet<ClientboundPlayerInfoUpdatePacket.Action> enumSet = EnumSet.of(ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LISTED);
+        return new ClientboundPlayerInfoUpdatePacket(enumSet, new ClientboundPlayerInfoUpdatePacket.Entry(playerInfoId, listed));
+    }
+    // Paper end
 
     public ClientboundPlayerInfoUpdatePacket(FriendlyByteBuf buf) {
         this.actions = buf.readEnumSet(ClientboundPlayerInfoUpdatePacket.Action.class);
@@ -138,6 +150,11 @@ public class ClientboundPlayerInfoUpdatePacket implements Packet<ClientGamePacke
         Entry(ServerPlayer player) {
             this(player.getUUID(), player.getGameProfile(), true, player.latency, player.gameMode.getGameModeForPlayer(), player.getTabListDisplayName(), Util.mapNullable(player.getChatSession(), RemoteChatSession::asData));
         }
+        // Paper start
+        Entry(UUID profileId, boolean listed) {
+            this(profileId, null, listed, 0, GameType.DEFAULT_MODE, null, null);
+        }
+        // Paper end
     }
 
     static class EntryBuilder {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index b32f44beab2c9790ee2da8403e362e8b3ecc6175..a821944eac5edaf9bd7e04f71efee030543d65da 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -165,6 +165,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private final ConversationTracker conversationTracker = new ConversationTracker();
     private final Set<String> channels = new HashSet<String>();
     private final Map<UUID, Set<WeakReference<Plugin>>> hiddenEntities = new HashMap<>();
+    private final Map<UUID, Set<WeakReference<Plugin>>> unlistedEntities = new HashMap<>();
     private static final WeakHashMap<Plugin, WeakReference<Plugin>> pluginWeakReferences = new WeakHashMap<>();
     private int hash = 0;
     private double health = 20;
@@ -1848,6 +1849,57 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public boolean canSee(org.bukkit.entity.Entity entity) {
         return !this.hiddenEntities.containsKey(entity.getUniqueId());
     }
+    // Paper start
+    @Override
+    public boolean isListed(Player other) {
+        return !this.unlistedEntities.containsKey(other.getUniqueId());
+    }
+
+    @Override
+    public void setListed(@NotNull Plugin plugin, @NotNull Player other, boolean listed) {
+        if (listed) {
+            listPlayer(plugin, other);
+        } else {
+            deListPlayer(plugin, other);
+        }
+    }
+
+    @Override
+    public boolean deListPlayer(@NotNull Plugin plugin, @NotNull Player other) {
+        Validate.notNull(other, "hidden entity cannot be null");
+        if (this.getHandle().connection == null) return false;
+        if (this.equals(other)) return false;
+        if (!this.canSee(other)) return false;
+
+        Set<WeakReference<Plugin>> hidingPlugins = this.unlistedEntities.get(other.getUniqueId());
+        if (hidingPlugins != null) {
+            // Some plugins are already hiding the entity. Just mark that this
+            // plugin wants the entity hidden too and end.
+            return hidingPlugins.add(CraftPlayer.getPluginWeakReference(plugin));
+        }
+        hidingPlugins = new HashSet<>();
+        hidingPlugins.add(CraftPlayer.getPluginWeakReference(plugin));
+        this.unlistedEntities.put(other.getUniqueId(), hidingPlugins);
+        this.getHandle().connection.send(ClientboundPlayerInfoUpdatePacket.updateListed(other.getUniqueId(), false));
+        return true;
+    }
+
+    @Override
+    public boolean listPlayer(@NotNull Plugin plugin, @NotNull Player other) {
+        Validate.notNull(other, "hidden entity cannot be null");
+        if (this.getHandle().connection == null) return false;
+        if (this.equals(other)) return false;
+        if (!this.canSee(other)) throw new IllegalStateException("Player cannot see other player");
+
+        Set<WeakReference<Plugin>> hidingPlugins = this.unlistedEntities.get(other.getUniqueId());
+        if (hidingPlugins == null) {
+            return false; // Entity isn't hidden
+        }
+        boolean updated = hidingPlugins.remove(CraftPlayer.getPluginWeakReference(plugin));
+        // todo send update packet
+        return updated;
+    }
+    // Paper end
 
     @Override
     public Map<String, Object> serialize() {
