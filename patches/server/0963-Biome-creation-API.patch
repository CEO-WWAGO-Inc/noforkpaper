From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Denery <dorofeevij@gmail.com>
Date: Wed, 22 Feb 2023 15:47:50 +0300
Subject: [PATCH] Biome creation API


diff --git a/src/main/java/io/papermc/paper/registry/APIConverters.java b/src/main/java/io/papermc/paper/registry/APIConverters.java
index 61e0d7d9471bbc5b50ec2dc1e5263d4cd8ffe99a..cbeda838e74543c97bd274902557a2821879c5af 100644
--- a/src/main/java/io/papermc/paper/registry/APIConverters.java
+++ b/src/main/java/io/papermc/paper/registry/APIConverters.java
@@ -5,6 +5,15 @@ import com.google.common.collect.HashBiMap;
 import io.papermc.paper.registry.key.RegistryKey;
 import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceKey;
+// Paper start - Biome creation API
+import com.google.common.base.Suppliers;
+import net.minecraft.core.registries.Registries;
+import net.minecraft.world.level.biome.BiomeGenerationSettings;
+import net.minecraft.world.level.biome.BiomeSpecialEffects;
+import net.minecraft.world.level.biome.MobSpawnSettings;
+import org.bukkit.block.Biome;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+// Paper end
 
 import java.util.HashMap;
 import java.util.Map;
@@ -24,9 +33,35 @@ public final class APIConverters {
      *  If you want to add a registry for a new API, add its converter in there.
      */
     public static void initializeConverterFunctions() {
+        final Function<Registry<net.minecraft.world.level.biome.Biome>, Converters.Converter<Biome, net.minecraft.world.level.biome.Biome>> registryConverterFunction = registry -> Converters.Converter.createCached(
+            apiBiome -> {
+                net.minecraft.world.level.biome.Biome nmsBiome = registry.get(CraftNamespacedKey.toMinecraft(apiBiome.getKey()));
+                if (nmsBiome != null) {
+                    return nmsBiome;
+                } else {
+                    if (apiBiome == Biome.CUSTOM)
+                        throw new IllegalStateException("Cannot convert CUSTOM biome!");
+                    return new net.minecraft.world.level.biome.Biome.BiomeBuilder()
+                        .temperature(apiBiome.getClimateSettings().temperature())
+                        .downfall(1F)
+                        .precipitation(net.minecraft.world.level.biome.Biome.Precipitation.RAIN)
+                        .generationSettings(new BiomeGenerationSettings.PlainBuilder().build())
+                        .mobSpawnSettings(new MobSpawnSettings.Builder().build())
+                        .specialEffects(new BiomeSpecialEffects.Builder().fogColor(1).waterFogColor(1).waterColor(1).skyColor(1).build())
+                        .temperatureAdjustment(net.minecraft.world.level.biome.Biome.TemperatureModifier.FROZEN)
+                        .build();
+                }
+            }, nmsBiome -> {
+                Biome biome = org.bukkit.Registry.BIOME.get(CraftNamespacedKey.fromMinecraft(registry.getKey(nmsBiome)));
+                return (biome == null) ? Biome.CUSTOM : biome;
+            }
+        );
+
+        APIConverters.registerConverterFunction(ExtendedRegistry.BIOME_REGISTRY_KEY, registryConverterFunction);
     }
 
     public static void initializeRegistryKeys() {
+        APIConverters.REGISTRY_KEY_REGISTRY.put(ExtendedRegistry.BIOME_REGISTRY_KEY, Suppliers.memoize(() -> Registries.BIOME));
     }
 
     @SuppressWarnings("unchecked")
diff --git a/src/main/java/io/papermc/paper/registry/RegistryAPI.java b/src/main/java/io/papermc/paper/registry/RegistryAPI.java
index ff83ca0c019890cff2185ab7ac3256a7b182ffbc..b22c672b1a1798aebdcbb6ca9e2499bcc6fdafc5 100644
--- a/src/main/java/io/papermc/paper/registry/RegistryAPI.java
+++ b/src/main/java/io/papermc/paper/registry/RegistryAPI.java
@@ -48,6 +48,7 @@ public final class RegistryAPI {
 
     static void initializeKeys() {
         final APIStorage storage = RegistryAPI.getApiStorage();
+        storage.registerAPIClass(org.bukkit.block.Biome.class, net.minecraft.core.registries.Registries.BIOME);
     }
 
     @SuppressWarnings("unchecked")
@@ -76,6 +77,7 @@ public final class RegistryAPI {
             ExtendedRegistry.API.simpleRegistry = LifecyclePointUtil.SIMPLE_REGISTRY;
             EnumSettingExtractors.initializeExtractors();
             EnumCreators.launchAPI();
+            io.papermc.paper.world.biome.BiomeAPI.launchAPI();
         }
     }
 
diff --git a/src/main/java/io/papermc/paper/registry/enums/EnumCreators.java b/src/main/java/io/papermc/paper/registry/enums/EnumCreators.java
index 1345d617ef20c63573ab9391799dd9f01126c4fa..208a85796625c4d508543117cb0c5a557a010cc2 100644
--- a/src/main/java/io/papermc/paper/registry/enums/EnumCreators.java
+++ b/src/main/java/io/papermc/paper/registry/enums/EnumCreators.java
@@ -29,9 +29,11 @@ public final class EnumCreators {
     private static final Map<Class<?>, MethodHandle> methodHandleRegistry = new HashMap<>();
 
     static {
+        enumConstructorMethodHandle(org.bukkit.block.Biome.class, io.papermc.paper.world.biome.ClimateSettings.class, io.papermc.paper.world.biome.BiomeSpecialEffects.class);
     }
 
     public static void launchAPI() {
+        org.bukkit.block.Biome.API.enumCreator = factory.create(org.bukkit.block.Biome.class, io.papermc.paper.world.biome.ClimateSettings.class, io.papermc.paper.world.biome.BiomeSpecialEffects.class);
     }
 
     public static EnumCreatorFactory enumCreatorFactory() {
diff --git a/src/main/java/io/papermc/paper/registry/enums/EnumSettingExtractors.java b/src/main/java/io/papermc/paper/registry/enums/EnumSettingExtractors.java
index c13f65f1bc3d297306bde0fc1364c1bc0773094c..9925614467f1855ad4e2b12e87d43acab6de9026 100644
--- a/src/main/java/io/papermc/paper/registry/enums/EnumSettingExtractors.java
+++ b/src/main/java/io/papermc/paper/registry/enums/EnumSettingExtractors.java
@@ -13,6 +13,8 @@ public final class EnumSettingExtractors {
     private static final Map<Class<?>, Function<?, ?>> enumSettingsRegistry = new HashMap<>();
 
     public static void initializeExtractors() {
+        registerEnumSetting(io.papermc.paper.world.biome.ClimateSettings.class, (net.minecraft.world.level.biome.Biome biome) -> new io.papermc.paper.world.biome.ClimateSettingsImpl(biome));
+        registerEnumSetting(io.papermc.paper.world.biome.BiomeSpecialEffects.class, (net.minecraft.world.level.biome.Biome biome) -> new io.papermc.paper.world.biome.BiomeSpecialEffectsImpl(biome));
     }
 
     public static <S, NMS> void registerEnumSetting(Class<S> setting, Function<NMS, S> extractor) {
diff --git a/src/main/java/io/papermc/paper/world/biome/BiomeAPI.java b/src/main/java/io/papermc/paper/world/biome/BiomeAPI.java
new file mode 100644
index 0000000000000000000000000000000000000000..d97a2cf5aeb8336fe63901d7109a4958eeacb708
--- /dev/null
+++ b/src/main/java/io/papermc/paper/world/biome/BiomeAPI.java
@@ -0,0 +1,89 @@
+package io.papermc.paper.world.biome;
+
+import org.jetbrains.annotations.NotNull;
+
+public final class BiomeAPI {
+    private BiomeAPI() {}
+
+    public static void launchAPI() {
+        ClimateSettings.API.builderFactory = () -> new ClimateSettings.Builder() {
+            float temperature = 0.7F;
+            float downfall = 0.8F;
+            ClimateSettings.Precipitation precipitation = ClimateSettings.Precipitation.NONE;
+
+            @Override
+            public ClimateSettings.@NotNull Builder temperature(float temperature) {
+                this.temperature = temperature;
+                return this;
+            }
+
+            @Override
+            public ClimateSettings.@NotNull Builder downfall(float downfall) {
+                this.downfall = downfall;
+                return this;
+            }
+
+            @Override
+            public ClimateSettings.@NotNull Builder precipitation(ClimateSettings.@NotNull Precipitation precipitation) {
+                this.precipitation = precipitation;
+                return this;
+            }
+
+            @Override
+            public @NotNull ClimateSettings build() {
+                return new ClimateSettingsImpl(temperature, downfall, precipitation);
+            }
+        };
+
+        BiomeSpecialEffects.API.builderFactory = () -> new BiomeSpecialEffects.Builder() {
+            // Values copied from the forest biome
+            int skyColor = 7972607;
+            int fogColor = 12638463;
+            int waterColor = 4159204;
+            int waterFogColor = 329011;
+            Integer grassColor = null;
+            Integer foliageColor = null;
+
+            @Override
+            public BiomeSpecialEffects.@NotNull Builder skyColor(int skyColor) {
+                this.skyColor = skyColor;
+                return this;
+            }
+
+            @Override
+            public BiomeSpecialEffects.@NotNull Builder fogColor(int fogColor) {
+                this.fogColor = fogColor;
+                return this;
+            }
+
+            @Override
+            public BiomeSpecialEffects.@NotNull Builder waterColor(int waterColor) {
+                this.waterColor = waterColor;
+                return this;
+            }
+
+            @Override
+            public BiomeSpecialEffects.@NotNull Builder waterFogColor(int waterFogColor) {
+                this.waterFogColor = waterFogColor;
+                return this;
+            }
+
+            @Override
+            public BiomeSpecialEffects.@NotNull Builder grassColor(int grassColor) {
+                this.grassColor = grassColor;
+                return this;
+            }
+
+            @Override
+            public BiomeSpecialEffects.@NotNull Builder foliageColor(int foliageColor) {
+                this.foliageColor = foliageColor;
+                return this;
+            }
+
+            @Override
+            public @NotNull BiomeSpecialEffects build() {
+                return new BiomeSpecialEffectsImpl(skyColor, fogColor, waterColor, waterFogColor, grassColor, foliageColor);
+            }
+        };
+    }
+}
diff --git a/src/main/java/io/papermc/paper/world/biome/BiomeSpecialEffectsImpl.java b/src/main/java/io/papermc/paper/world/biome/BiomeSpecialEffectsImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..66b4b9ad140d5d7e57d34776fea277700eb437a0
--- /dev/null
+++ b/src/main/java/io/papermc/paper/world/biome/BiomeSpecialEffectsImpl.java
@@ -0,0 +1,64 @@
+package io.papermc.paper.world.biome;
+
+import net.minecraft.world.level.biome.Biome;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Optional;
+
+public class BiomeSpecialEffectsImpl implements BiomeSpecialEffects {
+    final int skyColor;
+    final int fogColor;
+    final int waterColor;
+    final int waterFogColor;
+    final Optional<Integer> grassColor;
+    final Optional<Integer> foliageColor;
+
+    public BiomeSpecialEffectsImpl(int skyColor, int fogColor, int waterColor, int waterFogColor, Integer grassColor, Integer foliageColor) {
+        this.skyColor = skyColor;
+        this.fogColor = fogColor;
+        this.waterColor = waterColor;
+        this.waterFogColor = waterFogColor;
+        this.grassColor = Optional.ofNullable(grassColor);
+        this.foliageColor = Optional.ofNullable(foliageColor);
+    }
+
+    public BiomeSpecialEffectsImpl(Biome handle) {
+        this.skyColor = handle.getSkyColor();
+        this.fogColor = handle.getFogColor();
+        this.waterColor = handle.getWaterColor();
+        this.waterFogColor = handle.getWaterFogColor();
+        this.grassColor = handle.getSpecialEffects().getGrassColorOverride();
+        this.foliageColor = handle.getSpecialEffects().getFoliageColorOverride();
+    }
+
+
+    @Override
+    public int skyColor() {
+        return this.skyColor;
+    }
+
+    @Override
+    public int fogColor() {
+        return this.fogColor;
+    }
+
+    @Override
+    public int waterColor() {
+        return this.waterColor;
+    }
+
+    @Override
+    public int waterFogColor() {
+        return this.waterFogColor;
+    }
+
+    @Override
+    public @NotNull Optional<Integer> overriddenGrassColor() {
+        return grassColor;
+    }
+
+    @Override
+    public @NotNull Optional<Integer> overriddenFoliageColor() {
+        return foliageColor;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/world/biome/ClimateSettingsImpl.java b/src/main/java/io/papermc/paper/world/biome/ClimateSettingsImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..5ec93628a9b342ef69680070337997ffc8c9ce2f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/world/biome/ClimateSettingsImpl.java
@@ -0,0 +1,51 @@
+package io.papermc.paper.world.biome;
+
+import io.papermc.paper.registry.Converters;
+import net.minecraft.world.level.biome.Biome;
+import org.jetbrains.annotations.NotNull;
+
+public final class ClimateSettingsImpl implements ClimateSettings {
+    final float temperature;
+    final float downfall;
+    final Precipitation precipitation;
+
+    public ClimateSettingsImpl(Biome biome) {
+        this.temperature = biome.getBaseTemperature();
+        this.downfall = biome.getDownfall();
+        this.precipitation = precipitationConverter.convertNMS(biome.getPrecipitation());
+    }
+
+    public ClimateSettingsImpl(float temperature, float downfall, Precipitation precipitation) {
+        this.temperature = temperature;
+        this.downfall = downfall;
+        this.precipitation = precipitation;
+    }
+
+    public static Converters.Converter<ClimateSettings.Precipitation, Biome.Precipitation> precipitationConverter = Converters.Converter.create(
+        (ClimateSettings.Precipitation precipitation) -> switch (precipitation) {
+        case NONE -> Biome.Precipitation.NONE;
+        case RAIN -> Biome.Precipitation.RAIN;
+        case SNOW -> Biome.Precipitation.SNOW;
+    }, (Biome.Precipitation precipitation) -> switch (precipitation) {
+        case NONE -> ClimateSettings.Precipitation.NONE;
+        case RAIN -> ClimateSettings.Precipitation.RAIN;
+        case SNOW -> ClimateSettings.Precipitation.SNOW;
+    });
+
+    @Override
+    public float temperature() {
+        return temperature;
+    }
+
+    @Override
+    public float downfall() {
+        return downfall;
+    }
+
+    @Override
+    public @NotNull Precipitation precipitation() {
+        return precipitation;
+    }
+
+
+}
diff --git a/src/test/java/io/papermc/paper/registry/RegistryTest.java b/src/test/java/io/papermc/paper/registry/RegistryTest.java
index 6c1dfa698bb7d47520d46d37a1a1ef62fc4d1dcb..7ec828d6d65cd862af0f03db7f31daf1fdc6ba42 100644
--- a/src/test/java/io/papermc/paper/registry/RegistryTest.java
+++ b/src/test/java/io/papermc/paper/registry/RegistryTest.java
@@ -67,4 +67,14 @@ public class RegistryTest extends AbstractTestingBase {
         ResourceKey<Object> objectResourceKey1 = resourceKeyConverter.convertNMS(objectResourceKey);
         Assert.assertEquals(exampleResKey, objectResourceKey1);
     }
+
+    @Test
+    public void testRegistryKeyConversion() {
+        KeyAPI.launchAPI();
+        RegistryAPI.getApiStorage().registerAPIClass(Biome.class, Registries.BIOME);
+        RegistryKey.RegistryKeyFactory registryKeyFactory = KeyAPI.createRegistryKeyFactory();
+        RegistryKey.MutableRegistryKey<RegistryKey.RegistryLayerType.WORLDGEN, Biome> mutable = registryKeyFactory.createMutable(Biome.class, RegistryKey.RegistryLayerType.WORLDGEN.class);
+        System.out.println("key: " + mutable.key());
+        System.out.println("registry: " + mutable.registry());
+    }
 }
diff --git a/src/test/java/io/papermc/paper/world/biome/BiomeTest.java b/src/test/java/io/papermc/paper/world/biome/BiomeTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..632631d1a7b76e7b12a7cb5a87017181d2e87bb4
--- /dev/null
+++ b/src/test/java/io/papermc/paper/world/biome/BiomeTest.java
@@ -0,0 +1,17 @@
+package io.papermc.paper.world.biome;
+
+import net.minecraft.util.Mth;
+import org.junit.Test;
+
+public class BiomeTest {
+    @Test
+    public void test() {
+        System.out.println(calculateSkyColor(0.7F));
+    }
+
+    protected static int calculateSkyColor(float temperature) {
+        float f = temperature / 3.0F;
+        f = Mth.clamp(f, -1.0F, 1.0F);
+        return Mth.hsvToRgb(0.62222224F - f * 0.05F, 0.5F + f * 0.1F, 1.0F);
+    }
+}
