From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tristan Krstevski <tristankrst@gmail.com>
Date: Sat, 5 Aug 2023 19:29:57 +1000
Subject: [PATCH] Add Mob Spawner support to AffectsSpawning


diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 18aac3da3c88f33b1a71a5920a8daa27e9723913..9f621fe7bd33a0d9f2d68237eebc1130f8f09f9b 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -83,13 +83,7 @@ import net.minecraft.util.valueproviders.UniformInt;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.RandomSequences;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.EntityType;
-import net.minecraft.world.entity.LightningBolt;
-import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.MobCategory;
-import net.minecraft.world.entity.ReputationEventHandler;
+import net.minecraft.world.entity.*;
 import net.minecraft.world.entity.ai.navigation.PathNavigation;
 import net.minecraft.world.entity.ai.village.ReputationEventType;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
@@ -565,6 +559,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
     // Paper start - optimise checkDespawn
     public final List<ServerPlayer> playersAffectingSpawning = new java.util.ArrayList<>();
+    public final List<ServerPlayer> playersAffectingMobSpawnerSpawning = new java.util.ArrayList<>();
     // Paper end - optimise checkDespawn
     // Paper start - optimise get nearest players for entity AI
     @Override
@@ -773,6 +768,12 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 this.playersAffectingSpawning.add(player);
             }
         }
+        this.playersAffectingMobSpawnerSpawning.clear();
+        for (ServerPlayer player : this.players) {
+            if (net.minecraft.world.entity.EntitySelector.PLAYER_AFFECTS_MOB_SPAWNER_SPAWNING.test(player)) {
+                this.playersAffectingMobSpawnerSpawning.add(player);
+            }
+        }
         // Paper end - optimise checkDespawn
         ProfilerFiller gameprofilerfiller = this.getProfiler();
 
diff --git a/src/main/java/net/minecraft/world/entity/EntitySelector.java b/src/main/java/net/minecraft/world/entity/EntitySelector.java
index 3ff999734d14e2b6e7828e117f5ee32a60c26bc1..430d61bd36197879b13cf592eac9e9c3b3d3025f 100644
--- a/src/main/java/net/minecraft/world/entity/EntitySelector.java
+++ b/src/main/java/net/minecraft/world/entity/EntitySelector.java
@@ -45,8 +45,13 @@ public final class EntitySelector {
     public static final Predicate<Entity> PLAYER_AFFECTS_SPAWNING = (entity) -> {
         return !entity.isSpectator() && entity.isAlive() && entity instanceof Player player && player.affectsSpawning;
     };
+
+    public static final Predicate<Entity> PLAYER_AFFECTS_MOB_SPAWNER_SPAWNING = (entity) -> {
+        return !entity.isSpectator() && entity.isAlive() && entity instanceof Player player && player.affectsSpawning;
+    };
     // Paper end
 
+
     public static Predicate<Entity> withinDistance(double x, double y, double z, double max) {
         double d4 = max * max;
 
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 58152160d609d0e9d105153aeb166a56a7955603..499623b2e724fdfd294b2f38f046f2527aa85f8f 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -185,6 +185,7 @@ public abstract class Player extends LivingEntity {
     public float hurtDir; // Paper - protected -> public
     // Paper start
     public boolean affectsSpawning = true;
+    public boolean affectsMobSpawnersSpawning = true;
     public net.kyori.adventure.util.TriState flyingFallDamage = net.kyori.adventure.util.TriState.NOT_SET;
     // Paper end
 
diff --git a/src/main/java/net/minecraft/world/level/BaseSpawner.java b/src/main/java/net/minecraft/world/level/BaseSpawner.java
index 633500aefd515df5dadda3802b94079f75a03fa0..72ddc1bf13c7e9599c505d3d9b9a4dbb0f70c653 100644
--- a/src/main/java/net/minecraft/world/level/BaseSpawner.java
+++ b/src/main/java/net/minecraft/world/level/BaseSpawner.java
@@ -55,7 +55,7 @@ public abstract class BaseSpawner {
     }
 
     public boolean isNearPlayer(Level world, BlockPos pos) {
-        return world.hasNearbyAlivePlayerThatAffectsSpawning((double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, (double) this.requiredPlayerRange); // Paper - Affects Spawning API
+        return world.hasNearbyAlivePlayerThatAffectsMobSpawnerSpawning((double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, (double) this.requiredPlayerRange); // Paper - Affects Spawning API
     }
 
     public void clientTick(Level world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/EntityGetter.java b/src/main/java/net/minecraft/world/level/EntityGetter.java
index 3b959f42d958bf0f426853aee56753d6c455fcdb..dc35c8e8bb5977485d3f06b4331e41953cf6aafb 100644
--- a/src/main/java/net/minecraft/world/level/EntityGetter.java
+++ b/src/main/java/net/minecraft/world/level/EntityGetter.java
@@ -150,6 +150,18 @@ public interface EntityGetter {
         }
         return false;
     }
+
+    default boolean hasNearbyAlivePlayerThatAffectsMobSpawnerSpawning(double x, double y, double z, double range) {
+        for (Player player : this.players()) {
+            if (EntitySelector.PLAYER_AFFECTS_MOB_SPAWNER_SPAWNING.test(player)) { // combines NO_SPECTATORS and LIVING_ENTITY_STILL_ALIVE with an "affects mob spawner spawning" check
+                double distanceSqr = player.distanceToSqr(x, y, z);
+                if (range < 0.0D || distanceSqr < range * range) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
     // Paper end
 
     default boolean hasNearbyAlivePlayer(double x, double y, double z, double range) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index dbdeb913e228651cadf5dbd7ec98afc738c80522..8aad21384d71dedb4930453f6a9c61c66da4662c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -2682,8 +2682,9 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     // Paper start
-    public void setAffectsSpawning(boolean affects) {
+    public void setAffectsSpawning(boolean affects, boolean affectsMobSpawners) {
         this.getHandle().affectsSpawning = affects;
+        this.getHandle().affectsMobSpawnersSpawning = affectsMobSpawners;
     }
 
     @Override
@@ -2691,6 +2692,11 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         return this.getHandle().affectsSpawning;
     }
 
+    @Override
+    public boolean getAffectsMobSpawnerSpawning(){
+        return this.getHandle().affectsMobSpawnersSpawning;
+    }
+
     @Override
     public void setResourcePack(@NotNull String url, @NotNull String hash) {
         this.setResourcePack(url, hash, false, null);
