From 0d512270b6b6c64204c066ed51777e3d97caef24 Mon Sep 17 00:00:00 2001
From: Spottedleaf <Spottedleaf@users.noreply.github.com>
Date: Sat, 1 Dec 2018 19:00:36 -0800
Subject: [PATCH] Add Heightmap API


diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index 3d8ff98a..df983965 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -154,6 +154,100 @@ public interface World extends PluginMessageRecipient, Metadatable {
     @NotNull
     public Block getHighestBlockAt(@NotNull Location location);
 
+    // Paper start - Add heightmap API
+    /**
+     * Returns the highest block's y-coordinate at the specified block coordinates that match the specified heightmap's conditions.
+     * @param x The block's x-coordinate.
+     * @param z The block's z-coordinate.
+     * @param heightmap The specified heightmap to use. See {@link HeightmapType}
+     * @return The highest block's y-coordinate at (x, z) that matches the specified heightmap's conditions.
+     * @throws UnsupportedOperationException If the heightmap type is not supported.
+     * @implNote Implementations are recommended to use an iterative search as a fallback before resorting to
+     *           throwing an {@code UnsupportedOperationException}.
+     * @see HeightmapType
+     */
+    public int getHighestBlockYAt(int x, int z, @NotNull HeightmapType heightmap) throws UnsupportedOperationException;
+
+    /**
+     * Returns the highest block's y-coordinate at the specified block coordinates that match the specified heightmap's conditions.
+     * Note that the y-coordinate of the specified location is ignored.
+     * @param location The specified block coordinates.
+     * @param heightmap The specified heightmap to use. See {@link HeightmapType}
+     * @return The highest block's y-coordinate at {@code location} that matches the specified heightmap's conditions.
+     * @throws UnsupportedOperationException If the heightmap type is not supported.
+     * @implNote Implementations are recommended to use an iterative search as a fallback before resorting to
+     *           throwing an {@code UnsupportedOperationException}.
+     * @see HeightmapType
+     */
+    default int getHighestBlockYAt(@NotNull Location location, @NotNull HeightmapType heightmap) throws UnsupportedOperationException {
+        return this.getHighestBlockYAt(location.getBlockX(), location.getBlockZ(), heightmap);
+    }
+
+    /**
+     * Returns the highest {@link Block} at the specified block coordinates that match the specified heightmap's conditions.
+     * @param x The block's x-coordinate.
+     * @param z The block's z-coordinate.
+     * @param heightmap The specified heightmap to use. See {@link HeightmapType}
+     * @return The highest {@link Block} at (x, z) that matches the specified heightmap's conditions.
+     * @throws UnsupportedOperationException If the heightmap type is not supported.
+     * @implNote Implementations are recommended to use an iterative search as a fallback before resorting to
+     *           throwing an {@code UnsupportedOperationException}.
+     * @see HeightmapType
+     */
+    @NotNull
+    default Block getHighestBlockAt(int x, int z, @NotNull HeightmapType heightmap) throws UnsupportedOperationException {
+        return this.getBlockAt(x, this.getHighestBlockYAt(x, z, heightmap), z);
+    }
+
+    /**
+     * Returns the highest {@link Block} at the specified block coordinates that match the specified heightmap's conditions.
+     * Note that the y-coordinate of the specified location is ignored.
+     * @param location The specified block coordinates.
+     * @param heightmap The specified heightmap to use. See {@link HeightmapType}
+     * @return The highest {@link Block} at {@code location} that matches the specified heightmap's conditions.
+     * @throws UnsupportedOperationException If the heightmap type is not supported.
+     * @implNote Implementations are recommended to use an iterative search as a fallback before resorting to
+     *           throwing an {@code UnsupportedOperationException}.
+     * @see HeightmapType
+     */
+    @NotNull
+    default Block getHighestBlockAt(@NotNull Location location, @NotNull HeightmapType heightmap) throws UnsupportedOperationException {
+        return this.getHighestBlockAt(location.getBlockX(), location.getBlockZ(), heightmap);
+    }
+
+    /**
+     * Enumeration of different heightmap types maintained by the server. Generally using these maps is much faster
+     * than using an iterative search for a block in a given x, z coordinate.
+     */
+    public static enum HeightmapType {
+
+        /**
+         * The highest block used for lighting in the world. Also the block returned by {@link World#getHighestBlockYAt(int, int)}}
+         */
+        LIGHT_BLOCKING,
+
+        /**
+         * References the highest block in the world.
+         */
+        ANY,
+
+        /**
+         * References the highest solid block in a world.
+         */
+        SOLID,
+
+        /**
+         * References the highest solid or liquid block in a world.
+         */
+        SOLID_OR_LIQUID,
+
+        /**
+         * References the highest solid or liquid block in a world, excluding leaves.
+         */
+        SOLID_OR_LIQUID_NO_LEAVES;
+    }
+    // Paper end
+
     /**
      * Gets the {@link Chunk} at the given coordinates
      *
-- 
2.21.0

