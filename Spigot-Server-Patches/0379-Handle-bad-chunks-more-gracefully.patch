From 12b24aa236bb9b906b601eff6c0ea3d96c0675f3 Mon Sep 17 00:00:00 2001
From: Shane Freeder <theboyetronic@gmail.com>
Date: Mon, 15 Apr 2019 02:24:52 +0100
Subject: [PATCH] Handle bad chunks more gracefully

Prior to this change the server would crash when attempting to load a
chunk from a region with bad data.

After this change the server will defer back to vanilla behavior. At
this time, that means attempting to generate a chunk in its place
(and occasionally just not generating anything and leaving small
holes in the world (This statement might not be accurate as of 1.13.x)).

Should Mojang choose to alter this behavior in the future, this change
will simply defer to whatever that new behavior is.

diff --git a/src/main/java/net/minecraft/server/RegionFileCache.java b/src/main/java/net/minecraft/server/RegionFileCache.java
index c53518a477..7bbea5526a 100644
--- a/src/main/java/net/minecraft/server/RegionFileCache.java
+++ b/src/main/java/net/minecraft/server/RegionFileCache.java
@@ -171,8 +171,24 @@ public abstract class RegionFileCache implements AutoCloseable {
     private static NBTTagCompound readOversizedChunk(RegionFile regionfile, ChunkCoordIntPair chunkCoordinate) throws IOException {
         synchronized (regionfile) {
             try (DataInputStream datainputstream = regionfile.getReadStream(chunkCoordinate)) {
-                NBTTagCompound oversizedData = regionfile.getOversizedData(chunkCoordinate.x, chunkCoordinate.z);
-                NBTTagCompound chunk = NBTCompressedStreamTools.readNBT(datainputstream);
+                // Paper start - Handle bad chunks more gracefully - also handle similarly with oversized data
+                NBTTagCompound oversizedData = null;
+
+                try {
+                    oversizedData = regionfile.getOversizedData(chunkCoordinate.x, chunkCoordinate.z);
+                } catch (Exception ex) {
+                    MinecraftServer.LOGGER.error("Failed to read OVERSIZED chunk data for " + chunkCoordinate.toString() + " in regionfile " + regionfile.file.toString() + ", ignoring OVERSIZED data", ex);
+                }
+
+                NBTTagCompound chunk;
+
+                try {
+                    chunk = NBTCompressedStreamTools.readNBT(datainputstream);
+                } catch (final Exception ex) {
+                    MinecraftServer.LOGGER.error("Failed to read chunk data for " + chunkCoordinate.toString() + " in regionfile " + regionfile.file.toString() + ", ignoring data", ex);
+                    return null;
+                }
+                // Paper end
                 if (oversizedData == null) {
                     return chunk;
                 }
@@ -231,8 +247,14 @@ public abstract class RegionFileCache implements AutoCloseable {
 
         try {
             if (datainputstream != null) {
-                nbttagcompound = NBTCompressedStreamTools.a(datainputstream);
-                return nbttagcompound;
+                // Paper start - Handle bad chunks more gracefully
+                try {
+                    return NBTCompressedStreamTools.a(datainputstream);
+                } catch (Exception ex) {
+                    MinecraftServer.LOGGER.error("Failed to read chunk " + chunkcoordintpair.toString() + " in regionfile " + regionfile.file.toString() + ", ignoring data", ex);
+                    return null;
+                }
+                // Paper end
             }
 
             nbttagcompound = null;
-- 
2.22.0

