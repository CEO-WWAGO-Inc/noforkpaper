From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ysl3000 <yannicklamprecht@live.de>
Date: Mon, 9 Nov 2020 12:44:14 +0100
Subject: [PATCH] generate language files


diff --git a/pom.xml b/pom.xml
index 80f165291385f5f54def1a8e8487b209fb06a4a3..16bfa72312403a1e60ea1c5cae1180b0e7a70912 100644
--- a/pom.xml
+++ b/pom.xml
@@ -228,6 +228,28 @@
                     </archive>
                 </configuration>
             </plugin>
+            <plugin>
+                <groupId>org.codehaus.mojo</groupId>
+                <artifactId>exec-maven-plugin</artifactId>
+                <version>1.2</version>
+                <executions>
+                    <execution>
+                        <phase>generate-resources</phase>
+                        <goals>
+                            <goal>exec</goal>
+                        </goals>
+                        <id>generate-language-files</id>
+                    </execution>
+                </executions>
+                <configuration>
+                    <workingDirectory>${project.parent.basedir}</workingDirectory>
+                    <executable>./work/mc-localization-downloader/downloadLanguages.bash</executable>
+                    <arguments>
+                        <argument>${minecraft.version}</argument>
+                        <argument>${project.build.directory}/classes/assets/minecraft/lang/</argument>
+                    </arguments>
+                </configuration>
+            </plugin>
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-shade-plugin</artifactId>
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
index af84813c703813ec3a6ca89ff437d89e31a9100f..2d80c2a258cc9ebc12cebf4a31361d9da80a9293 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
@@ -9,6 +9,8 @@ import org.bukkit.inventory.ItemFactory;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
 
+import java.util.Locale;
+
 public final class CraftItemFactory implements ItemFactory {
     static final Color DEFAULT_LEATHER_COLOR = Color.fromRGB(0xA06540);
     private static final CraftItemFactory instance;
@@ -349,10 +351,22 @@ public final class CraftItemFactory implements ItemFactory {
         if (nms == null) {
             nms = CraftItemStack.asNMSCopy(item);
         }
-
         return nms != null ? net.minecraft.server.LocaleLanguage.getInstance().translateKey(nms.getItem().getName()) : null;
     }
 
+    @Override
+    public String getI18NDisplayName(ItemStack item, Locale locale) {
+        Validate.notNull(locale, "Locale cannot be null");
+        net.minecraft.server.ItemStack nms = null;
+        if (item instanceof CraftItemStack) {
+            nms = ((CraftItemStack) item).handle;
+        }
+        if (nms == null) {
+            nms = CraftItemStack.asNMSCopy(item);
+        }
+        return nms != null ? org.bukkit.craftbukkit.util.CustomLocaleLanguages.getInstance().translateKey(nms.getItem().getName(), locale) : null;
+    }
+
     @Override
     public net.md_5.bungee.api.chat.hover.content.Content hoverContentOf(ItemStack itemStack) {
         net.md_5.bungee.api.chat.ItemTag itemTag = net.md_5.bungee.api.chat.ItemTag.ofNbt(CraftItemStack.asNMSCopy(itemStack).getOrCreateTag().toString());
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CustomLocaleLanguages.java b/src/main/java/org/bukkit/craftbukkit/util/CustomLocaleLanguages.java
new file mode 100644
index 0000000000000000000000000000000000000000..ab07742067c9c4a65fa21eda4f3fcac296f62e39
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/util/CustomLocaleLanguages.java
@@ -0,0 +1,77 @@
+package org.bukkit.craftbukkit.util;
+
+import com.google.gson.Gson;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import net.minecraft.server.ChatDeserializer;
+import net.minecraft.server.LocaleLanguage;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.nio.charset.StandardCharsets;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Locale;
+import java.util.Map;
+import java.util.function.BiConsumer;
+import java.util.function.Function;
+import java.util.regex.Pattern;
+
+public final class CustomLocaleLanguages {
+    private final static Gson GSON = new Gson();
+    private static final Pattern UNSUPPORTED_FORMAT_PATTERN = Pattern.compile("%(\\d+\\$)?[\\d.]*[df]");
+    private static final CustomLocaleLanguages INSTANCE = create(LocaleLanguage.class::getResourceAsStream);
+    private final Map<Locale, Map<String, String>> localeMapMap = new HashMap<>();
+
+    private CustomLocaleLanguages() {
+    }
+
+    static CustomLocaleLanguages create(Function<String, InputStream> resourceLocation) {
+        CustomLocaleLanguages customLocaleLanguages = new CustomLocaleLanguages();
+        InputStream inputstream = resourceLocation.apply("/assets/minecraft/lang/available_languages.txt");
+
+        try (BufferedReader br = new BufferedReader(new InputStreamReader(inputstream))) {
+            br.lines().forEachOrdered(languageFileName -> {
+                if(languageFileName!=null && !languageFileName.isEmpty()){
+                    Map<String, String> languageMap = new HashMap<>();
+                    String[] langKeyArray = languageFileName.replaceAll("minecraft/lang/|.json", "").split("_");
+                    if (langKeyArray.length == 2) {
+                        Locale locale = new Locale(langKeyArray[0], langKeyArray[1]);
+                        InputStream languageInputstream = resourceLocation.apply("/assets/minecraft/lang/" + languageFileName);
+                        load(languageInputstream, languageMap::put);
+                        customLocaleLanguages.localeMapMap.put(locale, languageMap);
+                    }
+                }
+            });
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return customLocaleLanguages;
+    }
+
+    private static void load(InputStream inputStream, BiConsumer<String, String> biconsumer) {
+        JsonObject jsonobject = GSON.fromJson(new InputStreamReader(inputStream, StandardCharsets.UTF_8), JsonObject.class);
+        Iterator iterator = jsonobject.entrySet().iterator();
+
+        while (iterator.hasNext()) {
+            Map.Entry<String, JsonElement> entry = (Map.Entry) iterator.next();
+            String s = UNSUPPORTED_FORMAT_PATTERN.matcher(ChatDeserializer.a(entry.getValue(), entry.getKey())).replaceAll("%$1s");
+            biconsumer.accept(entry.getKey(), s);
+        }
+    }
+
+    public static CustomLocaleLanguages getInstance() {
+        return INSTANCE;
+    }
+
+    public String translateKey(String key, Locale locale) {
+        Map<String, String> translationMap = localeMapMap.computeIfAbsent(locale, ignoredlocale -> localeMapMap.get(Locale.US));
+        if (translationMap == null) {
+            return LocaleLanguage.getInstance().translateKey(key);
+        }
+        String translatedValue = translationMap.get(key);
+        return translatedValue!=null? translatedValue: LocaleLanguage.getInstance().translateKey(key);
+    }
+}
diff --git a/src/test/java/org/bukkit/craftbukkit/util/CustomLocaleLanguagesTest.java b/src/test/java/org/bukkit/craftbukkit/util/CustomLocaleLanguagesTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..6f29421725f9a33f629cb28f5474b86540075a9e
--- /dev/null
+++ b/src/test/java/org/bukkit/craftbukkit/util/CustomLocaleLanguagesTest.java
@@ -0,0 +1,58 @@
+package org.bukkit.craftbukkit.util;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.InputStream;
+import java.util.Locale;
+
+public class CustomLocaleLanguagesTest {
+    private static final String missingKey = "missing.missing";
+
+    @Test
+    public void localizationPresent() {
+        CustomLocaleLanguages customLocaleLanguages = CustomLocaleLanguages.create(this::getResourceAsStream);
+
+        String value = customLocaleLanguages.translateKey("addServer.add", new Locale("de", "DE"));
+        Assert.assertEquals("Fertig", value);
+    }
+
+    @Test
+    public void missingLocalizationShouldFallbackToEn_US() {
+        CustomLocaleLanguages customLocaleLanguages = CustomLocaleLanguages.create(this::getResourceAsStream);
+
+        String value = customLocaleLanguages.translateKey("addServer.add", new Locale("en", "UK"));
+        Assert.assertEquals("Done", value);
+    }
+
+    @Test
+    public void missingValueShouldReturnKey() {
+        CustomLocaleLanguages customLocaleLanguages = CustomLocaleLanguages.create(this::getResourceAsStream);
+        String value = customLocaleLanguages.translateKey(missingKey, new Locale("de", "DE"));
+        Assert.assertEquals(missingKey, value);
+    }
+
+    @Test
+    public void missingLocalizationAndValueShouldReturnKey() {
+        CustomLocaleLanguages customLocaleLanguages = CustomLocaleLanguages.create(this::getResourceAsStream);
+        String value = customLocaleLanguages.translateKey(missingKey, new Locale("en", "UK"));
+        Assert.assertEquals(missingKey, value);
+    }
+
+
+    private InputStream getResourceAsStream(String path) {
+        // depending
+        String dirName = new File(".").getAbsolutePath().contains("test-server") ? "../test-classes" : "target/test-classes/";
+        path = path.replaceAll("^\\./", "");
+        File file = new File((dirName + path).replaceAll("/\\./", "/"));
+        try {
+            return new FileInputStream(file);
+        } catch (FileNotFoundException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+}
diff --git a/src/test/resources/assets/minecraft/lang/available_languages.txt b/src/test/resources/assets/minecraft/lang/available_languages.txt
new file mode 100644
index 0000000000000000000000000000000000000000..13edfcd8f566d3333fe2cf064ed5342b8eeea01a
--- /dev/null
+++ b/src/test/resources/assets/minecraft/lang/available_languages.txt
@@ -0,0 +1 @@
+de_DE.json
diff --git a/src/test/resources/assets/minecraft/lang/de_DE.json b/src/test/resources/assets/minecraft/lang/de_DE.json
new file mode 100644
index 0000000000000000000000000000000000000000..cf6455989f0893ba542cea994301873968589758
--- /dev/null
+++ b/src/test/resources/assets/minecraft/lang/de_DE.json
@@ -0,0 +1,4 @@
+{
+  "addServer.add": "Fertig",
+  "addServer.enterIp": "Serveradresse"
+}
\ No newline at end of file
