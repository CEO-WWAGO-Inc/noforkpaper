From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: bermudalocket <github@eigenstuff.net>
Date: Wed, 19 Aug 2020 12:28:24 -0400
Subject: [PATCH] Add PlayerTradeWithVillagerEvent


diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerTradeWithVillagerEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerTradeWithVillagerEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..af063d54208558f375e1436ed4da19bdfb8d783d
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerTradeWithVillagerEvent.java
@@ -0,0 +1,66 @@
+package com.destroystokyo.paper.event.player;
+
+import org.bukkit.entity.AbstractVillager;
+import org.bukkit.entity.Player;
+import org.bukkit.entity.Villager;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.bukkit.inventory.MerchantRecipe;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when a player trades with a villager.
+ */
+public class PlayerTradeWithVillagerEvent extends PlayerEvent {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+    private final AbstractVillager villager;
+    private final MerchantRecipe recipe;
+
+    /**
+     * Constructor for a new PlayerTradeWithVillagerEvent.
+     *
+     * @param player the player involved in this trade.
+     * @param villager the villager involved in this trade.
+     * @param recipe The MerchantRecipe representing this trade.
+     */
+    public PlayerTradeWithVillagerEvent(@NotNull Player player, @NotNull AbstractVillager villager, @NotNull MerchantRecipe recipe) {
+        super(player);
+        this.villager = villager;
+        this.recipe = recipe;
+    }
+
+    /**
+     * Returns the villager involved in this trade. Note that this method
+     * returns an AbstractVillager and thus you might need to check
+     * whether it is a Villager or a Wandering Trader.
+     *
+     * @return the villager involved in this trade.
+     */
+    @NotNull
+    public AbstractVillager getVillager() {
+        return villager;
+    }
+
+    /**
+     * Returns the MerchantRecipe representing this trade.
+     *
+     * @return the MerchantRecipe representing this trade.
+     */
+    @NotNull
+    public MerchantRecipe getRecipe() {
+        return recipe;
+    }
+
+    @Override
+    @NotNull
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+
+}
