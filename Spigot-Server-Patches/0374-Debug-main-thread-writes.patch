From 1081c4181758987bc0c065195207aa3c5ee5fcdd Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sat, 15 Sep 2018 22:57:57 -0400
Subject: [PATCH] Debug main thread writes


diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 33f5aa721f..58b09ad21e 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -184,6 +184,10 @@ public class Chunk implements IChunkAccess {
 
         for (k = 0; k < this.sections.length; ++k) {
             this.sections[k] = protochunk.getSections()[k];
+            if (this.sections[k] != null) {
+                this.sections[k].blockIds.proto = false;
+                this.sections[k].blockIds.world = world;
+            }
         }
 
         Iterator iterator = protochunk.s().iterator();
diff --git a/src/main/java/net/minecraft/server/ChunkSection.java b/src/main/java/net/minecraft/server/ChunkSection.java
index bdfc7d81ff..7d56acba4f 100644
--- a/src/main/java/net/minecraft/server/ChunkSection.java
+++ b/src/main/java/net/minecraft/server/ChunkSection.java
@@ -18,7 +18,7 @@ public class ChunkSection {
 
     public ChunkSection(int i, boolean flag, IChunkAccess chunk, IWorldReader world, boolean initializeBlocks) { // Paper - Anti-Xray
         this.yPos = i;
-        this.blockIds = new DataPaletteBlock<IBlockData>(GLOBAL_PALETTE, Block.REGISTRY_ID, GameProfileSerializer::d, GameProfileSerializer::a, Blocks.AIR.getBlockData(), world instanceof GeneratorAccess ? ((GeneratorAccess) world).getMinecraftWorld().chunkPacketBlockController.getPredefinedBlockData(world, chunk, this, flag, initializeBlocks) : null, initializeBlocks); // Paper - Anti-Xray - Add predefined block data
+        this.blockIds = new DataPaletteBlock<IBlockData>(GLOBAL_PALETTE, Block.REGISTRY_ID, GameProfileSerializer::d, GameProfileSerializer::a, Blocks.AIR.getBlockData(), world instanceof GeneratorAccess ? ((GeneratorAccess) world).getMinecraftWorld().chunkPacketBlockController.getPredefinedBlockData(world, chunk, this, flag, initializeBlocks) : null, initializeBlocks, world, chunk instanceof ProtoChunk); // Paper - Anti-Xray - Add predefined block data
         this.emittedLight = new NibbleArray();
         if (flag) {
             this.skyLight = new NibbleArray();
diff --git a/src/main/java/net/minecraft/server/DataPaletteBlock.java b/src/main/java/net/minecraft/server/DataPaletteBlock.java
index 27ab8aac4f..d599ad7e48 100644
--- a/src/main/java/net/minecraft/server/DataPaletteBlock.java
+++ b/src/main/java/net/minecraft/server/DataPaletteBlock.java
@@ -17,6 +17,7 @@ public class DataPaletteBlock<T> implements DataPaletteExpandable<T> {
     private final Function<T, NBTTagCompound> f;
     private final T g;
     private final T[] predefinedObjects; // Paper - Anti-Xray - Add predefined objects
+    public boolean proto;
     protected DataBits a; protected DataBits getDataBits() { return this.a; } // Paper - OBFHELPER
     private DataPalette<T> h; private DataPalette<T> getDataPalette() { return this.h; } // Paper - OBFHELPER
     private int i; private int getBitsPerObject() { return this.i; } // Paper - OBFHELPER
@@ -24,6 +25,11 @@ public class DataPaletteBlock<T> implements DataPaletteExpandable<T> {
 
     volatile String current; // Paper
     private synchronized void b() {
+        // paper start
+        if (proto && ((GeneratorAccess) world).getMinecraftWorld().getMinecraftServer().isMainThread()) {
+            new Throwable("write on main").printStackTrace();
+        }
+        // paper end
         if (this.j.isLocked() && !this.j.isHeldByCurrentThread()) {
             String s = (String)Thread.getAllStackTraces().keySet().stream().filter(Objects::nonNull).map((thread) -> {
                 return thread.getName() + ": \n\tat " + (String)Arrays.stream(thread.getStackTrace()).map(Object::toString).collect(Collectors.joining("\n\tat "));
@@ -44,10 +50,12 @@ public class DataPaletteBlock<T> implements DataPaletteExpandable<T> {
 
     public DataPaletteBlock(DataPalette<T> datapalette, RegistryBlockID<T> registryblockid, Function<NBTTagCompound, T> function, Function<T, NBTTagCompound> function1, T object) {
         // Paper start - Anti-Xray - Support default constructor
-        this(datapalette, registryblockid, function, function1, object, null, true);
+        this(datapalette, registryblockid, function, function1, object, null, true, null, false);
     }
 
-    public DataPaletteBlock(DataPalette<T> datapalette, RegistryBlockID<T> registryblockid, Function<NBTTagCompound, T> function, Function<T, NBTTagCompound> function1, T object, T[] predefinedObjects, boolean initialize) {
+    IWorldReader world;
+    public DataPaletteBlock(DataPalette<T> datapalette, RegistryBlockID<T> registryblockid, Function<NBTTagCompound, T> function, Function<T, NBTTagCompound> function1, T object, T[] predefinedObjects, boolean initialize, IWorldReader world, boolean proto) {
+        this.world = world;
         // Paper end - Anti-Xray - Add predefined objects
         this.b = datapalette;
         this.d = registryblockid;
@@ -56,6 +64,7 @@ public class DataPaletteBlock<T> implements DataPaletteExpandable<T> {
         this.g = (T)object;
         // Paper start - Anti-Xray - Add predefined objects
         this.predefinedObjects = predefinedObjects;
+        this.proto = proto;
 
         if (initialize) {
             if (predefinedObjects == null) {
-- 
2.19.0

