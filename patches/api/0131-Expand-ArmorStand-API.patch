From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: willies952002 <admin@domnian.com>
Date: Thu, 26 Jul 2018 02:22:44 -0400
Subject: [PATCH] Expand ArmorStand API

Adds the following:
- Add proper methods for getting and setting items in both hands. Deprecates old methods
- Enable/Disable slot interactions
- Allow using degrees for ArmorStand rotations (via new Rotations class)

Co-authored-by: SoSeDiK <mrsosedik@gmail.com>

diff --git a/src/main/java/io/papermc/paper/util/Rotations.java b/src/main/java/io/papermc/paper/util/Rotations.java
new file mode 100644
index 0000000000000000000000000000000000000000..2c18961081e9f5ece9001f92749741e9b465c472
--- /dev/null
+++ b/src/main/java/io/papermc/paper/util/Rotations.java
@@ -0,0 +1,144 @@
+package io.papermc.paper.util;
+
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Represents 3 angles, one for each axis (X, Y, Z).
+ * The angles are in degrees.
+ */
+public class Rotations {
+
+    /**
+     * Rotations with every axis set to 0
+     */
+    public static final Rotations ZERO = new Rotations(0, 0, 0);
+
+    private final double x;
+    private final double y;
+    private final double z;
+
+    /**
+     * Creates Rotations with each axis set to the
+     * passed angle in degrees
+     *
+     * @param x the angle for the X axis in degrees
+     * @param y the angle for the Y axis in degrees
+     * @param z the angle for the Z axis in degrees
+     */
+    public Rotations(double x, double y, double z) {
+        this.x = x;
+        this.y = y;
+        this.z = z;
+    }
+
+    /**
+     * Returns the angle on the X axis in degrees
+     *
+     * @return the angle in degrees
+     */
+    public double getX() {
+        return x;
+    }
+
+    /**
+     * Returns the angle on the Y axis in degrees
+     *
+     * @return the angle in degrees
+     */
+    public double getY() {
+        return y;
+    }
+
+    /**
+     * Returns the angle on the Z axis in degrees
+     *
+     * @return the angle in degrees
+     */
+    public double getZ() {
+        return z;
+    }
+
+    /**
+     * Returns a new Rotations instance which is the result
+     * of changing the X axis to the passed angle
+     *
+     * @param x the angle in degrees
+     * @return the resultant Rotations
+     */
+    @NotNull
+    public Rotations setX(double x) {
+        return new Rotations(x, y, z);
+    }
+
+    /**
+     * Returns a new Rotations instance which is the result
+     * of changing the Y axis to the passed angle
+     *
+     * @param y the angle in degrees
+     * @return the resultant Rotations
+     */
+    @NotNull
+    public Rotations setY(double y) {
+        return new Rotations(x, y, z);
+    }
+
+    /**
+     * Returns a new Rotations instance which is the result
+     * of changing the Z axis to the passed angle
+     *
+     * @param z the angle in degrees
+     * @return the resultant Rotations
+     */
+    @NotNull
+    public Rotations setZ(double z) {
+        return new Rotations(x, y, z);
+    }
+
+    /**
+     * Returns a new Rotations instance which is the result of adding
+     * the x, y, z components to this Rotations
+     *
+     * @param x the angle to add to the X axis in degrees
+     * @param y the angle to add to the Y axis in degrees
+     * @param z the angle to add to the Z axis in degrees
+     * @return the resultant Rotations
+     */
+    @NotNull
+    public Rotations add(double x, double y, double z) {
+        return new Rotations(
+            this.x + x,
+            this.y + y,
+            this.z + z
+        );
+    }
+
+    /**
+     * Returns a new Rotations instance which is the result of subtracting
+     * the x, y, z components from this Rotations
+     *
+     * @param x the angle to subtract to the X axis in degrees
+     * @param y the angle to subtract to the Y axis in degrees
+     * @param z the angle to subtract to the Z axis in degrees
+     * @return the resultant Rotations
+     */
+    @NotNull
+    public Rotations subtract(double x, double y, double z) {
+        return add(-x, -y, -z);
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof Rotations that)) return false;
+
+        return Double.compare(this.x, that.x) == 0
+            && Double.compare(this.y, that.y) == 0
+            && Double.compare(this.z, that.z) == 0;
+    }
+
+    @Override
+    public int hashCode() {
+        return Double.hashCode(x) * Double.hashCode(y) * Double.hashCode(z);
+    }
+
+}
diff --git a/src/main/java/org/bukkit/entity/ArmorStand.java b/src/main/java/org/bukkit/entity/ArmorStand.java
index 2ee3814a52945f541e049b621b9552f8ae9e261d..e54b0fcaa4ca324fd92718150ff4c3ea87122112 100644
--- a/src/main/java/org/bukkit/entity/ArmorStand.java
+++ b/src/main/java/org/bukkit/entity/ArmorStand.java
@@ -14,7 +14,7 @@ public interface ArmorStand extends LivingEntity {
      *
      * @return the held item
      * @see #getEquipment()
-     * @deprecated prefer {@link EntityEquipment#getItemInHand()}
+     * @deprecated prefer {@link ArmorStand#getItem(EquipmentSlot)} // Paper
      */
     @NotNull
     @Deprecated
@@ -26,7 +26,7 @@ public interface ArmorStand extends LivingEntity {
      * @param item the item to hold
      * @see #getEquipment()
      * @deprecated prefer
-     * {@link EntityEquipment#setItemInHand(org.bukkit.inventory.ItemStack)}
+     * {@link ArmorStand#setItem(EquipmentSlot, ItemStack)} // Paper
      */
     @Deprecated
     void setItemInHand(@Nullable ItemStack item);
@@ -379,5 +379,173 @@ public interface ArmorStand extends LivingEntity {
      * @param tick {@code true} if this armour stand can tick, {@code false} otherwise
      */
     void setCanTick(final boolean tick);
+
+    /**
+     * Returns the item the armor stand has
+     * equip in the given equipment slot
+     *
+     * @param slot the equipment slot to get
+     * @return the ItemStack in the equipment slot
+     */
+    @NotNull
+    ItemStack getItem(@NotNull final org.bukkit.inventory.EquipmentSlot slot);
+
+    /**
+     * Sets the item the armor stand has
+     * equip in the given equipment slot
+     *
+     * @param slot the equipment slot to set
+     * @param item the item to hold
+     */
+    void setItem(@NotNull final org.bukkit.inventory.EquipmentSlot slot, @Nullable final ItemStack item);
+
+    /**
+     * Get the list of disabled slots
+     *
+     * @return list of disabled slots
+     */
+    @NotNull
+    java.util.Set<org.bukkit.inventory.EquipmentSlot> getDisabledSlots();
+
+    /**
+     * Set the disabled slots
+     *
+     * This makes it so a player is unable to interact with the Armor Stand to place, remove, or replace an item in the given slot(s)
+     * Note: Once a slot is disabled, the only way to get an item back it to break the armor stand.
+     *
+     * @param slots var-arg array of slots to lock
+     */
+    void setDisabledSlots(@NotNull org.bukkit.inventory.EquipmentSlot... slots);
+
+    /**
+     * Disable specific slots, adding them
+     * to the currently disabled slots
+     *
+     * This makes it so a player is unable to interact with the Armor Stand to place, remove, or replace an item in the given slot(s)
+     * Note: Once a slot is disabled, the only way to get an item back it to break the armor stand.
+     *
+     * @param slots var-arg array of slots to lock
+     */
+    void addDisabledSlots(@NotNull final org.bukkit.inventory.EquipmentSlot... slots);
+
+    /**
+     * Remove the given slots from the disabled
+     * slots list, enabling them.
+     *
+     * This makes it so a player is able to interact with the Armor Stand to place, remove, or replace an item in the given slot(s)
+     *
+     * @param slots var-arg array of slots to unlock
+     */
+    void removeDisabledSlots(@NotNull final org.bukkit.inventory.EquipmentSlot... slots);
+
+    /**
+     * Check if a specific slot is disabled
+     *
+     * @param slot The slot to check
+     * @return {@code true} if the slot is disabled, else {@code false}.
+     */
+    boolean isSlotDisabled(@NotNull org.bukkit.inventory.EquipmentSlot slot);
+
+    /**
+     * Returns the ArmorStand's body rotations as
+     * {@link io.papermc.paper.util.Rotations}.
+     *
+     * @return the current rotations
+     */
+    @NotNull
+    io.papermc.paper.util.Rotations getBodyRotations();
+
+    /**
+     * Sets the ArmorStand's body rotations as
+     * {@link io.papermc.paper.util.Rotations}.
+     *
+     * @param rotations the current rotations
+     */
+    void setBodyRotations(@NotNull io.papermc.paper.util.Rotations rotations);
+
+    /**
+     * Returns the ArmorStand's left arm rotations as
+     * {@link io.papermc.paper.util.Rotations}.
+     *
+     * @return the current rotations
+     */
+    @NotNull
+    io.papermc.paper.util.Rotations getLeftArmRotations();
+
+    /**
+     * Sets the ArmorStand's left arm rotations as
+     * {@link io.papermc.paper.util.Rotations}.
+     *
+     * @param rotations the current rotations
+     */
+    void setLeftArmRotations(@NotNull io.papermc.paper.util.Rotations rotations);
+
+    /**
+     * Returns the ArmorStand's right arm rotations as
+     * {@link io.papermc.paper.util.Rotations}.
+     *
+     * @return the current rotations
+     */
+    @NotNull
+    io.papermc.paper.util.Rotations getRightArmRotations();
+
+    /**
+     * Sets the ArmorStand's right arm rotations as
+     * {@link io.papermc.paper.util.Rotations}.
+     *
+     * @param rotations the current rotations
+     */
+    void setRightArmRotations(@NotNull io.papermc.paper.util.Rotations rotations);
+
+    /**
+     * Returns the ArmorStand's left leg rotations as
+     * {@link io.papermc.paper.util.Rotations}.
+     *
+     * @return the current rotations
+     */
+    @NotNull
+    io.papermc.paper.util.Rotations getLeftLegRotations();
+
+    /**
+     * Sets the ArmorStand's left leg rotations as
+     * {@link io.papermc.paper.util.Rotations}.
+     *
+     * @param rotations the current rotations
+     */
+    void setLeftLegRotations(@NotNull io.papermc.paper.util.Rotations rotations);
+
+    /**
+     * Returns the ArmorStand's right leg rotations as
+     * {@link io.papermc.paper.util.Rotations}.
+     *
+     * @return the current rotations
+     */
+    @NotNull
+    io.papermc.paper.util.Rotations getRightLegRotations();
+
+    /**
+     * Sets the ArmorStand's right leg rotations as
+     * {@link io.papermc.paper.util.Rotations}.
+     *
+     * @param rotations the current rotations
+     */
+    void setRightLegRotations(@NotNull io.papermc.paper.util.Rotations rotations);
+
+    /**
+     * Returns the ArmorStand's head rotations as
+     * {@link io.papermc.paper.util.Rotations}.
+     *
+     * @return the current rotations
+     */
+    @NotNull
+    io.papermc.paper.util.Rotations getHeadRotations();
+
+    /**
+     * Sets the ArmorStand's head rotations as
+     * {@link io.papermc.paper.util.Rotations}.
+     *
+     * @param rotations the current rotations
+     */
+    void setHeadRotations(@NotNull io.papermc.paper.util.Rotations rotations);
     // Paper end
 }
