From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: WarlordWeaponry <minecraft2013@cox.net>
Date: Sun, 5 Sep 2021 13:18:18 -0400
Subject: [PATCH] sf-add-blockfallingparticleevent


diff --git a/src/main/java/com/destroystokyo/paper/event/block/BlockFallingParticleEvent.java b/src/main/java/com/destroystokyo/paper/event/block/BlockFallingParticleEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..b813cf0f0f8736fa9246484c264d5f2886557174
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/block/BlockFallingParticleEvent.java
@@ -0,0 +1,74 @@
+package com.destroystokyo.paper.event.block;
+
+import org.bukkit.Location;
+import org.bukkit.Particle;
+import org.bukkit.block.Block;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.block.BlockEvent;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * For PROJECT Spellforged. Called whenever a falling particle is generated from a block.
+ * Right now, this only works for blocks that generate particles serverside. Client-controlled falling particles, such as particles from floating gravel, do not call this event.
+ * <br />
+ * This can be used to control the falling block particles or create custom ones.
+ */
+public class BlockFallingParticleEvent extends BlockEvent implements Cancellable {
+
+    private static final HandlerList handlers = new HandlerList();
+
+    private boolean cancelled = false;
+    private Particle particle;
+    private Location location;
+
+    public BlockFallingParticleEvent(@NotNull Block block, Particle particle, Location location) {
+        super(block);
+        this.particle = particle;
+        this.location = location;
+    }
+
+    /**
+     * Gets the particle that was going to be spawned.
+     * @return the particle to be spawned
+     */
+    public Particle getParticle() {
+        return particle;
+    }
+
+    /**
+     * Gets the location where the particle would be spawned. Typically, this is a random position underneath the block.
+     * @return The postion where the particle would spawn
+     */
+    public Location getLocation() {
+        return location;
+    }
+
+    /**
+     * @return If the event is cancelled, meaning the block will not generate a particle.
+     */
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    /**
+     * If the event is cancelled, the block will not generate a particle.
+     * @param cancel true if you wish to cancel this event
+     */
+    @Override
+    public void setCancelled(boolean cancel) {
+        cancelled = cancel;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
