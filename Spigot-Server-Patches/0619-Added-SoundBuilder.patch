From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Fruxz <cedricspitzer@outlook.de>
Date: Wed, 30 Dec 2020 02:23:06 +0100
Subject: [PATCH] Added SoundBuilder


diff --git a/src/main/java/io/papermc/paper/sound/PaperSoundBuilder.java b/src/main/java/io/papermc/paper/sound/PaperSoundBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..e41b74113ea0b2b19c102dd2b1f4949d1079e4e5
--- /dev/null
+++ b/src/main/java/io/papermc/paper/sound/PaperSoundBuilder.java
@@ -0,0 +1,148 @@
+package io.papermc.paper.sound;
+
+import com.google.common.collect.Lists;
+import net.minecraft.server.BaseBlockPosition;
+import net.minecraft.server.MinecraftKey;
+import net.minecraft.server.PacketPlayOutCustomSoundEffect;
+import net.minecraft.server.Vec3D;
+import org.bukkit.Location;
+import org.bukkit.Sound;
+import org.bukkit.SoundCategory;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.entity.Player;
+import org.bukkit.util.NumberConversions;
+
+import java.util.Collection;
+
+public class PaperSoundBuilder implements SoundBuilder {
+
+    private Sound sound;
+    private SoundCategory category;
+    private Collection<Player> receivers;
+    private Location location;
+    private float volume = 1F;
+    private float pitch = 1F;
+
+    public PaperSoundBuilder(Sound sound, Location location) {
+        this.sound = sound;
+        this.category = SoundCategory.MASTER;
+        this.location = location;
+    }
+
+    public PaperSoundBuilder(Sound sound, SoundCategory category, Location location) {
+        this.sound = sound;
+        this.category = category;
+        this.location = location;
+    }
+
+    @Override
+    public void play() {
+        PacketPlayOutCustomSoundEffect customSoundEffect = new PacketPlayOutCustomSoundEffect(MinecraftKey.a(sound.getKey().getKey()), net.minecraft.server.SoundCategory.valueOf(category.name()), Vec3D.a(new BaseBlockPosition(location.getX(), location.getY(), location.getZ())), volume, pitch);
+        for (Player player : receivers) {
+            ((CraftPlayer) player).getHandle().playerConnection.sendPacket(customSoundEffect);
+        }
+    }
+
+    @Override
+    public Sound sound() {
+        return sound;
+    }
+
+    @Override
+    public PaperSoundBuilder sound(Sound sound) {
+        this.sound = sound;
+        return this;
+    }
+
+    @Override
+    public SoundCategory category() {
+        return category;
+    }
+
+    @Override
+    public PaperSoundBuilder category(SoundCategory category) {
+        this.category = category;
+        return this;
+    }
+
+    @Override
+    public float volume() {
+        return volume;
+    }
+
+    @Override
+    public PaperSoundBuilder volume(float volume) {
+        this.volume = volume;
+        return this;
+    }
+
+    @Override
+    public float pitch() {
+        return pitch;
+    }
+
+    @Override
+    public PaperSoundBuilder pitch(float pitch) {
+        this.pitch = pitch;
+        return this;
+    }
+
+    @Override
+    public Collection<Player> receivers() {
+        return receivers;
+    }
+
+    @Override
+    public boolean hasReceivers() {
+        return (receivers == null && !location.getWorld().getPlayers().isEmpty()) || (
+            receivers != null && !receivers.isEmpty());
+    }
+
+    @Override
+    public PaperSoundBuilder allPlayers() {
+        this.receivers = location.getWorld().getPlayers();
+        return this;
+    }
+
+    @Override
+    public PaperSoundBuilder receivers(Collection<Player> receivers) {
+        this.receivers = receivers != null ? Lists.newArrayList(receivers) : null;
+        return this;
+    }
+
+    @Override
+    public PaperSoundBuilder receivers(Player... receivers) {
+        this.receivers = receivers != null ? Lists.newArrayList(receivers) : null;
+        return this;
+    }
+
+    @Override
+    public PaperSoundBuilder receivers(int radius) {
+        receivers = location.getNearbyPlayers(radius);
+        return this;
+    }
+
+    @Override
+    public PaperSoundBuilder receivers(int radiusxz, int radiusy) {
+        receivers = location.getNearbyPlayers(radiusxz, radiusy);
+        return this;
+    }
+
+    @Override
+    public Location location() {
+        return location;
+    }
+
+    @Override
+    public PaperSoundBuilder location(Location location) {
+        this.location = location.clone();
+        return this;
+    }
+
+    @Override
+    public PaperSoundBuilder location(World world, double x, double y, double z) {
+        this.location = new Location(world, x, y, z);
+        return this;
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index dc7de2b59ec5ca3e5fba34dbb2aa2e6aed8f95cb..b8baab80237a663fd604b88d5dccea5bb73b86b4 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -18,6 +18,8 @@ import com.mojang.serialization.Lifecycle;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.Unpooled;
+import io.papermc.paper.sound.PaperSoundBuilder; // Paper
+import io.papermc.paper.sound.SoundBuilder; // Paper
 import it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap;
 import java.awt.image.BufferedImage;
 import java.io.File;
@@ -115,6 +117,8 @@ import org.bukkit.Location;
 import org.bukkit.NamespacedKey;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.Server;
+import org.bukkit.Sound; // Paper
+import org.bukkit.SoundCategory; // Paper
 import org.bukkit.StructureType;
 import org.bukkit.UnsafeValues;
 import org.bukkit.Warning.WarningState;
@@ -1821,6 +1825,18 @@ public final class CraftServer implements Server {
         return new CraftMerchantCustom(title == null ? InventoryType.MERCHANT.getDefaultTitle() : title);
     }
 
+    // Paper start
+    @Override
+    public SoundBuilder createSoundBuilder(Sound sound, Location location) {
+        return new PaperSoundBuilder(sound, location);
+    }
+
+    @Override
+    public SoundBuilder createSoundBuilder(Sound sound, SoundCategory category, Location location) {
+        return new PaperSoundBuilder(sound, category, location);
+    }
+    // Paper end
+
     @Override
     public HelpMap getHelpMap() {
         return helpMap;
