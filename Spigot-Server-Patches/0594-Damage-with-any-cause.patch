From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: NeumimTo <NeumimTo@users.noreply.github.com>
Date: Wed, 28 Oct 2020 18:42:39 +0100
Subject: [PATCH] Damage with any cause


diff --git a/src/main/java/io/papermc/paper/util/DamageUtils.java b/src/main/java/io/papermc/paper/util/DamageUtils.java
new file mode 100644
index 0000000000000000000000000000000000000000..0d0c245cb8eb56bf96832f2a75c9508d0e0b6a94
--- /dev/null
+++ b/src/main/java/io/papermc/paper/util/DamageUtils.java
@@ -0,0 +1,117 @@
+package io.papermc.paper.util;
+
+import net.minecraft.server.*;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.LightningStrike;
+import org.bukkit.entity.WitherSkull;
+import org.bukkit.event.entity.EntityDamageEvent;
+
+import javax.annotation.Nullable;
+
+public final class DamageUtils {
+
+    private DamageUtils() {}
+
+    /**
+     * Method to convert bukkit's {@code DamageCause} to NMS' {@code DamageSource}
+     *
+     * The method wont work with 100% DamageSources, for example Bukkit/Craftbukkit does not recognize between
+     * {@code DamageCause.CACTUS} and {@code DamageCause.SWEET_BERRY_BUSH}, however nms does.
+     *
+     * Another example could be {@code DamageCause.SUICIDE} - Its purely Bukkit/Craftbukkit implementation detail, and
+     * has no counterpart within nms.
+     *
+     * @param damageCause to be converted to DamageSource
+     * @param attackingEntity entity, which triggered the damage
+     * @return DamageSource
+     */
+    public static DamageSource damageCauseToDamageSource(EntityDamageEvent.DamageCause damageCause, Entity attackingEntity) {
+
+        switch (damageCause) {
+            case CONTACT:
+                return DamageSource.CACTUS;
+            case ENTITY_ATTACK:
+                if (attackingEntity instanceof EntityHuman) {
+                    return DamageSource.playerAttack((EntityHuman) attackingEntity);
+                }
+                if (attackingEntity instanceof EntityLiving) {
+                    return DamageSource.mobAttack((EntityLiving) attackingEntity);
+                }
+                return DamageSource.GENERIC;
+            case ENTITY_SWEEP_ATTACK:
+                if (attackingEntity instanceof EntityHuman) {
+                    return DamageSource.playerAttack((EntityHuman) attackingEntity).sweep();
+                }
+                if (attackingEntity instanceof EntityLiving) {
+                    return DamageSource.mobAttack((EntityLiving) attackingEntity).sweep();
+                }
+                return DamageSource.GENERIC;
+            case PROJECTILE:
+                if (attackingEntity instanceof IProjectile) {
+                    IProjectile projectile = (IProjectile) attackingEntity;
+                    EntityTypes<?> entityType = projectile.getEntityType();
+                    if (entityType == EntityTypes.TRIDENT) {
+                        return DamageSource.trident(attackingEntity, projectile);
+                    } else if (entityType == EntityTypes.ARROW || entityType == EntityTypes.SPECTRAL_ARROW) {
+                        return DamageSource.arrow((EntityArrow) attackingEntity, projectile.getShooter());
+                    } else if (entityType == EntityTypes.SNOWBALL || entityType == EntityTypes.EGG ||
+                        entityType == EntityTypes.ENDER_PEARL || entityType == EntityTypes.POTION) {
+                        return DamageSource.projectile(attackingEntity, projectile.getShooter());
+                    } else if (entityType == EntityTypes.FIREWORK_ROCKET) {
+                        return DamageSource.fireworkRocket((EntityFireworks) attackingEntity, projectile);
+                    } else if (entityType == EntityTypes.WITHER_SKULL) {
+                        return DamageSource.witherSkull((EntityWitherSkull) attackingEntity, projectile);
+                    }
+                    return DamageSource.projectile(projectile, projectile.getShooter());
+                }
+                return DamageSource.GENERIC;
+            case SUFFOCATION:
+                return DamageSource.STUCK;
+            case FALL:
+                return DamageSource.FALL;
+            case FIRE:
+                return DamageSource.FIRE;
+            case FIRE_TICK:
+                return DamageSource.BURN;
+            case MELTING:
+                return CraftEventFactory.MELTING;
+            case LAVA:
+                return DamageSource.LAVA;
+            case DROWNING:
+                return DamageSource.DROWN;
+            case VOID:
+                return DamageSource.OUT_OF_WORLD;
+            case LIGHTNING:
+                return DamageSource.LIGHTNING;
+            case STARVATION:
+                return DamageSource.STARVE;
+            case POISON:
+                return CraftEventFactory.POISON;
+            case MAGIC:
+                return DamageSource.MAGIC;
+            case WITHER:
+                return DamageSource.WITHER;
+            case FALLING_BLOCK:
+                return DamageSource.FALLING_BLOCK;
+            case THORNS:
+                if (attackingEntity == null) {
+                    return DamageSource.GENERIC;
+                }
+                return DamageSource.thorns(attackingEntity);
+            case DRAGON_BREATH:
+                return DamageSource.DRAGON_BREATH;
+            case CUSTOM:
+                return DamageSource.GENERIC;
+            case FLY_INTO_WALL:
+                return DamageSource.FLY_INTO_WALL;
+            case HOT_FLOOR:
+                return DamageSource.HOT_FLOOR;
+            case CRAMMING:
+                return DamageSource.CRAMMING;
+            case DRYOUT:
+                return DamageSource.DRYOUT;
+        }
+        return DamageSource.GENERIC;
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/DamageSource.java b/src/main/java/net/minecraft/server/DamageSource.java
index 6fe5678cffc2487fe00c953d772f764bb37a4b11..20174f25d4935e377aacaf2bbe26b3d0f44583a7 100644
--- a/src/main/java/net/minecraft/server/DamageSource.java
+++ b/src/main/java/net/minecraft/server/DamageSource.java
@@ -1,5 +1,9 @@
 package net.minecraft.server;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.LightningStrike;
+import org.bukkit.event.entity.EntityDamageEvent;
+
 import javax.annotation.Nullable;
 
 public class DamageSource {
@@ -150,6 +154,24 @@ public class DamageSource {
         this.translationIndex = s;
     }
 
+    // Paper start - OBFHELPER
+    public static DamageSource thorns(Entity attackingEntity) {
+        return DamageSource.a(attackingEntity);
+    }
+
+    public static DamageSource witherSkull(EntityWitherSkull attackingEntity, IProjectile projectile) {
+        return DamageSource.a(attackingEntity, projectile.getShooter());
+    }
+
+    public static DamageSource fireworkRocket(EntityFireworks attackingEntity, IProjectile projectile) {
+        return DamageSource.a(attackingEntity, projectile.getShooter());
+    }
+
+    public static DamageSource trident(Entity attackingEntity, IProjectile projectile) {
+        return DamageSource.a(attackingEntity, projectile.getShooter());
+    }
+    // Paper end - OBFHELPER
+
     @Nullable
     public Entity j() {
         return this.getEntity();
@@ -226,4 +248,52 @@ public class DamageSource {
     public Vec3D w() {
         return null;
     }
+
+    // Paper - start
+    public static EntityDamageEvent.DamageCause toDamageCause(DamageSource source, @Nullable Entity damager, Entity damagee) {
+        if (source == DamageSource.ANVIL || source == DamageSource.FALLING_BLOCK) {
+            return EntityDamageEvent.DamageCause.FALLING_BLOCK;
+        } else if (damager instanceof LightningStrike || source == DamageSource.LIGHTNING) {
+            return EntityDamageEvent.DamageCause.LIGHTNING;
+        } else if (source == DamageSource.FALL) {
+            return EntityDamageEvent.DamageCause.FALL;
+        } else if (source == DamageSource.DRAGON_BREATH) {
+            return EntityDamageEvent.DamageCause.DRAGON_BREATH;
+        } else if (source == DamageSource.MAGIC) {
+            return EntityDamageEvent.DamageCause.MAGIC;
+        } else if (source == DamageSource.FIRE) {
+            return EntityDamageEvent.DamageCause.FIRE;
+        } else if (source == DamageSource.STARVE) {
+            return EntityDamageEvent.DamageCause.STARVATION;
+        } else if (source == DamageSource.WITHER) {
+            return EntityDamageEvent.DamageCause.WITHER;
+        } else if (source == DamageSource.STUCK) {
+            return EntityDamageEvent.DamageCause.SUFFOCATION;
+        } else if (source == DamageSource.DROWN) {
+            return EntityDamageEvent.DamageCause.DROWNING;
+        } else if (source == DamageSource.BURN) {
+            return EntityDamageEvent.DamageCause.FIRE_TICK;
+        } else if (source == CraftEventFactory.MELTING) {
+            return EntityDamageEvent.DamageCause.MELTING;
+        } else if (source == CraftEventFactory.POISON) {
+            return EntityDamageEvent.DamageCause.POISON;
+        } else if (source == DamageSource.FLY_INTO_WALL) {
+            return EntityDamageEvent.DamageCause.FLY_INTO_WALL;
+        } else if (source == DamageSource.CRAMMING) {
+            return EntityDamageEvent.DamageCause.CRAMMING;
+        } else if (source == DamageSource.DRYOUT) {
+            return EntityDamageEvent.DamageCause.DRYOUT;
+        } else if (source == DamageSource.GENERIC) {
+            return EntityDamageEvent.DamageCause.CUSTOM;
+        } else if (source == DamageSource.CACTUS) {
+            return EntityDamageEvent.DamageCause.CONTACT;
+        } else if (source == DamageSource.SWEET_BERRY_BUSH) {
+            return EntityDamageEvent.DamageCause.CONTACT;
+        } else if (source == DamageSource.HOT_FLOOR) {
+            return EntityDamageEvent.DamageCause.HOT_FLOOR;
+        } else {
+            throw new IllegalStateException(String.format("Unhandled damage of %s by %s from %s", damagee, (damager == null ? "null" : damager), source.translationIndex));
+        }
+    }
+    // Paper - end
 }
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index b845e488e3b9a4f19d1fcf169533046b7e72ba28..b87cd4e2b88e87f0d536e24b3b4accb744d81157 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1416,7 +1416,13 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         this.velocityChanged = true;
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
+    // Paper start  - add damager param
+    public boolean damageEntity(DamageSource damageSource, float f) {
+        return damageEntity(damageSource, f, null);
+    }
+
+    public boolean damageEntity(DamageSource damagesource, float f, Entity damager) {
+    // Paper end
         if (this.isInvulnerable(damagesource)) {
             return false;
         } else {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java
index e6d050099b787831bebedfa2c264e5a311776e3a..7eff473e6164cdc78302058ba0e5a7cb30798426 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java
@@ -5,6 +5,7 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EnderDragon;
 import org.bukkit.entity.EnderDragonPart;
 import org.bukkit.entity.Entity;
+import org.bukkit.event.entity.EntityDamageEvent;
 
 public class CraftEnderDragonPart extends CraftComplexPart implements EnderDragonPart {
     public CraftEnderDragonPart(CraftServer server, EntityComplexPart entity) {
@@ -36,6 +37,18 @@ public class CraftEnderDragonPart extends CraftComplexPart implements EnderDrago
         getParent().damage(amount, source);
     }
 
+    // Paper start
+    @Override
+    public void damage(double amount, EntityDamageEvent.DamageCause damageCause) {
+        getParent().damage(amount, damageCause);
+    }
+
+    @Override
+    public void damage(double amount, EntityDamageEvent.DamageCause damageCause, Entity source) {
+        getParent().damage(amount, damageCause, source);
+    }
+    // Paper end
+
     @Override
     public double getHealth() {
         return getParent().getHealth();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index 9e9bdf9bc2e5c4d72d811fcb439628d946741324..cb6d47cd5ff2598d2e34d0354aff2bd816bbadbc 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -50,9 +50,11 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.entity.memory.CraftMemoryKey;
 import org.bukkit.craftbukkit.entity.memory.CraftMemoryMapper;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftEntityEquipment;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.potion.CraftPotionUtil;
+import io.papermc.paper.util.DamageUtils;
 import org.bukkit.entity.AbstractArrow;
 import org.bukkit.entity.DragonFireball;
 import org.bukkit.entity.Egg;
@@ -79,6 +81,7 @@ import org.bukkit.entity.TippedArrow;
 import org.bukkit.entity.Trident;
 import org.bukkit.entity.WitherSkull;
 import org.bukkit.entity.memory.MemoryKey;
+import org.bukkit.event.entity.EntityDamageEvent;
 import org.bukkit.event.entity.EntityPotionEffectEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.inventory.EntityEquipment;
@@ -91,6 +94,8 @@ import org.bukkit.util.BlockIterator;
 import org.bukkit.util.RayTraceResult;
 import org.bukkit.util.Vector;
 
+import javax.annotation.Nullable;
+
 public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     private CraftEntityEquipment equipment;
 
@@ -321,7 +326,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
 
     @Override
     public void damage(double amount) {
-        damage(amount, null);
+        damage(amount, (org.bukkit.entity.Entity) null); // Paper - the typecast
     }
 
     @Override
@@ -337,6 +342,23 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         entity.damageEntity(reason, (float) amount);
     }
 
+    // Paper start
+    @Override
+    public void damage(double amount, EntityDamageEvent.DamageCause damageCause) {
+        DamageSource reason = DamageUtils.damageCauseToDamageSource(damageCause, null);
+        entity.damageEntity(reason, (float) amount);
+    }
+
+    @Override
+    public void damage(double amount, EntityDamageEvent.DamageCause damageCause, org.bukkit.entity.Entity source) {
+        Preconditions.checkNotNull(source, "DamagerEntity cannot be null");
+        net.minecraft.server.Entity handle = ((CraftEntity) source).getHandle();
+        DamageSource reason = DamageUtils.damageCauseToDamageSource(damageCause, handle);
+        CraftEventFactory.entityDamage = handle;
+        entity.damageEntity(reason, (float) amount);
+    }
+    // Paper end
+
     @Override
     public Location getEyeLocation() {
         Location loc = getLocation();
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index 0f0d70c0622558740086f0f7cf89e5500128f955..ca2c0c127a4d9e2810e29ba3f91385ca50a97bc4 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -24,7 +24,6 @@ import net.minecraft.server.EntityAnimal;
 import net.minecraft.server.EntityAreaEffectCloud;
 import net.minecraft.server.EntityDamageSource;
 import net.minecraft.server.EntityDamageSourceIndirect;
-import net.minecraft.server.EntityEnderCrystal;
 import net.minecraft.server.EntityEnderDragon;
 import net.minecraft.server.EntityExperienceOrb;
 import net.minecraft.server.EntityFireworks;
@@ -71,7 +70,6 @@ import net.minecraft.server.Unit;
 import net.minecraft.server.World;
 import net.minecraft.server.WorldServer;
 import org.bukkit.Bukkit;
-import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
 import org.bukkit.Server;
@@ -87,7 +85,6 @@ import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.block.CraftBlockState;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
-import org.bukkit.craftbukkit.entity.CraftEntity;
 import org.bukkit.craftbukkit.entity.CraftLivingEntity;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.entity.CraftRaider;
@@ -123,7 +120,6 @@ import org.bukkit.entity.ThrownPotion;
 import org.bukkit.entity.Vehicle;
 import org.bukkit.entity.Villager;
 import org.bukkit.entity.Villager.Profession;
-import org.bukkit.entity.ExperienceOrb; // Paper
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.Event;
 import org.bukkit.event.Event.Result;
@@ -164,7 +160,6 @@ import org.bukkit.event.entity.EntityDeathEvent;
 import org.bukkit.event.entity.EntityEnterLoveModeEvent;
 import org.bukkit.event.entity.EntityPickupItemEvent;
 import org.bukkit.event.entity.EntityPlaceEvent;
-import org.bukkit.event.entity.EntityPortalEvent;
 import org.bukkit.event.entity.EntityPotionEffectEvent;
 import org.bukkit.event.entity.EntityShootBowEvent;
 import org.bukkit.event.entity.EntitySpawnEvent;
@@ -223,7 +218,6 @@ import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.meta.BookMeta;
 import org.bukkit.potion.PotionEffect;
-import org.bukkit.projectiles.ProjectileSource;
 
 import org.bukkit.event.entity.SpawnerSpawnEvent; // Spigot
 
@@ -886,10 +880,16 @@ public class CraftEventFactory {
     }
 
     private static EntityDamageEvent handleEntityDamageEvent(Entity entity, DamageSource source, Map<DamageModifier, Double> modifiers, Map<DamageModifier, Function<? super Double, Double>> modifierFunctions, boolean cancelled) {
+        // Paper start
+        Entity damager = entityDamage;
+        entityDamage = null;
+        // Paper end
         if (source.isExplosion()) {
             DamageCause damageCause;
-            Entity damager = entityDamage;
-            entityDamage = null;
+            // Paper start - moved above conditional block
+            //Entity damager = entityDamage;
+            //entityDamage = null;
+            // Paper end
             EntityDamageEvent event;
             if (damager == null) {
                 event = new EntityDamageByBlockEvent(null, entity.getBukkitEntity(), DamageCause.BLOCK_EXPLOSION, modifiers, modifierFunctions);
@@ -912,7 +912,7 @@ public class CraftEventFactory {
             }
             return event;
         } else if (source instanceof EntityDamageSource) {
-            Entity damager = source.getEntity();
+            damager = source.getEntity(); // Paper
             DamageCause cause = (source.isSweep()) ? DamageCause.ENTITY_SWEEP_ATTACK : DamageCause.ENTITY_ATTACK;
 
             if (source instanceof EntityDamageSourceIndirect) {
@@ -928,7 +928,7 @@ public class CraftEventFactory {
 
             return callEntityDamageEvent(damager, entity, cause, modifiers, modifierFunctions, cancelled);
         } else if (source == DamageSource.OUT_OF_WORLD) {
-            EntityDamageEvent event = new EntityDamageByBlockEvent(null, entity.getBukkitEntity(), DamageCause.VOID, modifiers, modifierFunctions);
+            EntityDamageEvent event = damager == null ? new EntityDamageByBlockEvent(null, entity.getBukkitEntity(), DamageCause.VOID, modifiers, modifierFunctions) : new EntityDamageByEntityEvent(damager.getBukkitEntity(), entity.getBukkitEntity(), DamageCause.VOID, modifiers, modifierFunctions); // Paper
             event.setCancelled(cancelled);
             callEvent(event);
             if (!event.isCancelled()) {
@@ -936,7 +936,7 @@ public class CraftEventFactory {
             }
             return event;
         } else if (source == DamageSource.LAVA) {
-            EntityDamageEvent event = (new EntityDamageByBlockEvent(null, entity.getBukkitEntity(), DamageCause.LAVA, modifiers, modifierFunctions));
+            EntityDamageEvent event = damager == null ? new EntityDamageByBlockEvent(null, entity.getBukkitEntity(), DamageCause.LAVA, modifiers, modifierFunctions) : new EntityDamageByEntityEvent(damager.getBukkitEntity(), entity.getBukkitEntity(), DamageCause.LAVA, modifiers, modifierFunctions); // Paper
             event.setCancelled(cancelled);
             callEvent(event);
             if (!event.isCancelled()) {
@@ -945,7 +945,7 @@ public class CraftEventFactory {
             return event;
         } else if (blockDamage != null) {
             DamageCause cause = null;
-            Block damager = blockDamage;
+            Block blockDamager = blockDamage; // Paper
             blockDamage = null;
             if (source == DamageSource.CACTUS || source == DamageSource.SWEET_BERRY_BUSH) {
                 cause = DamageCause.CONTACT;
@@ -956,69 +956,20 @@ public class CraftEventFactory {
             } else {
                 throw new IllegalStateException(String.format("Unhandled damage of %s by %s from %s", entity, damager, source.translationIndex));
             }
-            EntityDamageEvent event = new EntityDamageByBlockEvent(damager, entity.getBukkitEntity(), cause, modifiers, modifierFunctions);
-            event.setCancelled(cancelled);
-            callEvent(event);
-            if (!event.isCancelled()) {
-                event.getEntity().setLastDamageCause(event);
-            }
-            return event;
-        } else if (entityDamage != null) {
-            DamageCause cause = null;
-            CraftEntity damager = entityDamage.getBukkitEntity();
-            entityDamage = null;
-            if (source == DamageSource.ANVIL || source == DamageSource.FALLING_BLOCK) {
-                cause = DamageCause.FALLING_BLOCK;
-            } else if (damager instanceof LightningStrike) {
-                cause = DamageCause.LIGHTNING;
-            } else if (source == DamageSource.FALL) {
-                cause = DamageCause.FALL;
-            } else if (source == DamageSource.DRAGON_BREATH) {
-                cause = DamageCause.DRAGON_BREATH;
-            } else if (source == DamageSource.MAGIC) {
-                cause = DamageCause.MAGIC;
-            } else {
-                throw new IllegalStateException(String.format("Unhandled damage of %s by %s from %s", entity, damager.getHandle(), source.translationIndex));
-            }
-            EntityDamageEvent event = new EntityDamageByEntityEvent(damager, entity.getBukkitEntity(), cause, modifiers, modifierFunctions);
+            EntityDamageEvent event = damager == null ? new EntityDamageByBlockEvent(blockDamager, entity.getBukkitEntity(), cause, modifiers, modifierFunctions) : new EntityDamageByEntityEvent(damager.getBukkitEntity(), entity.getBukkitEntity(), cause, modifiers, modifierFunctions); // Paper
             event.setCancelled(cancelled);
             callEvent(event);
             if (!event.isCancelled()) {
                 event.getEntity().setLastDamageCause(event);
             }
             return event;
+        // Paper start
+        } else if (damager != null) {
+            DamageCause cause = DamageSource.toDamageCause(source, damager, entity);
+            return callEntityDamageEvent(damager, entity, cause, modifiers, modifierFunctions, cancelled);
         }
-
-        DamageCause cause = null;
-        if (source == DamageSource.FIRE) {
-            cause = DamageCause.FIRE;
-        } else if (source == DamageSource.STARVE) {
-            cause = DamageCause.STARVATION;
-        } else if (source == DamageSource.WITHER) {
-            cause = DamageCause.WITHER;
-        } else if (source == DamageSource.STUCK) {
-            cause = DamageCause.SUFFOCATION;
-        } else if (source == DamageSource.DROWN) {
-            cause = DamageCause.DROWNING;
-        } else if (source == DamageSource.BURN) {
-            cause = DamageCause.FIRE_TICK;
-        } else if (source == MELTING) {
-            cause = DamageCause.MELTING;
-        } else if (source == POISON) {
-            cause = DamageCause.POISON;
-        } else if (source == DamageSource.MAGIC) {
-            cause = DamageCause.MAGIC;
-        } else if (source == DamageSource.FALL) {
-            cause = DamageCause.FALL;
-        } else if (source == DamageSource.FLY_INTO_WALL) {
-            cause = DamageCause.FLY_INTO_WALL;
-        } else if (source == DamageSource.CRAMMING) {
-            cause = DamageCause.CRAMMING;
-        } else if (source == DamageSource.DRYOUT) {
-            cause = DamageCause.DRYOUT;
-        } else if (source == DamageSource.GENERIC) {
-            cause = DamageCause.CUSTOM;
-        }
+        DamageCause cause = DamageSource.toDamageCause(source, damager, entity);
+        // Paper end
 
         if (cause != null) {
             return callEntityDamageEvent(null, entity, cause, modifiers, modifierFunctions, cancelled);
