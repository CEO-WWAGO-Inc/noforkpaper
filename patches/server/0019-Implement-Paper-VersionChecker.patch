From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Zach Brown <zach@zachbr.io>
Date: Mon, 27 May 2019 03:40:05 -0500
Subject: [PATCH] Implement Paper VersionChecker


diff --git a/.gitignore b/.gitignore
index 3e05459f27c4c5697ae65da504d67a6a2f617b57..804e3002d910f9a8a1011aad95308430b2be975d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -40,3 +40,4 @@ dependency-reduced-pom.xml
 
 /src/main/resources/achievement
 /src/main/resources/lang
+/src/main/resources/branch-info.properties
diff --git a/build.gradle.kts b/build.gradle.kts
index 31343d49cf38063976e0f8c93264a4f3897f06fb..ea0c0ce76c16c96b97769516032b150c28a6061f 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -62,6 +62,11 @@ tasks.jar {
             attributes("$tld/bukkit", "Sealed" to true)
         }
     }
+    val git = Git(rootProject.layout.projectDirectory.path)
+    val branchInfo = git("rev-parse", "--abbrev-ref", "HEAD").getText().trim()
+    File("Paper-Server/src/main/resources/branch-info.properties").bufferedWriter().use { out ->
+    out.write("branch=$branchInfo")
+  }
 }
 
 publishing {
diff --git a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
new file mode 100644
index 0000000000000000000000000000000000000000..1fee67f00220058176bb8e49eb9cc0ef6c0c0868
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
@@ -0,0 +1,123 @@
+package com.destroystokyo.paper;
+
+import com.destroystokyo.paper.util.VersionFetcher;
+import io.papermc.paper.util.BranchReader;
+import com.google.common.base.Charsets;
+import com.google.common.io.Resources;
+import com.google.gson.*;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.format.NamedTextColor;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.io.*;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.util.stream.StreamSupport;
+
+public class PaperVersionFetcher implements VersionFetcher {
+    private static final java.util.regex.Pattern VER_PATTERN = java.util.regex.Pattern.compile("^([0-9\\.]*)\\-.*R"); // R is an anchor, will always give '-R' at end
+    private static final String GITHUB_BRANCH_NAME = BranchReader.getBranch();
+    private static @Nullable String mcVer;
+
+    @Override
+    public long getCacheTime() {
+        return 720000;
+    }
+
+    @Nonnull
+    @Override
+    public Component getVersionMessage(@Nonnull String serverVersion) {
+        String[] parts = serverVersion.substring("git-Paper-".length()).split("[-\\s]");
+        return getUpdateStatusMessage("PaperMC/Paper", GITHUB_BRANCH_NAME, parts[0]);
+    }
+
+    private static @Nullable String getMinecraftVersion() {
+        if (mcVer == null) {
+            java.util.regex.Matcher matcher = VER_PATTERN.matcher(org.bukkit.Bukkit.getBukkitVersion());
+            if (matcher.find()) {
+                String result = matcher.group();
+                mcVer = result.substring(0, result.length() - 2); // strip 'R' anchor and trailing '-'
+            } else {
+                org.bukkit.Bukkit.getLogger().warning("Unable to match version to pattern! Report to PaperMC!");
+                org.bukkit.Bukkit.getLogger().warning("Pattern: " + VER_PATTERN.toString());
+                org.bukkit.Bukkit.getLogger().warning("Version: " + org.bukkit.Bukkit.getBukkitVersion());
+            }
+        }
+
+        return mcVer;
+    }
+
+    private static Component getUpdateStatusMessage(@Nonnull String repo, @Nonnull String branch, @Nonnull String versionInfo) {
+        int distance;
+        try {
+            int jenkinsBuild = Integer.parseInt(versionInfo);
+            distance = fetchDistanceFromSiteApi(jenkinsBuild, getMinecraftVersion());
+        } catch (NumberFormatException ignored) {
+            versionInfo = versionInfo.replace("\"", "");
+            distance = fetchDistanceFromGitHub(repo, branch, versionInfo);
+        }
+
+        switch (distance) {
+            case -1:
+                return Component.text("Error obtaining version information", NamedTextColor.YELLOW);
+            case 0:
+                return Component.text("You are running the latest version", NamedTextColor.GREEN);
+            case -2:
+                return Component.text("Unknown version", NamedTextColor.YELLOW);
+            default:
+                return Component.text("You are " + distance + " version(s) behind", NamedTextColor.YELLOW);
+        }
+    }
+
+    private static int fetchDistanceFromSiteApi(int jenkinsBuild, @Nullable String siteApiVersion) {
+        if (siteApiVersion == null) { return -1; }
+        try {
+            try (BufferedReader reader = Resources.asCharSource(
+                new URL("https://papermc.io/api/v2/projects/paper/versions/" + siteApiVersion),
+                Charsets.UTF_8
+            ).openBufferedStream()) {
+                JsonObject json = new Gson().fromJson(reader, JsonObject.class);
+                JsonArray builds = json.getAsJsonArray("builds");
+                int latest = StreamSupport.stream(builds.spliterator(), false)
+                    .mapToInt(e -> e.getAsInt())
+                    .max()
+                    .getAsInt();
+                return latest - jenkinsBuild;
+            } catch (JsonSyntaxException ex) {
+                ex.printStackTrace();
+                return -1;
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+            return -1;
+        }
+    }
+
+    // Contributed by Techcable <Techcable@outlook.com> in GH-65
+    private static int fetchDistanceFromGitHub(@Nonnull String repo, @Nonnull String branch, @Nonnull String hash) {
+        try {
+            HttpURLConnection connection = (HttpURLConnection) new URL("https://api.github.com/repos/" + repo + "/compare/" + branch + "..." + hash).openConnection();
+            connection.connect();
+            if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) return -2; // Unknown commit
+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {
+                JsonObject obj = new Gson().fromJson(reader, JsonObject.class);
+                String status = obj.get("status").getAsString();
+                switch (status) {
+                    case "identical":
+                        return 0;
+                    case "behind":
+                        return obj.get("behind_by").getAsInt();
+                    default:
+                        return -1;
+                }
+            } catch (JsonSyntaxException | NumberFormatException e) {
+                e.printStackTrace();
+                return -1;
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+            return -1;
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/util/BranchReader.java b/src/main/java/io/papermc/paper/util/BranchReader.java
new file mode 100644
index 0000000000000000000000000000000000000000..3d6a9e0adb9f4fcc33cd6f81f5e4809d2dd3f3af
--- /dev/null
+++ b/src/main/java/io/papermc/paper/util/BranchReader.java
@@ -0,0 +1,25 @@
+package io.papermc.paper.util;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.Properties;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import org.bukkit.Bukkit;
+
+public final class BranchReader {
+	public static String getBranch() {
+		String branch = "null";
+		InputStream branchStream = Bukkit.class.getClassLoader().getResourceAsStream("branch-info.properties");
+		Properties properties = new Properties();
+		if (branchStream != null) {
+			try {
+				properties.load(branchStream);
+				branch = properties.getProperty("branch");
+			} catch (IOException ex) {
+				Logger.getLogger(BranchReader.class.getName()).log(Level.SEVERE, "Could not get branch info from branch-info.properties!", ex);
+			}
+		}
+		return branch;
+	}
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index fa64a0ea5b6dd9c6031fe54c9030bdb1999ef109..2b54c6980166cb7378e3db42d3a68005ebf451a1 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -368,6 +368,11 @@ public final class CraftMagicNumbers implements UnsafeValues {
     public String getTimingsServerName() {
         return com.destroystokyo.paper.PaperConfig.timingsServerName;
     }
+
+    @Override
+    public com.destroystokyo.paper.util.VersionFetcher getVersionFetcher() {
+        return new com.destroystokyo.paper.PaperVersionFetcher();
+    }
     // Paper end
 
     /**
