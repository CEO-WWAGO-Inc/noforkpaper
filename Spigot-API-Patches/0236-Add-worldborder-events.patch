From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jacob <jacobblair6789@gmail.com>
Date: Mon, 16 Nov 2020 10:43:34 -0700
Subject: [PATCH] Add worldborder events


diff --git a/src/main/java/io/papermc/paper/event/world/GenericWorldBorderMoveEvent.java b/src/main/java/io/papermc/paper/event/world/GenericWorldBorderMoveEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..b2f68107120367a739decdf591499960e21f0a19
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/world/GenericWorldBorderMoveEvent.java
@@ -0,0 +1,47 @@
+package io.papermc.paper.event.world;
+
+import org.bukkit.World;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.world.WorldEvent;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Parent event for {@code MovingWorldBorderChangeEvent} and {@code StaticWorldBorderChangeEvent}
+ */
+public class GenericWorldBorderMoveEvent extends WorldEvent {
+
+    private static final HandlerList HANDLERS = new HandlerList();
+
+    private final double oldSize;
+    private final double newSize;
+
+    public GenericWorldBorderMoveEvent(@NotNull World world, double oldSize, double newSize) {
+        super(world);
+        this.oldSize=oldSize;
+        this.newSize=newSize;
+    }
+
+    /** Get the size of the world border prior to it's move
+     * @return Diameter of the border
+     */
+    public double getOldSize() {
+        return this.oldSize;
+    }
+    /** Get the size of the world border after it's move
+     * @return Diameter of the border
+     */
+    public double getNewSize() {
+        return this.newSize;
+    }
+
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLERS;
+    }
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLERS;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/event/world/MovingWorldBorderChangeEvent.java b/src/main/java/io/papermc/paper/event/world/MovingWorldBorderChangeEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..81b9c23acab52d476af448edcf632e5ed81c5956
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/world/MovingWorldBorderChangeEvent.java
@@ -0,0 +1,77 @@
+package io.papermc.paper.event.world;
+
+import org.bukkit.World;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.world.WorldEvent;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when the world border ticks over to a new size in a transition. Not called when you provide a delay of {@code 0} in {@code /worldborder set}.
+ */
+public class MovingWorldBorderChangeEvent extends GenericWorldBorderMoveEvent implements Cancellable {
+
+    private boolean cancelled = false;
+
+    private final double minX;
+    private final double maxX;
+    private final double minZ;
+    private final double maxZ;
+
+    public MovingWorldBorderChangeEvent(@NotNull World world, double minX, double maxX, double minZ, double maxZ, double oldSize, double newSize) {
+        super(world, oldSize, newSize);
+        this.minX = minX;
+        this.maxX = maxX;
+        this.minZ = minZ;
+        this.maxZ = maxZ;
+    }
+
+    /**
+     * Get the lowest X coordinate of the border
+     * @return lowest X value as {@code double}
+     */
+    public double getMinX() {
+        return this.minX;
+    }
+    /**
+     * Get the highest X coordinate of the border
+     * @return highest X value as {@code double}
+     */
+    public double getMaxX() {
+        return this.maxX;
+    }
+
+    /**
+     * Get the lowest Z coordinate of the border
+     * @return Lowest Z value as {@code double}
+     */
+    public double getMinZ() {
+        return this.minZ;
+    }
+
+    /**
+     * Get the highest Z coordinate of the border
+     * @return Highest Z value as {@code double}
+     */
+    public double getMaxZ() {
+        return this.maxZ;
+    }
+
+    /**
+     * Check if this event is cancelled
+     * @return true if cancelled, false if not
+     */
+    @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    /**
+     * Set this event as cancelled
+     * @param cancel true if you wish to cancel this event
+     */
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled=cancel;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/event/world/StaticWorldBorderChangeEvent.java b/src/main/java/io/papermc/paper/event/world/StaticWorldBorderChangeEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..27d3851634ca54f63a5c11532f5e6c271155ce9d
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/world/StaticWorldBorderChangeEvent.java
@@ -0,0 +1,38 @@
+package io.papermc.paper.event.world;
+
+import org.bukkit.World;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.world.WorldEvent;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when the World Border is changed with a delay of {@code 0}
+ * Also called when {@code /worldborder add} is run
+ */
+public class StaticWorldBorderChangeEvent extends GenericWorldBorderMoveEvent implements Cancellable {
+
+    private boolean cancelled = false;
+
+    public StaticWorldBorderChangeEvent(@NotNull World world, double oldSize, double newSize) {
+        super(world, oldSize, newSize);
+    }
+
+    /**
+     * Check if this event is cancelled
+     * @return true if cancelled, false if not
+     */
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    /**
+     * Set this event as cancelled
+     * @param cancel true if you wish to cancel this event
+     */
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled=cancel;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/event/world/WorldBorderCenterChangeEvent.java b/src/main/java/io/papermc/paper/event/world/WorldBorderCenterChangeEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..b5502abd3dba71f902522146065632c72e39f56a
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/world/WorldBorderCenterChangeEvent.java
@@ -0,0 +1,69 @@
+package io.papermc.paper.event.world;
+
+import org.bukkit.Location;
+import org.bukkit.World;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.world.WorldEvent;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+
+public class WorldBorderCenterChangeEvent extends WorldEvent implements Cancellable {
+
+    private static final HandlerList HANDLERS = new HandlerList();
+    private boolean cancelled = false;
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLERS;
+    }
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLERS;
+    }
+
+    private final Location oldLocation;
+    private final Location newLocation;
+
+    public WorldBorderCenterChangeEvent(@NotNull World world, @Nullable Location oldLocation, @NotNull Location newLocation) {
+       super(world);
+       this.oldLocation=oldLocation;
+       this.newLocation=newLocation;
+    }
+
+    /**
+     * Location of the center prior to its change
+     * @return center as Location. Y will always be 0.0 as it is irrelevant.
+     */
+    @Nullable
+    public Location getOldLocation() {
+        return oldLocation;
+    }
+    /**
+     * Location of the center after its change
+     * @return center as Location. Y will always be 0.0 as it is irrelevant.
+     */
+    @NotNull
+    public Location getNewLocation() {
+        return newLocation;
+    }
+
+    /**
+     * Check if this event is cancelled
+     * @return true if cancelled, false if not
+     */
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    /**
+     * Set this event as cancelled
+     * @param cancel true if you wish to cancel this event
+     */
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled=cancel;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/event/world/WorldBorderFinishChangeEvent.java b/src/main/java/io/papermc/paper/event/world/WorldBorderFinishChangeEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..35940facd61186359eba4c7eae4c3acd857acb38
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/world/WorldBorderFinishChangeEvent.java
@@ -0,0 +1,43 @@
+package io.papermc.paper.event.world;
+
+import org.bukkit.World;
+import org.bukkit.WorldBorder;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.world.WorldEvent;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when the World Border finishes a transition. **Not** called on a static change (when the delay in {@code /worldborder set} is specified as {@code 0})
+ */
+public class WorldBorderFinishChangeEvent extends WorldEvent {
+
+    private static final HandlerList HANDLERS = new HandlerList();
+
+    private final WorldBorder border;
+
+    public WorldBorderFinishChangeEvent(@NotNull World world, @NotNull WorldBorder border) {
+        super(world);
+        this.border=border;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLERS;
+    }
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLERS;
+    }
+
+    /**
+     * Get the world border
+     * @return WorldBorder
+     */
+    @NotNull
+    public WorldBorder getWorldBorder() {
+        return border;
+    }
+
+
+}
diff --git a/src/main/java/io/papermc/paper/event/world/WorldBorderStartChangeEvent.java b/src/main/java/io/papermc/paper/event/world/WorldBorderStartChangeEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..ef000ccd555a2c2ffc859653e08e5780a2443332
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/world/WorldBorderStartChangeEvent.java
@@ -0,0 +1,59 @@
+package io.papermc.paper.event.world;
+
+import org.bukkit.World;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.world.WorldEvent;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when the World Border starts a transition. **Not** called on a static change (when the delay in {@code /worldborder set} is specified as {@code 0})
+ */
+public class WorldBorderStartChangeEvent extends WorldEvent {
+
+    private static final HandlerList HANDLERS = new HandlerList();
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLERS;
+    }
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLERS;
+    }
+
+    private final double oldSize;
+    private final double newSize;
+    private final double timeTaken;
+
+    public WorldBorderStartChangeEvent(@NotNull World world, double oldSize, double newSize, double timeTaken) {
+        super(world);
+        this.oldSize = oldSize;
+        this.newSize = newSize;
+        this.timeTaken = timeTaken;
+    }
+
+    /**
+     * Get the size of the border at the time of the event, prior to it's transition to the value stored in {@code getNewSize()}
+     * @return Old size of the border as a diameter
+     */
+    public double getOldSize() {
+        return oldSize;
+    }
+    /**
+     * Get the provided size of the world border after it's move. This will not be fulfilled yet as the border still needs to transition.
+     * @return New size of the border as a diameter
+     */
+    public double getNewSize() {
+        return newSize;
+    }
+
+    /**
+     * Get time specified to take to move the border
+     * @return Time as specified in {@code /worldborder set (blocks) (time)}
+     */
+    public double getTimeTaken() {
+        return timeTaken;
+    }
+
+}
