From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Owen1212055 <23108066+Owen1212055@users.noreply.github.com>
Date: Mon, 17 Oct 2022 18:00:34 -0400
Subject: [PATCH] Paper Item API

== AT ==
public net.minecraft.nbt.ListTag list

diff --git a/src/main/java/io/papermc/paper/inventory/item/PaperItemStack.java b/src/main/java/io/papermc/paper/inventory/item/PaperItemStack.java
new file mode 100644
index 0000000000000000000000000000000000000000..1d8b4b61099fd41520534fc00c3b9f819a28520d
--- /dev/null
+++ b/src/main/java/io/papermc/paper/inventory/item/PaperItemStack.java
@@ -0,0 +1,11 @@
+package io.papermc.paper.inventory.item;
+
+import net.minecraft.world.item.Items;
+
+public class PaperItemStack {
+
+
+    public static net.minecraft.world.item.ItemStack asVanillaCopy(io.papermc.paper.inventory.item.ItemStack paperItemStack) {
+        return new net.minecraft.world.item.ItemStack(Items.STONE);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/inventory/item/VanillaItemStack.java b/src/main/java/io/papermc/paper/inventory/item/VanillaItemStack.java
new file mode 100644
index 0000000000000000000000000000000000000000..7ce4f52240a560edb1198b26a966d31614b57d2e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/inventory/item/VanillaItemStack.java
@@ -0,0 +1,64 @@
+package io.papermc.paper.inventory.item;
+
+import io.papermc.paper.adventure.PaperAdventure;
+import net.kyori.adventure.key.Key;
+import net.kyori.adventure.text.event.HoverEvent;
+import net.minecraft.world.item.Item;
+import org.bukkit.Material;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.inventory.meta.ItemMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.function.UnaryOperator;
+
+public class VanillaItemStack implements ItemStack {
+
+    private final net.minecraft.world.item.ItemStack itemStack;
+
+    public VanillaItemStack(@NotNull net.minecraft.world.item.ItemStack vanilla) {
+        this.itemStack = vanilla;
+    }
+
+    @Override
+    public @NotNull Material getMaterial() {
+        return CraftMagicNumbers.getMaterial(this.itemStack.getItem());
+    }
+
+    @Override
+    public void setMaterial(@NotNull Material material) {
+        this.itemStack.setItem(CraftMagicNumbers.getItem(material));
+    }
+
+    @Override
+    public int getSize() {
+        return this.itemStack.getCount();
+    }
+
+    @Override
+    public void setSize(int size) {
+        this.itemStack.setCount(size);
+    }
+
+    @Override
+    public @Nullable ItemMeta getMeta() {
+        return null;
+    }
+
+    @Override
+    public void setMeta(@Nullable ItemMeta meta) {
+
+    }
+
+    @Override
+    public @NotNull HoverEvent<HoverEvent.ShowItem> asHoverEvent(@NotNull UnaryOperator<HoverEvent.ShowItem> op) {
+        Key key = CraftMagicNumbers.getMaterial(this.itemStack.getItem()).getKey();
+
+        return HoverEvent.showItem(op.apply(HoverEvent.ShowItem.of(key, this.itemStack.getCount(), PaperAdventure.asBinaryTagHolder(this.itemStack.getTag()))));
+    }
+
+    @Override
+    public @NotNull String translationKey() {
+        return null;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/MetaAxolotlBucket.java b/src/main/java/io/papermc/paper/item/meta/MetaAxolotlBucket.java
new file mode 100644
index 0000000000000000000000000000000000000000..047f6d0329a194d56fdd23db0c497eabd516b514
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/MetaAxolotlBucket.java
@@ -0,0 +1,41 @@
+package io.papermc.paper.item.meta;
+
+import io.papermc.paper.inventory.item.properties.ItemProperties;
+import io.papermc.paper.property.MutablePropertyView;
+import org.bukkit.Material;
+import org.bukkit.entity.Axolotl;
+import org.bukkit.inventory.meta.AxolotlBucketMeta;
+import org.jetbrains.annotations.NotNull;
+
+public class MetaAxolotlBucket extends PaperMeta implements AxolotlBucketMeta {
+
+    public MetaAxolotlBucket(MutablePropertyView mutable, Material material) {
+        super(mutable, material);
+    }
+
+    @Override
+    public @NotNull Axolotl.Variant getVariant() {
+        return this.propertyHolder.get(ItemProperties.VARIANT);
+    }
+
+    @Override
+    public void setVariant(Axolotl.@NotNull Variant variant) {
+        this.propertyHolder.set(ItemProperties.VARIANT, variant);
+    }
+
+    @Override
+    public boolean hasVariant() {
+        return this.propertyHolder.hasProperty(ItemProperties.VARIANT);
+    }
+
+    @Override
+    public @NotNull MetaAxolotlBucket clone() {
+        return new MetaAxolotlBucket(this.propertyHolder.clone(), material);
+    }
+
+    @Override
+    public void migrateFrom(MutablePropertyView mutable) {
+        this.propertyHolder.unset(ItemProperties.VARIANT);
+        this.propertyHolder.unset(ItemProperties.ENTITY_TAG);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/MetaBanner.java b/src/main/java/io/papermc/paper/item/meta/MetaBanner.java
new file mode 100644
index 0000000000000000000000000000000000000000..485df07fff3a01a7dc56f9aa9d8958424c9d6b0a
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/MetaBanner.java
@@ -0,0 +1,87 @@
+package io.papermc.paper.item.meta;
+
+import io.papermc.paper.inventory.item.properties.ItemProperties;
+import io.papermc.paper.property.MutablePropertyView;
+import org.bukkit.DyeColor;
+import org.bukkit.Material;
+import org.bukkit.block.banner.Pattern;
+import org.bukkit.inventory.meta.BannerMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.List;
+
+public class MetaBanner extends PaperMeta implements BannerMeta {
+
+    public MetaBanner(MutablePropertyView mutable, Material material) {
+        super(mutable, material);
+    }
+
+    @Override
+    public @NotNull MetaBanner clone() {
+        return new MetaBanner(this.propertyHolder.clone(), material);
+    }
+
+    @Override
+    public void migrateFrom(MutablePropertyView mutable) {
+        this.propertyHolder.unset(ItemProperties.BLOCK_ENTITY_TAG);
+    }
+
+    @Override
+    public @Nullable DyeColor getBaseColor() {
+        return this.getFromPropertyPath(ItemProperties.BLOCK_ENTITY_TAG, PaperMetaProperties.BASE);
+    }
+
+    @Override
+    public void setBaseColor(@Nullable DyeColor color) {
+        this.setFromPropertyPath(ItemProperties.BLOCK_ENTITY_TAG, PaperMetaProperties.BASE, color);
+    }
+
+    @Override
+    public @NotNull List<Pattern> getPatterns() {
+        return this.getFromPropertyPath(ItemProperties.BLOCK_ENTITY_TAG, PaperMetaProperties.PATTERNS);
+    }
+
+    @Override
+    public void setPatterns(@NotNull List<Pattern> patterns) {
+        this.setFromPropertyPath(ItemProperties.BLOCK_ENTITY_TAG, PaperMetaProperties.PATTERNS, patterns);
+    }
+
+    @Override
+    public void addPattern(@NotNull Pattern pattern) {
+        MutablePropertyView holder = this.propertyHolder.getOrCreate(ItemProperties.BLOCK_ENTITY_TAG);
+        List<Pattern> patterns = holder.getOrCreate(PaperMetaProperties.PATTERNS);
+        patterns.add(pattern);
+    }
+
+    @Override
+    public @NotNull Pattern getPattern(int i) {
+        MutablePropertyView holder = this.propertyHolder.getOrCreate(ItemProperties.BLOCK_ENTITY_TAG);
+        List<Pattern> patterns = holder.getOrCreate(PaperMetaProperties.PATTERNS);
+        return patterns.get(i);
+    }
+
+    @Override
+    public @NotNull Pattern removePattern(int i) {
+        MutablePropertyView holder = this.propertyHolder.getOrCreate(ItemProperties.BLOCK_ENTITY_TAG);
+        List<Pattern> patterns = holder.getOrCreate(PaperMetaProperties.PATTERNS);
+
+        return patterns.remove(i);
+    }
+
+    @Override
+    public void setPattern(int i, @NotNull Pattern pattern) {
+        MutablePropertyView holder = this.propertyHolder.getOrCreate(ItemProperties.BLOCK_ENTITY_TAG);
+        List<Pattern> patterns = holder.getOrCreate(PaperMetaProperties.PATTERNS);
+
+        patterns.set(i, pattern);
+    }
+
+    @Override
+    public int numberOfPatterns() {
+        MutablePropertyView holder = this.propertyHolder.getOrCreate(ItemProperties.BLOCK_ENTITY_TAG);
+        List<Pattern> patterns = holder.getOrCreate(PaperMetaProperties.PATTERNS);
+
+        return patterns.size();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/MetaBlockState.java b/src/main/java/io/papermc/paper/item/meta/MetaBlockState.java
new file mode 100644
index 0000000000000000000000000000000000000000..053f2aad4c4f376178266b8146663c16dbfddf56
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/MetaBlockState.java
@@ -0,0 +1,103 @@
+package io.papermc.paper.item.meta;
+
+import com.destroystokyo.paper.MaterialSetTag;
+import io.papermc.paper.inventory.item.properties.ItemProperties;
+import io.papermc.paper.property.MutablePropertyView;
+import io.papermc.paper.property.nbt.AdapterContext;
+import io.papermc.paper.property.nbt.NbtPropertyHolder;
+import org.apache.commons.lang.Validate;
+import org.bukkit.DyeColor;
+import org.bukkit.Material;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.block.CraftBanner;
+import org.bukkit.craftbukkit.block.CraftBlockEntityState;
+import org.bukkit.craftbukkit.block.CraftBlockStates;
+import org.bukkit.inventory.meta.BlockStateMeta;
+import org.jetbrains.annotations.NotNull;
+
+public class MetaBlockState extends PaperMeta implements BlockStateMeta {
+
+    public MetaBlockState(MutablePropertyView mutable, Material material) {
+        super(mutable, material);
+    }
+
+    @Override
+    public boolean hasBlockState() {
+        return this.propertyHolder.hasProperty(ItemProperties.BLOCK_ENTITY_TAG);
+    }
+
+    @Override
+    public BlockState getBlockState() {
+        MutablePropertyView holder = this.propertyHolder.get(ItemProperties.BLOCK_ENTITY_TAG);
+
+        Material stateMaterial = (this.material != Material.SHIELD) ? this.material : shieldToBannerHack(holder); // Only actually used for jigsaws
+        if (holder != null) {
+            if (this.material == Material.SHIELD) {
+                holder.set(PaperMetaProperties.IDENTIFIER, "minecraft:banner");
+            } else if (this.material == Material.BEE_NEST || this.material == Material.BEEHIVE) {
+                holder.set(PaperMetaProperties.IDENTIFIER, "minecraft:beehive");
+            } else if (MaterialSetTag.SHULKER_BOXES.isTagged(this.material)) {
+                holder.set(PaperMetaProperties.IDENTIFIER, "minecraft:shulker_box");
+            }
+        }
+
+        // This is expected to always return a CraftBlockEntityState for the passed material:
+        return CraftBlockStates.getBlockState(stateMaterial, null); // TODO
+    }
+
+    @Override
+    public void setBlockState(BlockState blockState) {
+        Validate.notNull(blockState, "blockState must not be null");
+
+        Material stateMaterial = (this.material != Material.SHIELD) ? this.material : shieldToBannerHack(this.propertyHolder.get(ItemProperties.BLOCK_ENTITY_TAG));
+        Class<?> blockStateType = CraftBlockStates.getBlockStateType(stateMaterial);
+        Validate.isTrue(blockStateType == blockState.getClass() && blockState instanceof CraftBlockEntityState, "Invalid blockState for " + this.material);
+
+        MutablePropertyView mutable = NbtPropertyHolder.simpleBlob(((CraftBlockEntityState) blockState).getSnapshotNBT(), AdapterContext.empty());
+        this.propertyHolder.set(ItemProperties.BLOCK_ENTITY_TAG, mutable);
+        // Set shield base
+        if (this.material == Material.SHIELD) {
+            mutable.set(PaperMetaProperties.BASE, ((CraftBanner) blockState).getBaseColor());
+        }
+    }
+
+    private static Material shieldToBannerHack(MutablePropertyView tag) {
+        if (tag == null) {
+            return Material.WHITE_BANNER;
+        }
+
+        DyeColor colorValue = tag.get(PaperMetaProperties.BASE);
+        if (colorValue == null) {
+            return Material.WHITE_BANNER;
+        }
+
+        return switch (colorValue) {
+            case WHITE -> Material.WHITE_BANNER;
+            case ORANGE -> Material.ORANGE_BANNER;
+            case MAGENTA -> Material.MAGENTA_BANNER;
+            case LIGHT_BLUE -> Material.LIGHT_BLUE_BANNER;
+            case YELLOW -> Material.YELLOW_BANNER;
+            case LIME -> Material.LIME_BANNER;
+            case PINK -> Material.PINK_BANNER;
+            case GRAY -> Material.GRAY_BANNER;
+            case LIGHT_GRAY -> Material.LIGHT_GRAY_BANNER;
+            case CYAN -> Material.CYAN_BANNER;
+            case PURPLE -> Material.PURPLE_BANNER;
+            case BLUE -> Material.BLUE_BANNER;
+            case BROWN -> Material.BROWN_BANNER;
+            case GREEN -> Material.GREEN_BANNER;
+            case RED -> Material.RED_BANNER;
+            case BLACK -> Material.BLACK_BANNER;
+        };
+    }
+
+    @Override
+    public @NotNull MetaBlockState clone() {
+        return new MetaBlockState(this.propertyHolder.clone(), material);
+    }
+
+    @Override
+    public void migrateFrom(MutablePropertyView mutable) {
+        this.propertyHolder.unset(ItemProperties.BLOCK_ENTITY_TAG);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/MetaBook.java b/src/main/java/io/papermc/paper/item/meta/MetaBook.java
new file mode 100644
index 0000000000000000000000000000000000000000..de6a88c538f2d1115911c546420d67564713b8a9
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/MetaBook.java
@@ -0,0 +1,473 @@
+package io.papermc.paper.item.meta;
+
+import com.google.common.collect.ImmutableList;
+import io.leangen.geantyref.TypeFactory;
+import io.papermc.paper.inventory.item.properties.ItemProperties;
+import io.papermc.paper.item.property.ItemPropertyRegistration;
+import io.papermc.paper.property.MutablePropertyView;
+import io.papermc.paper.property.PropertyKey;
+import io.papermc.paper.property.nbt.NbtPropertyHolder;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.chat.ComponentSerializer;
+import net.minecraft.nbt.CompoundTag;
+import org.apache.commons.lang.Validate;
+import org.bukkit.Material;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.inventory.meta.BookMeta;
+import org.jetbrains.annotations.NotNull;
+import org.spigotmc.ValidateUtils;
+
+import java.util.AbstractList;
+import java.util.Arrays;
+import java.util.List;
+
+// TODO: Cleanup, I hate all of this
+public class MetaBook extends PaperMeta implements BookMeta {
+
+
+    static final int MAX_PAGES = 100;
+    static final int MAX_PAGE_LENGTH = 320; // 256 limit + 64 characters to allow for psuedo colour codes
+    static final int MAX_TITLE_LENGTH = 32;
+
+
+    public MetaBook(MutablePropertyView mutable, Material material) {
+        super(mutable, material);
+    }
+
+    @Override
+    public boolean hasAuthor() {
+        return MetaBook.this.propertyHolder.hasProperty(ItemProperties.AUTHOR);
+    }
+
+    @Override
+    public boolean hasTitle() {
+        return MetaBook.this.propertyHolder.hasProperty(ItemProperties.TITLE);
+    }
+
+    @Override
+    public boolean hasPages() {
+        List<Component> pages = this.propertyHolder.get(ItemProperties.PAGES);
+        return pages != null && !pages.isEmpty();
+    }
+
+    @Override
+    public boolean hasGeneration() {
+        return this.propertyHolder.hasProperty(ItemProperties.GENERATION);
+    }
+
+    @Override
+    public String getTitle() {
+        String author = MetaBook.this.propertyHolder.get(ItemProperties.AUTHOR);
+        if (author != null) {
+            author = ValidateUtils.limit(author, io.papermc.paper.configuration.GlobalConfiguration.get().itemValidation.book.author);
+        }
+
+        return author;
+    }
+
+    @Override
+    public boolean setTitle(final String title) {
+        if (title == null) {
+            MetaBook.this.propertyHolder.unset(ItemProperties.AUTHOR);
+            return true;
+        } else if (title.length() > MAX_TITLE_LENGTH) {
+            return false;
+        }
+
+        MetaBook.this.propertyHolder.set(ItemProperties.AUTHOR, title);
+        return true;
+    }
+
+    @Override
+    public String getAuthor() {
+        String author = MetaBook.this.propertyHolder.get(ItemProperties.AUTHOR);
+        if (author != null) {
+            author = ValidateUtils.limit(author, io.papermc.paper.configuration.GlobalConfiguration.get().itemValidation.book.author);
+        }
+
+        return author;
+    }
+
+    @Override
+    public void setAuthor(String author) {
+        if (author != null) {
+            author = ValidateUtils.limit(author, io.papermc.paper.configuration.GlobalConfiguration.get().itemValidation.book.author);
+        }
+
+        MetaBook.this.propertyHolder.set(ItemProperties.AUTHOR, author);
+    }
+
+    @Override
+    public Generation getGeneration() {
+        if (!MetaBook.this.propertyHolder.hasProperty(ItemProperties.GENERATION)) {
+            return null;
+        }
+
+        int generation = MetaBook.this.propertyHolder.get(ItemProperties.GENERATION);
+        return Generation.values()[generation];
+    }
+
+    @Override
+    public void setGeneration(Generation generation) {
+        if (generation == null) {
+            MetaBook.this.propertyHolder.unset(ItemProperties.GENERATION);
+        } else {
+            MetaBook.this.propertyHolder.set(ItemProperties.GENERATION, generation.ordinal());
+        }
+    }
+
+    @Override
+    public net.kyori.adventure.text.Component title() {
+        String title = MetaBook.this.propertyHolder.get(ItemProperties.TITLE);
+        return title == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(title);
+    }
+
+    @Override
+    public org.bukkit.inventory.meta.BookMeta title(net.kyori.adventure.text.Component title) {
+        this.setTitle(title == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(title));
+        return this;
+    }
+
+    @Override
+    public net.kyori.adventure.text.Component author() {
+        String author = MetaBook.this.propertyHolder.get(ItemProperties.AUTHOR);
+        return author == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(author);
+    }
+
+    @Override
+    public org.bukkit.inventory.meta.BookMeta author(net.kyori.adventure.text.Component author) {
+        this.setAuthor(author == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(author));
+        return this;
+    }
+
+    @Override
+    public net.kyori.adventure.text.Component page(final int page) {
+        Validate.isTrue(isValidPage(page), "Invalid page number");
+        return MetaBook.this.propertyHolder.get(this.getPageProperty()).get(page);
+    }
+
+    @Override
+    public void page(final int page, net.kyori.adventure.text.Component data) {
+        if (!isValidPage(page)) {
+            throw new IllegalArgumentException("Invalid page number " + page + "/" + this.getPageCount());
+        }
+        List<Component> pages = MetaBook.this.propertyHolder.get(this.getPageProperty());
+
+        if (data == null) {
+            data = net.kyori.adventure.text.Component.empty();
+        }
+        pages.set(page - 1, data);
+    }
+
+    @Override
+    public List<net.kyori.adventure.text.Component> pages() {
+        List<Component> pages = MetaBook.this.propertyHolder.get(this.getPageProperty());
+        if (pages == null) {
+            return List.of();
+        }
+
+        return pages;
+    }
+
+    @Override
+    public BookMeta pages(List<net.kyori.adventure.text.Component> pages) {
+        MetaBook.this.propertyHolder.unset(this.getPageProperty());
+        for (net.kyori.adventure.text.Component page : pages) {
+            addPages(page);
+        }
+        return this;
+    }
+
+    @Override
+    public BookMeta pages(net.kyori.adventure.text.Component... pages) {
+        MetaBook.this.propertyHolder.unset(this.getPageProperty());
+        addPages(pages);
+        return this;
+    }
+
+    @Override
+    public void addPages(net.kyori.adventure.text.Component... pages) {
+        List<Component> pageList = MetaBook.this.propertyHolder.get(this.getPageProperty());
+        for (net.kyori.adventure.text.Component page : pages) {
+            if (pageList.size() >= MAX_PAGES) {
+                return;
+            }
+
+            if (page == null) {
+                page = net.kyori.adventure.text.Component.empty();
+            }
+
+            pageList.add(page);
+        }
+    }
+
+    public PropertyKey<List<Component>> getPageProperty() {
+        return ItemProperties.PAGES;
+    }
+
+    class CraftMetaBookBuilder implements BookMetaBuilder {
+        private net.kyori.adventure.text.Component title = null;
+        private net.kyori.adventure.text.Component author = null;
+        private final List<net.kyori.adventure.text.Component> pages = new java.util.ArrayList<>();
+
+        @Override
+        public BookMetaBuilder title(net.kyori.adventure.text.Component title) {
+            this.title = title;
+            return this;
+        }
+
+        @Override
+        public BookMetaBuilder author(net.kyori.adventure.text.Component author) {
+            this.author = author;
+            return this;
+        }
+
+        @Override
+        public BookMetaBuilder addPage(net.kyori.adventure.text.Component page) {
+            this.pages.add(page);
+            return this;
+        }
+
+        @Override
+        public BookMetaBuilder pages(net.kyori.adventure.text.Component... pages) {
+            java.util.Collections.addAll(this.pages, pages);
+            return this;
+        }
+
+        @Override
+        public BookMetaBuilder pages(java.util.Collection<net.kyori.adventure.text.Component> pages) {
+            this.pages.addAll(pages);
+            return this;
+        }
+
+        @Override
+        public BookMeta build() {
+            return this.build(title, author, pages);
+        }
+
+        protected BookMeta build(net.kyori.adventure.text.Component title, net.kyori.adventure.text.Component author, java.util.List<net.kyori.adventure.text.Component> pages) {
+            MetaBook metaBook = new MetaBook(NbtPropertyHolder.simpleBlob(new CompoundTag(), ItemPropertyRegistration.ITEM_CONTEXT), Material.WRITTEN_BOOK);
+            metaBook.propertyHolder.set(ItemProperties.TITLE, LegacyComponentSerializer.legacySection().serialize(title));
+            metaBook.propertyHolder.set(ItemProperties.AUTHOR, LegacyComponentSerializer.legacySection().serialize(author));
+            metaBook.propertyHolder.set(ItemProperties.PAGES, pages);
+
+            return metaBook;
+        }
+    }
+
+    @Override
+    public BookMetaBuilder toBuilder() {
+        return new MetaBook.CraftMetaBookBuilder();
+    }
+
+    @Override
+    public String getPage(final int page) {
+        Validate.isTrue(this.isValidPage(page), "Invalid page number");
+        // assert: pages != null
+        return this.convertDataToPlainPage(MetaBook.this.propertyHolder.get(PAGES_LEGACY).get(page - 1));
+    }
+
+    @Override
+    public void setPage(final int page, final String text) {
+        if (!this.isValidPage(page)) {
+            throw new IllegalArgumentException("Invalid page number " + page + "/" + this.getPageCount());
+        }
+        // assert: pages != null
+
+        String newText = this.validatePage(text);
+        MetaBook.this.propertyHolder.get(PAGES_LEGACY).set(page - 1, this.convertPlainPageToData(newText));
+    }
+
+    @Override
+    public void setPages(final String... pages) {
+        this.setPages(Arrays.asList(pages));
+    }
+
+    @Override
+    public void addPage(final String... pages) {
+        for (String page : pages) {
+            page = this.validatePage(page);
+            this.internalAddPage(this.convertPlainPageToData(page));
+        }
+    }
+
+    String validatePage(String page) {
+        if (page == null) {
+            page = "";
+        } else if (page.length() > MAX_PAGE_LENGTH) {
+            page = page.substring(0, MAX_PAGE_LENGTH);
+        }
+        return page;
+    }
+
+    @Override
+    public int getPageCount() {
+        List<String> pages = MetaBook.this.propertyHolder.get(PAGES_LEGACY);
+        return (pages == null) ? 0 : pages.size();
+    }
+
+    @Override
+    public List<String> getPages() {
+        List<String> pages = MetaBook.this.propertyHolder.getOrDefault(PAGES_LEGACY, List.of());
+
+        return pages.stream().map(this::convertDataToPlainPage).collect(ImmutableList.toImmutableList());
+    }
+
+    @Override
+    public void setPages(List<String> pages) {
+        MetaBook.this.propertyHolder.unset(PAGES_LEGACY);
+        if (pages.isEmpty()) {
+            return;
+        }
+
+        for (String page : pages) {
+            this.addPage(page);
+        }
+    }
+
+    protected String convertPlainPageToData(String page) {
+        // Writable books store their data as plain Strings, so we don't need to convert anything.
+        return page;
+    }
+
+    protected String convertDataToPlainPage(String pageData) {
+        // pageData is expected to already be a plain String.
+        return pageData;
+    }
+
+
+    // Legacy Spigot IMPL
+    private static final PropertyKey<List<String>> PAGES_LEGACY = PropertyKey.of("pages", TypeFactory.parameterizedClass(List.class, String.class));
+
+    private final BookMeta.Spigot spigot = new SpigotMeta();
+
+    private class SpigotMeta extends BookMeta.Spigot {
+
+        private String pageToJSON(String page) {
+            if (MetaBook.this instanceof MetaBookSigned) {
+                // Page data is already in JSON format:
+                return page;
+            } else {
+                // Convert from plain String to JSON (similar to conversion between writable books and written books):
+                net.minecraft.network.chat.Component component = CraftChatMessage.fromString(page, true, true)[0];
+                return CraftChatMessage.toJSON(component);
+            }
+        }
+
+        private String componentsToPage(BaseComponent[] components) {
+            // asserted: components != null
+            if (MetaBook.this instanceof MetaBookSigned) {
+                // Pages are in JSON format:
+                return ComponentSerializer.toString(components);
+            } else {
+                // Convert component to plain String:
+                return CraftChatMessage.fromJSONComponent(ComponentSerializer.toString(components));
+            }
+        }
+
+        @Override
+        public BaseComponent[] getPage(final int page) {
+            Validate.isTrue(MetaBook.this.isValidPage(page), "Invalid page number");
+            return ComponentSerializer.parse(this.pageToJSON(MetaBook.this.propertyHolder.get(PAGES_LEGACY).get(page - 1)));
+        }
+
+        @Override
+        public void setPage(final int page, final BaseComponent... text) {
+            if (!MetaBook.this.isValidPage(page)) {
+                throw new IllegalArgumentException("Invalid page number " + page + "/" + MetaBook.this.getPageCount());
+            }
+
+            BaseComponent[] newText = text == null ? new BaseComponent[0] : text;
+            MetaBook.this.propertyHolder.get(PAGES_LEGACY).set(page - 1, this.componentsToPage(newText));
+        }
+
+        @Override
+        public void setPages(final BaseComponent[]... pages) {
+            this.setPages(Arrays.asList(pages));
+        }
+
+        @Override
+        public void addPage(final BaseComponent[]... pages) {
+            for (BaseComponent[] page : pages) {
+                if (page == null) {
+                    page = new BaseComponent[0];
+                }
+
+                MetaBook.this.internalAddPage(this.componentsToPage(page));
+            }
+        }
+
+        @Override
+        public List<BaseComponent[]> getPages() {
+            List<String> pages = MetaBook.this.propertyHolder.get(PAGES_LEGACY);
+            if (pages == null || pages.isEmpty()) {
+                return List.of();
+            }
+
+            return new AbstractList<BaseComponent[]>() {
+
+                @Override
+                public BaseComponent[] get(int index) {
+                    return ComponentSerializer.parse(MetaBook.SpigotMeta.this.pageToJSON(pages.get(index)));
+                }
+
+                @Override
+                public int size() {
+                    return pages.size();
+                }
+            };
+        }
+
+        @Override
+        public void setPages(List<BaseComponent[]> pages) {
+            MetaBook.this.propertyHolder.unset(PAGES_LEGACY);
+            if (pages.isEmpty()) {
+                return;
+            }
+
+            for (BaseComponent[] page : pages) {
+                this.addPage(page);
+            }
+        }
+    }
+
+    // Utilities
+    private boolean isValidPage(int page) {
+        return page > 0 && page <= this.getPageCount();
+    }
+
+    private void internalAddPage(String page) {
+        // asserted: page != null
+        List<String> pages = MetaBook.this.propertyHolder.get(PAGES_LEGACY);
+        if (pages != null && pages.size() >= MAX_PAGES) {
+            return;
+        } else if (pages == null) {
+            pages = MetaBook.this.propertyHolder.create(PAGES_LEGACY);
+        }
+
+        pages.add(page);
+    }
+
+    @Override
+    public BookMeta.Spigot spigot() {
+        return this.spigot;
+    }
+
+    @Override
+    public @NotNull MetaBook clone() {
+        return new MetaBook(this.propertyHolder.clone(), material);
+    }
+
+    @Override
+    public void migrateFrom(MutablePropertyView mutable) {
+        this.propertyHolder.unset(ItemProperties.TITLE);
+        this.propertyHolder.unset(ItemProperties.TITLE_FILTERED);
+        this.propertyHolder.unset(ItemProperties.AUTHOR);
+        this.propertyHolder.unset(ItemProperties.PAGES);
+        this.propertyHolder.unset(ItemProperties.PAGES_FILTERED);
+        this.propertyHolder.unset(ItemProperties.GENERATION);
+        this.propertyHolder.unset(ItemProperties.RESOLVED);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/MetaBookSigned.java b/src/main/java/io/papermc/paper/item/meta/MetaBookSigned.java
new file mode 100644
index 0000000000000000000000000000000000000000..ac6c747d85cb4537ee8c140a691d15709a1ac3ea
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/MetaBookSigned.java
@@ -0,0 +1,40 @@
+package io.papermc.paper.item.meta;
+
+import io.papermc.paper.inventory.item.properties.ItemProperties;
+import io.papermc.paper.property.MutablePropertyView;
+import io.papermc.paper.property.PropertyKey;
+import net.kyori.adventure.text.Component;
+import org.bukkit.Material;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.inventory.meta.BookMeta;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.List;
+
+public class MetaBookSigned extends MetaBook implements BookMeta {
+
+    public MetaBookSigned(MutablePropertyView mutable, Material material) {
+        super(mutable, material);
+    }
+
+    @Override
+    protected String convertPlainPageToData(String page) {
+        return CraftChatMessage.fromStringToJSON(page, true);
+    }
+
+    @Override
+    protected String convertDataToPlainPage(String pageData) {
+        return CraftChatMessage.fromJSONComponent(pageData);
+    }
+
+    @Override
+    public PropertyKey<List<Component>> getPageProperty() {
+        return ItemProperties.PAGES;
+    }
+
+    @Override
+    public @NotNull MetaBookSigned clone() {
+        return new MetaBookSigned(this.propertyHolder.clone(), material);
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/MetaBundle.java b/src/main/java/io/papermc/paper/item/meta/MetaBundle.java
new file mode 100644
index 0000000000000000000000000000000000000000..340f2ebd8dcaf4b39a6b39cc454a10fde36efbd9
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/MetaBundle.java
@@ -0,0 +1,66 @@
+package io.papermc.paper.item.meta;
+
+import io.papermc.paper.inventory.item.properties.ItemProperties;
+import io.papermc.paper.property.MutablePropertyView;
+import org.bukkit.Material;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.BundleMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Collections;
+import java.util.List;
+
+public class MetaBundle extends PaperMeta implements BundleMeta {
+
+    public MetaBundle(MutablePropertyView mutable, Material material) {
+        super(mutable, material);
+    }
+
+    @Override
+    boolean isEmpty() {
+        return super.isEmpty() && this.isBundleEmpty();
+    }
+
+    boolean isBundleEmpty() {
+        return !(this.hasItems());
+    }
+
+    @Override
+    public boolean hasItems() {
+        List<ItemStack> items = this.propertyHolder.get(ItemProperties.ITEMS);
+        return items != null && !items.isEmpty();
+    }
+
+    @Override
+    public @NotNull List<ItemStack> getItems() {
+        List<ItemStack> items = this.propertyHolder.get(ItemProperties.ITEMS);
+        if (items == null) {
+            return List.of();
+        }
+
+
+        return Collections.unmodifiableList(items);
+    }
+
+    @Override
+    public void setItems(@Nullable List<ItemStack> items) {
+        this.propertyHolder.set(ItemProperties.ITEMS, items);
+    }
+
+    @Override
+    public void addItem(@NotNull ItemStack item) {
+        List<ItemStack> items = this.propertyHolder.getOrCreate(ItemProperties.ITEMS);
+        items.add(item);
+    }
+
+    @Override
+    public @NotNull MetaBundle clone() {
+        return new MetaBundle(this.propertyHolder.clone(), this.material);
+    }
+
+    @Override
+    public void migrateFrom(MutablePropertyView mutable) {
+        this.propertyHolder.unset(ItemProperties.ITEMS);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/MetaCompass.java b/src/main/java/io/papermc/paper/item/meta/MetaCompass.java
new file mode 100644
index 0000000000000000000000000000000000000000..ad94ba66f02acd349f47f6f01588f14dc290b378
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/MetaCompass.java
@@ -0,0 +1,83 @@
+package io.papermc.paper.item.meta;
+
+import io.papermc.paper.inventory.item.properties.ItemProperties;
+import io.papermc.paper.math.Position;
+import io.papermc.paper.property.MutablePropertyView;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.World;
+import org.bukkit.inventory.meta.CompassMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public class MetaCompass extends PaperMeta implements CompassMeta {
+
+    public MetaCompass(MutablePropertyView mutable, Material material) {
+        super(mutable, material);
+    }
+
+    @Override
+    boolean isEmpty() {
+        return super.isEmpty() && this.isCompassEmpty();
+    }
+
+    boolean isCompassEmpty() {
+        return !(this.hasLodestone() || this.hasLodestoneTracked());
+    }
+
+    boolean hasLodestoneTracked() {
+        return this.propertyHolder.hasProperty(ItemProperties.LODESTONE_TRACKED);
+    }
+
+    @Override
+    public boolean hasLodestone() {
+        return this.propertyHolder.hasProperty(ItemProperties.LODESTONE_DIMENSION);
+    }
+
+    @Override
+    public @Nullable Location getLodestone() {
+        NamespacedKey dimension = this.propertyHolder.get(ItemProperties.LODESTONE_DIMENSION);
+        if (dimension == null) {
+            return null;
+        }
+
+        World world = Bukkit.getWorld(dimension);
+
+        Position position = this.propertyHolder.get(ItemProperties.LODESTONE_POS);
+        if (position == null) {
+            return null;
+        }
+
+        return position.toLocation(world);
+    }
+
+    @Override
+    public void setLodestone(@Nullable Location lodestone) {
+        this.propertyHolder.set(ItemProperties.LODESTONE_POS, lodestone);
+        this.propertyHolder.set(ItemProperties.LODESTONE_DIMENSION, lodestone.getWorld().getKey());
+    }
+
+    @Override
+    public boolean isLodestoneTracked() {
+        return this.propertyHolder.getOrDefault(ItemProperties.LODESTONE_TRACKED, false);
+    }
+
+    @Override
+    public void setLodestoneTracked(boolean tracked) {
+        this.propertyHolder.set(ItemProperties.LODESTONE_TRACKED, tracked);
+    }
+
+    @Override
+    public @NotNull MetaCompass clone() {
+        return new MetaCompass(this.propertyHolder.clone(), this.material);
+    }
+
+    @Override
+    public void migrateFrom(MutablePropertyView mutable) {
+        this.propertyHolder.unset(ItemProperties.LODESTONE_DIMENSION);
+        this.propertyHolder.unset(ItemProperties.LODESTONE_POS);
+        this.propertyHolder.unset(ItemProperties.LODESTONE_TRACKED);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/MetaCrossbow.java b/src/main/java/io/papermc/paper/item/meta/MetaCrossbow.java
new file mode 100644
index 0000000000000000000000000000000000000000..2e31f74c6ed9b7c8dc4bfc5c2f198adaa06f9a3c
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/MetaCrossbow.java
@@ -0,0 +1,76 @@
+package io.papermc.paper.item.meta;
+
+import com.google.common.base.Preconditions;
+import io.papermc.paper.inventory.item.properties.ItemProperties;
+import io.papermc.paper.property.MutablePropertyView;
+import net.minecraft.world.item.ArrowItem;
+import org.bukkit.Material;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.CrossbowMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.List;
+
+public class MetaCrossbow extends PaperMeta implements CrossbowMeta {
+
+    public MetaCrossbow(MutablePropertyView mutable, Material material) {
+        super(mutable, material);
+    }
+
+    @Override
+    boolean isEmpty() {
+        return super.isEmpty() && this.isCrossbowEmpty();
+    }
+
+    boolean isCrossbowEmpty() {
+        return !(this.hasChargedProjectiles());
+    }
+
+    @Override
+    public boolean hasChargedProjectiles() {
+        List<ItemStack> effects = this.propertyHolder.get(ItemProperties.CHARGED_PROJECTILES);
+        return effects != null && !effects.isEmpty();
+    }
+
+    @Override
+    public @NotNull List<ItemStack> getChargedProjectiles() {
+        return this.propertyHolder.getOrDefault(ItemProperties.CHARGED_PROJECTILES, List.of());
+    }
+
+    @Override
+    public void setChargedProjectiles(@Nullable List<ItemStack> projectiles) {
+        this.propertyHolder.unset(ItemProperties.CHARGED_PROJECTILES);
+        this.propertyHolder.set(ItemProperties.CHARGED, false);
+
+        if (projectiles == null) {
+            return;
+        }
+
+        for (ItemStack i : projectiles) {
+            this.addChargedProjectile(i);
+        }
+    }
+
+    @Override
+    public void addChargedProjectile(@NotNull ItemStack item) {
+        Preconditions.checkArgument(item != null, "item");
+        Preconditions.checkArgument(item.getType() == Material.FIREWORK_ROCKET || CraftMagicNumbers.getItem(item.getType()) instanceof ArrowItem, "Item %s is not an arrow or firework rocket", item);
+
+        this.propertyHolder.set(ItemProperties.CHARGED, true);
+        this.propertyHolder.getOrCreate(ItemProperties.CHARGED_PROJECTILES).add(item);
+    }
+
+    @Override
+    public @NotNull MetaCrossbow clone() {
+        return new MetaCrossbow(this.propertyHolder.clone(), this.material);
+    }
+
+    @Override
+    public void migrateFrom(MutablePropertyView mutable) {
+        this.propertyHolder.unset(ItemProperties.CHARGED);
+        this.propertyHolder.unset(ItemProperties.CHARGED_PROJECTILES);
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/MetaEnchantmentStorage.java b/src/main/java/io/papermc/paper/item/meta/MetaEnchantmentStorage.java
new file mode 100644
index 0000000000000000000000000000000000000000..c4edd15df0d666be3ae08037feec59daccfb56ae
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/MetaEnchantmentStorage.java
@@ -0,0 +1,149 @@
+package io.papermc.paper.item.meta;
+
+import io.papermc.paper.inventory.item.properties.EnchantmentPair;
+import io.papermc.paper.inventory.item.properties.ItemProperties;
+import io.papermc.paper.property.MutablePropertyView;
+import org.bukkit.Material;
+import org.bukkit.enchantments.Enchantment;
+import org.bukkit.inventory.meta.EnchantmentStorageMeta;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+public class MetaEnchantmentStorage extends PaperMeta implements EnchantmentStorageMeta {
+
+    public MetaEnchantmentStorage(MutablePropertyView mutable, Material material) {
+        super(mutable, material);
+    }
+
+    @Override
+    boolean isEmpty() {
+        return super.isEmpty() && this.isEnchantedEmpty();
+    }
+
+    boolean isEnchantedEmpty() {
+        return !this.hasStoredEnchants();
+    }
+
+    @Override
+    public boolean hasStoredEnchant(Enchantment ench) {
+        List<EnchantmentPair> enchantments = this.propertyHolder.get(ItemProperties.STORED_ENCHANTMENTS);
+        if (enchantments == null) {
+            return false;
+        }
+
+        for (EnchantmentPair next : enchantments) {
+            if (next.enchantment() == ench) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    public int getStoredEnchantLevel(Enchantment ench) {
+        List<EnchantmentPair> enchantmentPairs = this.propertyHolder.get(ItemProperties.STORED_ENCHANTMENTS);
+        if (enchantmentPairs == null) {
+            return 0;
+        }
+        for (EnchantmentPair pair : enchantmentPairs) {
+            if (pair.enchantment() == ench) {
+                return pair.level();
+            }
+        }
+
+        return 0;
+    }
+
+    @Override
+    public Map<Enchantment, Integer> getStoredEnchants() {
+        List<EnchantmentPair> pairs = this.propertyHolder.getOrCreate(ItemProperties.STORED_ENCHANTMENTS);
+        Map<Enchantment, Integer> map = new HashMap<>();
+        for (EnchantmentPair enchantmentPair : pairs) {
+            map.put(enchantmentPair.enchantment(), enchantmentPair.level());
+        }
+
+        return map;
+    }
+
+    @Override
+    public boolean addStoredEnchant(Enchantment ench, int level, boolean ignoreRestrictions) {
+        if (ignoreRestrictions || level >= ench.getStartLevel() && level <= ench.getMaxLevel()) {
+            List<EnchantmentPair> enchantments = this.propertyHolder.getOrCreate(ItemProperties.STORED_ENCHANTMENTS);
+
+            EnchantmentPair oldValue = null;
+            int oldIndex = 0;
+            for (int i = 0; i < enchantments.size(); i++) {
+                EnchantmentPair value = enchantments.get(i);
+                if (value.enchantment() == ench) {
+                    oldValue = value;
+                    oldIndex = i;
+                    break;
+                }
+            }
+
+            if (oldValue == null) {
+                enchantments.add(new EnchantmentPair(ench, level));
+                return true;
+            } else {
+                enchantments.set(oldIndex, new EnchantmentPair(ench, level));
+                return oldValue.level() != level;
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    public boolean removeStoredEnchant(Enchantment ench) {
+        List<EnchantmentPair> enchantmentMap = this.propertyHolder.get(ItemProperties.STORED_ENCHANTMENTS);
+        if (enchantmentMap == null) {
+            return false;
+        }
+
+        Iterator<EnchantmentPair> iterator = enchantmentMap.listIterator();
+        while (iterator.hasNext()) {
+            EnchantmentPair next = iterator.next();
+            if (next.enchantment() == ench) {
+                iterator.remove();
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    public boolean hasStoredEnchants() {
+        return this.propertyHolder.hasProperty(ItemProperties.STORED_ENCHANTMENTS) && !this.propertyHolder.get(ItemProperties.STORED_ENCHANTMENTS).isEmpty();
+    }
+
+    @Override
+    public boolean hasConflictingStoredEnchant(Enchantment ench) {
+        if (!hasStoredEnchants()) {
+            return false;
+        }
+
+        for (EnchantmentPair enchant : this.propertyHolder.getOrDefault(ItemProperties.STORED_ENCHANTMENTS, List.of())) {
+            if (enchant.enchantment().conflictsWith(ench)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    public @NotNull MetaEnchantmentStorage clone() {
+        return new MetaEnchantmentStorage(this.propertyHolder.clone(), this.material);
+    }
+
+    @Override
+    public void migrateFrom(MutablePropertyView mutable) {
+        this.propertyHolder.unset(ItemProperties.STORED_ENCHANTMENTS);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/MetaFirework.java b/src/main/java/io/papermc/paper/item/meta/MetaFirework.java
new file mode 100644
index 0000000000000000000000000000000000000000..b20266aaea2224009507e6f520bf722329089ab4
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/MetaFirework.java
@@ -0,0 +1,109 @@
+package io.papermc.paper.item.meta;
+
+import io.papermc.paper.inventory.item.properties.ItemProperties;
+import io.papermc.paper.property.MutablePropertyView;
+import org.apache.commons.lang.Validate;
+import org.bukkit.FireworkEffect;
+import org.bukkit.Material;
+import org.bukkit.inventory.meta.FireworkMeta;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.List;
+
+public class MetaFirework extends PaperMeta implements FireworkMeta {
+
+    public MetaFirework(MutablePropertyView mutable, Material material) {
+        super(mutable, material);
+    }
+
+    @Override
+    boolean isEmpty() {
+        return super.isEmpty() && this.isFireworkEmpty();
+    }
+
+    boolean isFireworkEmpty() {
+        return !(this.hasEffects() || this.hasPower());
+    }
+
+    boolean hasPower() {
+        return this.getPower() != 0;
+    }
+
+    @Override
+    public boolean hasEffects() {
+        List<FireworkEffect> effects = this.propertyHolder.get(ItemProperties.EXPLOSIONS);
+        return effects != null && !effects.isEmpty();
+    }
+
+    @Override
+    public void addEffect(FireworkEffect effect) {
+        this.addEffects(List.of(effect));
+    }
+
+    @Override
+    public void addEffects(FireworkEffect... effects) {
+        if (effects.length == 0) {
+            return;
+        }
+
+        this.addEffects(List.of(effects));
+    }
+
+    @Override
+    public void addEffects(Iterable<FireworkEffect> effects) {
+        List<FireworkEffect> explosions = this.propertyHolder.getOrCreate(ItemProperties.EXPLOSIONS);
+        for (FireworkEffect fireworkEffect : effects) {
+            explosions.add(fireworkEffect);
+        }
+    }
+
+    @Override
+    public List<FireworkEffect> getEffects() {
+        return this.propertyHolder.get(ItemProperties.EXPLOSIONS);
+    }
+
+    @Override
+    public int getEffectsSize() {
+        List<FireworkEffect> effects = this.propertyHolder.get(ItemProperties.EXPLOSIONS);
+        return effects == null ? 0 : effects.size();
+    }
+
+    @Override
+    public void removeEffect(int index) {
+        List<FireworkEffect> effects = this.propertyHolder.get(ItemProperties.EXPLOSIONS);
+        if (effects == null) {
+            throw new IndexOutOfBoundsException("Index: " + index + ", Size: 0");
+        } else {
+            effects.remove(index);
+        }
+    }
+
+    @Override
+    public void clearEffects() {
+        this.propertyHolder.unset(ItemProperties.EXPLOSIONS);
+    }
+
+    @Override
+    public int getPower() {
+        return this.propertyHolder.getOrDefault(ItemProperties.FLIGHT, (byte) 0);
+    }
+
+    @Override
+    public void setPower(int power) {
+        Validate.isTrue(power >= 0, "Power cannot be less than zero: ", power);
+        Validate.isTrue(power < 0x80, "Power cannot be more than 127: ", power);
+        this.propertyHolder.set(ItemProperties.FLIGHT, (byte) power);
+    }
+
+
+    @Override
+    public @NotNull MetaFirework clone() {
+        return new MetaFirework(this.propertyHolder.clone(), this.material);
+    }
+
+    @Override
+    public void migrateFrom(MutablePropertyView mutable) {
+        this.propertyHolder.unset(ItemProperties.FLIGHT);
+        this.propertyHolder.unset(ItemProperties.EXPLOSIONS);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/MetaFireworkEffect.java b/src/main/java/io/papermc/paper/item/meta/MetaFireworkEffect.java
new file mode 100644
index 0000000000000000000000000000000000000000..3f7186a96f6bd6802a63060679b1f53813b450f8
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/MetaFireworkEffect.java
@@ -0,0 +1,50 @@
+package io.papermc.paper.item.meta;
+
+import io.papermc.paper.inventory.item.properties.ItemProperties;
+import io.papermc.paper.property.MutablePropertyView;
+import org.bukkit.FireworkEffect;
+import org.bukkit.Material;
+import org.bukkit.inventory.meta.FireworkEffectMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public class MetaFireworkEffect extends PaperMeta implements FireworkEffectMeta {
+
+    public MetaFireworkEffect(MutablePropertyView mutable, Material material) {
+        super(mutable, material);
+    }
+
+    @Override
+    boolean isEmpty() {
+        return super.isEmpty() && !this.hasChargeMeta();
+    }
+
+    boolean hasChargeMeta() {
+        return this.hasEffect();
+    }
+
+    @Override
+    public void setEffect(@Nullable FireworkEffect effect) {
+        this.propertyHolder.set(ItemProperties.EXPLOSION, effect);
+    }
+
+    @Override
+    public boolean hasEffect() {
+        return this.propertyHolder.hasProperty(ItemProperties.EXPLOSION);
+    }
+
+    @Override
+    public @Nullable FireworkEffect getEffect() {
+        return this.propertyHolder.get(ItemProperties.EXPLOSION);
+    }
+
+    @Override
+    public @NotNull MetaFireworkEffect clone() {
+        return new MetaFireworkEffect(this.propertyHolder.clone(), this.material);
+    }
+
+    @Override
+    public void migrateFrom(MutablePropertyView mutable) {
+        this.propertyHolder.unset(ItemProperties.EXPLOSION);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/MetaKnowledgeBook.java b/src/main/java/io/papermc/paper/item/meta/MetaKnowledgeBook.java
new file mode 100644
index 0000000000000000000000000000000000000000..3f4781396deb3dbdc3ea060c2e64ad1f213aed7a
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/MetaKnowledgeBook.java
@@ -0,0 +1,66 @@
+package io.papermc.paper.item.meta;
+
+import io.papermc.paper.inventory.item.properties.ItemProperties;
+import io.papermc.paper.property.MutablePropertyView;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.inventory.meta.KnowledgeBookMeta;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.List;
+
+public class MetaKnowledgeBook extends PaperMeta implements KnowledgeBookMeta {
+
+    static final int MAX_RECIPES = Short.MAX_VALUE;
+
+    public MetaKnowledgeBook(MutablePropertyView mutable, Material material) {
+        super(mutable, material);
+    }
+
+    @Override
+    boolean isEmpty() {
+        return super.isEmpty() && this.isBookEmpty();
+    }
+
+    boolean isBookEmpty() {
+        return !(this.hasRecipes());
+    }
+
+    @Override
+    public boolean hasRecipes() {
+        List<NamespacedKey> effects = this.propertyHolder.get(ItemProperties.RECIPES);
+        return effects != null && !effects.isEmpty();
+    }
+
+    @Override
+    public @NotNull List<NamespacedKey> getRecipes() {
+        return this.propertyHolder.getOrDefault(ItemProperties.RECIPES, List.of());
+    }
+
+    @Override
+    public void setRecipes(@NotNull List<NamespacedKey> recipes) {
+        this.propertyHolder.set(ItemProperties.RECIPES, recipes);
+    }
+
+    @Override
+    public void addRecipe(@NotNull NamespacedKey... recipes) {
+        List<NamespacedKey> keys = this.propertyHolder.getOrCreate(ItemProperties.RECIPES);
+        for (NamespacedKey key : recipes) {
+            if (keys.size() > MAX_RECIPES) {
+                break;
+            }
+
+            keys.add(key);
+        }
+    }
+
+    @Override
+    public @NotNull MetaKnowledgeBook clone() {
+        return new MetaKnowledgeBook(this.propertyHolder.clone(), this.material);
+    }
+
+    @Override
+    public void migrateFrom(MutablePropertyView mutable) {
+        this.propertyHolder.unset(ItemProperties.RECIPES);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/MetaLeatherArmor.java b/src/main/java/io/papermc/paper/item/meta/MetaLeatherArmor.java
new file mode 100644
index 0000000000000000000000000000000000000000..250c435b3aa1b42682ba08aecf13dbdee87b6ee1
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/MetaLeatherArmor.java
@@ -0,0 +1,57 @@
+package io.papermc.paper.item.meta;
+
+import io.papermc.paper.inventory.item.properties.ItemProperties;
+import io.papermc.paper.property.MutablePropertyView;
+import org.bukkit.Color;
+import org.bukkit.Material;
+import org.bukkit.inventory.meta.LeatherArmorMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public class MetaLeatherArmor extends PaperMeta implements LeatherArmorMeta {
+
+    private static final Color DEFAULT_LEATHER_COLOR = Color.fromRGB(0xA06540);
+
+    public MetaLeatherArmor(MutablePropertyView mutable, Material material) {
+        super(mutable, material);
+    }
+
+    @Override
+    boolean isEmpty() {
+        return super.isEmpty() && this.isLeatherArmorEmpty();
+    }
+
+    boolean isLeatherArmorEmpty() {
+        return !(this.hasColor());
+    }
+
+    boolean hasColor() {
+        Color color = this.getColor();
+        if (color == null) {
+            return false;
+        }
+
+        // LEGACY
+        return !DEFAULT_LEATHER_COLOR.equals(color);
+    }
+
+    @Override
+    public @Nullable Color getColor() {
+        return this.getFromPropertyPath(ItemProperties.DISPLAY, ItemProperties.COLOR);
+    }
+
+    @Override
+    public void setColor(@Nullable Color color) {
+        this.setFromPropertyPath(ItemProperties.DISPLAY, ItemProperties.COLOR, color);
+    }
+
+    @Override
+    public @NotNull MetaLeatherArmor clone() {
+        return new MetaLeatherArmor(this.propertyHolder.clone(), this.material);
+    }
+
+    @Override
+    public void migrateFrom(MutablePropertyView mutable) {
+        this.unsetInPropertyPath(ItemProperties.DISPLAY, ItemProperties.COLOR);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/MetaMap.java b/src/main/java/io/papermc/paper/item/meta/MetaMap.java
new file mode 100644
index 0000000000000000000000000000000000000000..afb5b1ba4f80127ea4c57dae2eff4a30b62655fe
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/MetaMap.java
@@ -0,0 +1,119 @@
+package io.papermc.paper.item.meta;
+
+import com.google.common.base.Preconditions;
+import io.papermc.paper.inventory.item.properties.ItemProperties;
+import io.papermc.paper.property.MutablePropertyView;
+import org.bukkit.Bukkit;
+import org.bukkit.Color;
+import org.bukkit.Material;
+import org.bukkit.inventory.meta.MapMeta;
+import org.bukkit.map.MapView;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public class MetaMap extends PaperMeta implements MapMeta {
+
+    public MetaMap(MutablePropertyView mutable, Material material) {
+        super(mutable, material);
+    }
+
+    @Override
+    boolean isEmpty() {
+        return super.isEmpty() && this.isMapEmpty();
+    }
+
+    boolean isMapEmpty() {
+        return !(this.hasMapId() || this.hasScaling() | this.hasLocationName() || this.hasColor());
+    }
+
+    @Override
+    public boolean hasMapId() {
+        return this.propertyHolder.hasProperty(ItemProperties.MAP_ID);
+    }
+
+    @Override
+    public int getMapId() {
+        Integer mapId = this.propertyHolder.get(ItemProperties.MAP_ID);
+        Preconditions.checkState(mapId != null, "Item does not have map associated - check hasMapView() first!");
+
+        return mapId.intValue();
+    }
+
+    @Override
+    public void setMapId(int id) {
+        this.propertyHolder.set(ItemProperties.MAP_ID, id);
+    }
+
+    @Override
+    public boolean hasMapView() {
+        return this.hasMapId();
+    }
+
+    @Override
+    public MapView getMapView() {
+        return Bukkit.getMap(this.getMapId());
+    }
+
+    @Override
+    public void setMapView(MapView map) {
+        this.propertyHolder.set(ItemProperties.MAP_ID, (map != null) ? map.getId() : null);
+    }
+
+    @Override
+    public boolean isScaling() {
+        return this.propertyHolder.getOrDefault(ItemProperties.MAP_SCALE_DIRECTION, (byte) 0) > 0;
+    }
+
+    @Override
+    public void setScaling(boolean value) {
+        this.propertyHolder.set(ItemProperties.MAP_SCALE_DIRECTION, (byte) (value ? 1 : 0));
+    }
+
+    boolean hasScaling() {
+        return this.isScaling();
+    }
+
+    // isn't wrapped in a display tag....
+    // Stupid legacy!
+    @Override
+    public boolean hasLocationName() {
+        return this.propertyHolder.hasProperty(ItemProperties.LOC_NAME);
+    }
+
+    @Override
+    public @Nullable String getLocationName() {
+        return this.propertyHolder.get(ItemProperties.LOC_NAME);
+    }
+
+    @Override
+    public void setLocationName(@Nullable String name) {
+        this.propertyHolder.set(ItemProperties.LOC_NAME, name);
+    }
+
+    @Override
+    public boolean hasColor() {
+        return this.hasInPropertyPath(ItemProperties.DISPLAY, ItemProperties.MAP_COLOR);
+    }
+
+    @Override
+    public @Nullable Color getColor() {
+        return this.getFromPropertyPath(ItemProperties.DISPLAY, ItemProperties.MAP_COLOR);
+    }
+
+    @Override
+    public void setColor(@Nullable Color color) {
+        this.setFromPropertyPath(ItemProperties.DISPLAY, ItemProperties.MAP_COLOR, color);
+    }
+
+    @Override
+    public @NotNull MetaMap clone() {
+        return new MetaMap(this.propertyHolder.clone(), this.material);
+    }
+
+    @Override
+    public void migrateFrom(MutablePropertyView mutable) {
+        this.propertyHolder.unset(ItemProperties.MAP_ID);
+        this.unsetInPropertyPath(ItemProperties.DISPLAY, ItemProperties.MAP_COLOR);
+        this.propertyHolder.unset(ItemProperties.MAP_SCALE_DIRECTION);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/MetaMusicInstrument.java b/src/main/java/io/papermc/paper/item/meta/MetaMusicInstrument.java
new file mode 100644
index 0000000000000000000000000000000000000000..aeff6baba0dc6dbf3294e11808eff6c9e400897f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/MetaMusicInstrument.java
@@ -0,0 +1,45 @@
+package io.papermc.paper.item.meta;
+
+import io.papermc.paper.inventory.item.properties.ItemProperties;
+import io.papermc.paper.property.MutablePropertyView;
+import org.bukkit.Material;
+import org.bukkit.MusicInstrument;
+import org.bukkit.inventory.meta.MusicInstrumentMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public class MetaMusicInstrument extends PaperMeta implements MusicInstrumentMeta {
+
+    public MetaMusicInstrument(MutablePropertyView mutable, Material material) {
+        super(mutable, material);
+    }
+
+    @Override
+    boolean isEmpty() {
+        return super.isEmpty() && this.isInstrumentEmpty();
+    }
+
+    boolean isInstrumentEmpty() {
+        return this.getInstrument() == null;
+    }
+
+    @Override
+    public void setInstrument(@Nullable MusicInstrument instrument) {
+        this.propertyHolder.set(ItemProperties.INSTRUMENT, instrument);
+    }
+
+    @Override
+    public @Nullable MusicInstrument getInstrument() {
+        return this.propertyHolder.get(ItemProperties.INSTRUMENT);
+    }
+
+    @Override
+    public @NotNull MetaMusicInstrument clone() {
+        return new MetaMusicInstrument(this.propertyHolder.clone(), this.material);
+    }
+
+    @Override
+    public void migrateFrom(MutablePropertyView mutable) {
+        this.propertyHolder.unset(ItemProperties.INSTRUMENT);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/MetaPlayerHead.java b/src/main/java/io/papermc/paper/item/meta/MetaPlayerHead.java
new file mode 100644
index 0000000000000000000000000000000000000000..18e8581617b279951e68ae7acd7db1afdbc7729f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/MetaPlayerHead.java
@@ -0,0 +1,170 @@
+package io.papermc.paper.item.meta;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import com.mojang.authlib.GameProfile;
+import io.papermc.paper.inventory.item.properties.ItemProperties;
+import io.papermc.paper.property.MutablePropertyView;
+import org.bukkit.Bukkit;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.craftbukkit.profile.CraftPlayerProfile;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.meta.SkullMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+// Ignores the STRING "SkullOwner" property, as that is temporary
+public class MetaPlayerHead extends PaperMeta implements SkullMeta {
+
+    static final int MAX_OWNER_LENGTH = 16;
+
+    public MetaPlayerHead(MutablePropertyView mutable, Material material) {
+        super(mutable, material);
+    }
+
+    @Override
+    boolean isEmpty() {
+        return super.isEmpty() && this.isSkullEmpty();
+    }
+
+    boolean isSkullEmpty() {
+        return !this.propertyHolder.hasProperty(ItemProperties.SKULL_OWNER);
+    }
+
+    @Override
+    public boolean hasOwner() {
+        PlayerProfile profile = this.propertyHolder.get(ItemProperties.SKULL_OWNER);
+        String name = this.propertyHolder.get(ItemProperties.SKULL_OWNER_NAME);
+
+        return profile != null || name != null;
+    }
+
+    @Override
+    public String getOwner() {
+        PlayerProfile profile = this.propertyHolder.get(ItemProperties.SKULL_OWNER);
+        String name = this.propertyHolder.get(ItemProperties.SKULL_OWNER_NAME);
+        if (profile != null && profile.getName() != null) {
+            return profile.getName();
+        }
+
+        return name;
+    }
+
+    // Paper start
+    @Override
+    public void setPlayerProfile(@org.jetbrains.annotations.Nullable com.destroystokyo.paper.profile.PlayerProfile profile) {
+        this.propertyHolder.set(ItemProperties.SKULL_OWNER, profile);
+    }
+
+    @org.jetbrains.annotations.Nullable
+    @Override
+    public com.destroystokyo.paper.profile.PlayerProfile getPlayerProfile() {
+        return this.propertyHolder.get(ItemProperties.SKULL_OWNER);
+    }
+    // Paper end
+
+    @Override
+    public OfflinePlayer getOwningPlayer() {
+        if (this.hasOwner()) {
+            PlayerProfile profile = this.propertyHolder.get(ItemProperties.SKULL_OWNER);
+            String name = this.propertyHolder.get(ItemProperties.SKULL_OWNER_NAME);
+            if (name != null) {
+                return Bukkit.getOfflinePlayer(name);
+            }
+
+            if (profile.getId() != null) {
+                return Bukkit.getOfflinePlayer(profile.getId());
+            }
+
+            if (profile.getName() != null) {
+                return Bukkit.getOfflinePlayer(profile.getName());
+            }
+        }
+
+        return null;
+    }
+
+    @Override
+    public boolean setOwner(String name) {
+        if (name != null && name.length() > MAX_OWNER_LENGTH) {
+            return false;
+        }
+
+        if (name == null) {
+            this.setProfile(null);
+        } else {
+            this.setProfile(Bukkit.createProfile(name));
+        }
+
+        return true;
+    }
+
+    @Override
+    public boolean setOwningPlayer(OfflinePlayer owner) {
+        if (owner == null) {
+            this.setProfile(null);
+        } else if (owner instanceof Player player) {
+            this.setProfile(player.getPlayerProfile());
+        } else {
+            this.setProfile(Bukkit.createProfile(owner.getUniqueId(), owner.getName()));
+        }
+
+        return true;
+    }
+
+    @Override
+    @Deprecated // Paper
+    public org.bukkit.profile.PlayerProfile getOwnerProfile() {
+        if (!this.hasOwner()) {
+            return null;
+        }
+
+        return this.propertyHolder.get(ItemProperties.SKULL_OWNER);
+    }
+
+    @Override
+    @Deprecated // Paper
+    public void setOwnerProfile(org.bukkit.profile.PlayerProfile profile) {
+        if (profile == null) {
+            this.setProfile(null);
+        } else {
+            GameProfile gameProfile = (((com.destroystokyo.paper.profile.SharedPlayerProfile) profile).buildGameProfile());
+            CraftPlayerProfile.validateSkullProfile(gameProfile);
+
+            this.setProfile(profile); // Paper
+        }
+    }
+
+    @Override
+    public void setNoteBlockSound(@Nullable NamespacedKey noteBlockSound) {
+        this.setFromPropertyPath(ItemProperties.BLOCK_ENTITY_TAG, ItemProperties.NOTE_BLOCK_SOUND, noteBlockSound);
+    }
+
+    @Override
+    public @Nullable NamespacedKey getNoteBlockSound() {
+        return this.getFromPropertyPath(ItemProperties.BLOCK_ENTITY_TAG, ItemProperties.NOTE_BLOCK_SOUND);
+    }
+
+    @Override
+    public @NotNull MetaPlayerHead clone() {
+        return new MetaPlayerHead(this.propertyHolder.clone(), this.material);
+    }
+
+    private void setProfile(org.bukkit.profile.PlayerProfile gameProfile) {
+        if (gameProfile == null) {
+            this.propertyHolder.set(ItemProperties.SKULL_OWNER, null);
+            return;
+        }
+
+        // Convert bukkit -> paper
+        this.propertyHolder.set(ItemProperties.SKULL_OWNER, new com.destroystokyo.paper.profile.CraftPlayerProfile(((CraftPlayerProfile) gameProfile).buildGameProfile()));
+    }
+
+    @Override
+    public void migrateFrom(MutablePropertyView mutable) {
+        this.propertyHolder.unset(ItemProperties.SKULL_OWNER);
+        this.propertyHolder.unset(ItemProperties.SKULL_OWNER_NAME);
+        this.propertyHolder.unset(ItemProperties.BLOCK_ENTITY_TAG);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/MetaPotion.java b/src/main/java/io/papermc/paper/item/meta/MetaPotion.java
new file mode 100644
index 0000000000000000000000000000000000000000..af1100927a948db6f0614415b9accbb5548a44c4
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/MetaPotion.java
@@ -0,0 +1,165 @@
+package io.papermc.paper.item.meta;
+
+import io.papermc.paper.inventory.item.properties.ItemProperties;
+import io.papermc.paper.property.MutablePropertyView;
+import org.bukkit.Color;
+import org.bukkit.Material;
+import org.bukkit.inventory.meta.PotionMeta;
+import org.bukkit.potion.PotionData;
+import org.bukkit.potion.PotionEffect;
+import org.bukkit.potion.PotionEffectType;
+import org.bukkit.potion.PotionType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Iterator;
+import java.util.List;
+
+public class MetaPotion extends PaperMeta implements PotionMeta {
+
+    private static final PotionData DEFAULT_TYPE = new PotionData(PotionType.UNCRAFTABLE, false, false);
+
+    public MetaPotion(MutablePropertyView mutable, Material material) {
+        super(mutable, material);
+    }
+
+    @Override
+    boolean isEmpty() {
+        return super.isEmpty() && this.isPotionEmpty();
+    }
+
+    boolean isPotionEmpty() {
+        return (this.getBasePotionData().getType() == PotionType.UNCRAFTABLE) && !(this.hasCustomEffects() || this.hasColor());
+    }
+
+    @Override
+    public void setBasePotionData(@NotNull PotionData data) {
+        this.propertyHolder.set(ItemProperties.DEFAULT_POTION_TYPE, data);
+    }
+
+    @Override
+    public @NotNull PotionData getBasePotionData() {
+        return this.propertyHolder.getOrDefault(ItemProperties.DEFAULT_POTION_TYPE, DEFAULT_TYPE);
+    }
+
+    @Override
+    public boolean hasCustomEffects() {
+        List<PotionEffect> effects = this.propertyHolder.get(ItemProperties.CUSTOM_POTION_EFFECTS);
+        return effects != null && !effects.isEmpty();
+    }
+
+    @Override
+    public @NotNull List<PotionEffect> getCustomEffects() {
+        return this.propertyHolder.getOrDefault(ItemProperties.CUSTOM_POTION_EFFECTS, List.of());
+    }
+
+    @Override
+    public boolean addCustomEffect(@NotNull PotionEffect effect, boolean overwrite) {
+        List<PotionEffect> effects = this.propertyHolder.getOrCreate(ItemProperties.CUSTOM_POTION_EFFECTS);
+        int i = 0;
+        for (PotionEffect old : effects) {
+            if (old.getType() == effect.getType()) {
+                if (!overwrite) {
+                    return false;
+                } else if (old.getAmplifier() == effect.getAmplifier() && old.getDuration() == effect.getDuration() && old.isAmbient() == effect.isAmbient()) {
+                    return false;
+                }
+
+                break;
+            }
+            i++;
+        }
+
+        effects.add(i, effect);
+        return true;
+    }
+
+    @Override
+    public boolean removeCustomEffect(@NotNull PotionEffectType type) {
+        List<PotionEffect> effects = this.propertyHolder.getOrCreate(ItemProperties.CUSTOM_POTION_EFFECTS);
+        if (effects == null) {
+            return false;
+        }
+
+        boolean changed = false;
+        Iterator<PotionEffect> iterator = effects.iterator();
+        while (iterator.hasNext()) {
+            PotionEffect next = iterator.next();
+            if (next.getType() == type) {
+                iterator.remove();
+                changed = true;
+            }
+        }
+
+        return changed;
+    }
+
+    @Override
+    public boolean hasCustomEffect(@NotNull PotionEffectType type) {
+        List<PotionEffect> effects = this.propertyHolder.getOrCreate(ItemProperties.CUSTOM_POTION_EFFECTS);
+        for (PotionEffect old : effects) {
+            if (old.getType() == type) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    public boolean clearCustomEffects() {
+        boolean changed = this.hasCustomEffects();
+        this.propertyHolder.unset(ItemProperties.CUSTOM_POTION_EFFECTS);
+        return changed;
+    }
+
+    @Override
+    public boolean setMainEffect(@NotNull PotionEffectType type) {
+        List<PotionEffect> effects = this.propertyHolder.getOrCreate(ItemProperties.CUSTOM_POTION_EFFECTS);
+        PotionEffect found = null;
+        int i = 0;
+        for (PotionEffect old : effects) {
+            if (old.getType() == type) {
+                found = old;
+                break;
+            }
+            i++;
+        }
+
+        if (i == 0 || found == null) {
+            return false;
+        }
+
+        PotionEffect old = effects.get(0);
+        effects.set(0, found);
+        effects.set(i, old);
+
+        return true;
+    }
+
+    @Override
+    public boolean hasColor() {
+        return this.hasInPropertyPath(ItemProperties.DISPLAY, ItemProperties.COLOR);
+    }
+
+    @Override
+    public @Nullable Color getColor() {
+        return this.getFromPropertyPath(ItemProperties.DISPLAY, ItemProperties.COLOR);
+    }
+
+    @Override
+    public void setColor(@Nullable Color color) {
+        this.setFromPropertyPath(ItemProperties.DISPLAY, ItemProperties.COLOR, color);
+    }
+
+    @Override
+    public @NotNull MetaPotion clone() {
+        return new MetaPotion(this.propertyHolder.clone(), this.material);
+    }
+
+    @Override
+    public void migrateFrom(MutablePropertyView mutable) {
+        this.propertyHolder.unset(ItemProperties.DEFAULT_POTION_TYPE);
+        this.propertyHolder.unset(ItemProperties.CUSTOM_POTION_EFFECTS);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/MetaSpawnEgg.java b/src/main/java/io/papermc/paper/item/meta/MetaSpawnEgg.java
new file mode 100644
index 0000000000000000000000000000000000000000..aedca43160b4ff1f6eb0127b3913a8ba77fae74b
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/MetaSpawnEgg.java
@@ -0,0 +1,35 @@
+package io.papermc.paper.item.meta;
+
+import io.papermc.paper.inventory.item.properties.ItemProperties;
+import io.papermc.paper.property.MutablePropertyView;
+import org.bukkit.Material;
+import org.bukkit.entity.EntityType;
+import org.bukkit.inventory.meta.SpawnEggMeta;
+import org.jetbrains.annotations.NotNull;
+
+public class MetaSpawnEgg extends PaperMeta implements SpawnEggMeta {
+
+    public MetaSpawnEgg(MutablePropertyView mutable, Material material) {
+        super(mutable, material);
+    }
+
+    @Override
+    public EntityType getSpawnedType() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public void setSpawnedType(EntityType type) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public @NotNull MetaSpawnEgg clone() {
+        return new MetaSpawnEgg(this.propertyHolder.clone(), this.material);
+    }
+
+    @Override
+    public void migrateFrom(MutablePropertyView mutable) {
+        this.propertyHolder.unset(ItemProperties.ENTITY_TAG);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/MetaSuspiciousStew.java b/src/main/java/io/papermc/paper/item/meta/MetaSuspiciousStew.java
new file mode 100644
index 0000000000000000000000000000000000000000..1863e18f7ad771b7491ae41706e1a4758c32c574
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/MetaSuspiciousStew.java
@@ -0,0 +1,118 @@
+package io.papermc.paper.item.meta;
+
+import io.papermc.paper.inventory.item.properties.ItemProperties;
+import io.papermc.paper.inventory.item.properties.StewEffect;
+import io.papermc.paper.property.MutablePropertyView;
+import org.bukkit.Material;
+import org.bukkit.inventory.meta.SuspiciousStewMeta;
+import org.bukkit.potion.PotionEffect;
+import org.bukkit.potion.PotionEffectType;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+public class MetaSuspiciousStew extends PaperMeta implements SuspiciousStewMeta {
+
+    public MetaSuspiciousStew(MutablePropertyView mutable, Material material) {
+        super(mutable, material);
+    }
+
+    @Override
+    boolean isEmpty() {
+        return super.isEmpty() && this.isStewEmpty();
+    }
+
+    boolean isStewEmpty() {
+        return !this.hasCustomEffects();
+    }
+
+    @Override
+    public boolean hasCustomEffects() {
+        List<StewEffect> effects = this.propertyHolder.get(ItemProperties.STEW_EFFECTS);
+        return effects != null && !effects.isEmpty();
+    }
+
+    @Override
+    public @NotNull List<PotionEffect> getCustomEffects() {
+        List<PotionEffect> effects = new ArrayList<>();
+        for (StewEffect effect : this.propertyHolder.getOrDefault(ItemProperties.STEW_EFFECTS, List.of())) {
+            effects.add(new PotionEffect(effect.effect(), effect.duration(), 0));
+        }
+
+        return effects;
+    }
+
+    @Override
+    public boolean addCustomEffect(@NotNull PotionEffect effect, boolean overwrite) {
+        List<StewEffect> effects = this.propertyHolder.getOrCreate(ItemProperties.STEW_EFFECTS);
+        int i = 0;
+        for (StewEffect old : effects) {
+            if (old.effect() == effect.getType()) {
+                if (!overwrite) {
+                    return false;
+                }
+                if (old.duration() == effect.getDuration()) {
+                    return false;
+                }
+
+                break;
+            }
+            i++;
+        }
+
+        effects.set(i, new StewEffect(effect.getType(), effect.getDuration()));
+
+        return true;
+    }
+
+    @Override
+    public boolean removeCustomEffect(@NotNull PotionEffectType type) {
+        List<StewEffect> effects = this.propertyHolder.get(ItemProperties.STEW_EFFECTS);
+        if (effects == null) {
+            return false;
+        }
+
+        boolean changed = false;
+        Iterator<StewEffect> iterator = effects.iterator();
+        while (iterator.hasNext()) {
+            StewEffect next = iterator.next();
+            if (next.effect() == type) {
+                iterator.remove();
+                changed = true;
+            }
+        }
+
+        return changed;
+    }
+
+    @Override
+    public boolean hasCustomEffect(@NotNull PotionEffectType type) {
+        List<StewEffect> effects = this.propertyHolder.getOrCreate(ItemProperties.STEW_EFFECTS);
+        for (StewEffect old : effects) {
+            if (old.effect() == type) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    public boolean clearCustomEffects() {
+        boolean changed = this.hasCustomEffects();
+        this.propertyHolder.unset(ItemProperties.STEW_EFFECTS);
+        return changed;
+    }
+
+    @Override
+    public @NotNull MetaSuspiciousStew clone() {
+        return new MetaSuspiciousStew(this.propertyHolder.clone(), this.material);
+    }
+
+    @Override
+    public void migrateFrom(MutablePropertyView mutable) {
+        this.propertyHolder.unset(ItemProperties.STEW_EFFECTS);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/MetaTropicalFishBucket.java b/src/main/java/io/papermc/paper/item/meta/MetaTropicalFishBucket.java
new file mode 100644
index 0000000000000000000000000000000000000000..af25ee0df79346dc3c2edbc2a04cbd386d344e35
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/MetaTropicalFishBucket.java
@@ -0,0 +1,75 @@
+package io.papermc.paper.item.meta;
+
+import io.papermc.paper.inventory.item.properties.ItemProperties;
+import io.papermc.paper.inventory.item.properties.TropicalFishVariant;
+import io.papermc.paper.property.MutablePropertyView;
+import org.bukkit.DyeColor;
+import org.bukkit.Material;
+import org.bukkit.entity.TropicalFish;
+import org.bukkit.inventory.meta.TropicalFishBucketMeta;
+import org.jetbrains.annotations.NotNull;
+
+public class MetaTropicalFishBucket extends PaperMeta implements TropicalFishBucketMeta {
+
+    private static final TropicalFishVariant DEFAULT = new TropicalFishVariant(DyeColor.WHITE, DyeColor.WHITE, TropicalFish.Pattern.KOB);
+
+    public MetaTropicalFishBucket(MutablePropertyView mutable, Material material) {
+        super(mutable, material);
+    }
+
+    @Override
+    public @NotNull DyeColor getPatternColor() {
+        TropicalFishVariant variant = this.propertyHolder.getOrDefault(ItemProperties.TROPICAL_FISH_BUCKET_VARIANT, DEFAULT);
+        return variant.patternColor();
+    }
+
+    @Override
+    public void setPatternColor(@NotNull DyeColor color) {
+        TropicalFishVariant variant = this.propertyHolder.getOrDefault(ItemProperties.TROPICAL_FISH_BUCKET_VARIANT, DEFAULT);
+        this.set(new TropicalFishVariant(color, variant.bodyColor(), variant.type()));
+    }
+
+    @Override
+    public @NotNull DyeColor getBodyColor() {
+        TropicalFishVariant variant = this.propertyHolder.getOrDefault(ItemProperties.TROPICAL_FISH_BUCKET_VARIANT, DEFAULT);
+        return variant.bodyColor();
+    }
+
+    @Override
+    public void setBodyColor(@NotNull DyeColor color) {
+        TropicalFishVariant variant = this.propertyHolder.getOrDefault(ItemProperties.TROPICAL_FISH_BUCKET_VARIANT, DEFAULT);
+        this.set(new TropicalFishVariant(variant.patternColor(), color, variant.type()));
+    }
+
+    @Override
+    public @NotNull TropicalFish.Pattern getPattern() {
+        TropicalFishVariant variant = this.propertyHolder.getOrDefault(ItemProperties.TROPICAL_FISH_BUCKET_VARIANT, DEFAULT);
+        return variant.type();
+    }
+
+    @Override
+    public void setPattern(TropicalFish.@NotNull Pattern pattern) {
+        TropicalFishVariant variant = this.propertyHolder.getOrDefault(ItemProperties.TROPICAL_FISH_BUCKET_VARIANT, DEFAULT);
+        this.set(new TropicalFishVariant(variant.patternColor(), variant.bodyColor(), pattern));
+    }
+
+    @Override
+    public boolean hasVariant() {
+        return this.propertyHolder.hasProperty(ItemProperties.TROPICAL_FISH_BUCKET_VARIANT);
+    }
+
+    private void set(TropicalFishVariant variant) {
+        this.propertyHolder.set(ItemProperties.TROPICAL_FISH_BUCKET_VARIANT, variant);
+    }
+
+    @Override
+    public @NotNull MetaTropicalFishBucket clone() {
+        return new MetaTropicalFishBucket(this.propertyHolder.clone(), this.material);
+    }
+
+    @Override
+    public void migrateFrom(MutablePropertyView mutable) {
+        this.propertyHolder.unset(ItemProperties.TROPICAL_FISH_BUCKET_VARIANT);
+        this.propertyHolder.unset(ItemProperties.ENTITY_TAG);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/PaperMeta.java b/src/main/java/io/papermc/paper/item/meta/PaperMeta.java
new file mode 100644
index 0000000000000000000000000000000000000000..ea9842c38fcb7e4080dca8eb028339465c921547
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/PaperMeta.java
@@ -0,0 +1,621 @@
+package io.papermc.paper.item.meta;
+
+import com.destroystokyo.paper.Namespaced;
+import com.google.common.collect.LinkedHashMultimap;
+import com.google.common.collect.Multimap;
+import com.google.common.collect.SetMultimap;
+import io.papermc.paper.inventory.item.properties.AttributePair;
+import io.papermc.paper.inventory.item.properties.EnchantmentPair;
+import io.papermc.paper.property.MutablePropertyView;
+import io.papermc.paper.property.PropertyKey;
+import io.papermc.paper.property.nbt.AdapterContext;
+import io.papermc.paper.property.nbt.NbtPropertyHolder;
+import io.papermc.paper.property.nbt.pdc.LivePersistentDataContainer;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.minecraft.world.item.BlockItem;
+import org.bukkit.Material;
+import org.bukkit.attribute.Attribute;
+import org.bukkit.attribute.AttributeModifier;
+import org.bukkit.block.data.BlockData;
+import org.bukkit.craftbukkit.Overridden;
+import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.bukkit.craftbukkit.inventory.tags.DeprecatedCustomTagContainer;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.enchantments.Enchantment;
+import org.bukkit.inventory.EquipmentSlot;
+import org.bukkit.inventory.ItemFlag;
+import org.bukkit.inventory.meta.BlockDataMeta;
+import org.bukkit.inventory.meta.Damageable;
+import org.bukkit.inventory.meta.ItemMeta;
+import org.bukkit.inventory.meta.Repairable;
+import org.bukkit.inventory.meta.tags.CustomItemTagContainer;
+import org.bukkit.persistence.PersistentDataContainer;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Set;
+
+import static io.papermc.paper.inventory.item.properties.ItemProperties.*;
+
+public class PaperMeta implements ItemMeta, Damageable, Repairable, BlockDataMeta {
+
+    private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
+
+    protected final MutablePropertyView propertyHolder;
+    protected final Material material;
+
+    public PaperMeta(MutablePropertyView propertyHolder, Material material) {
+        this.propertyHolder = propertyHolder;
+        this.material = material;
+    }
+
+    @Override
+    public @NotNull Map<String, Object> serialize() {
+        return null;
+    }
+
+    protected boolean hasInPropertyPath(PropertyKey<MutablePropertyView> outer, PropertyKey<?> inner) {
+        MutablePropertyView holder = this.propertyHolder.get(outer);
+        if (holder != null) {
+            return holder.hasProperty(inner);
+        }
+
+        return false;
+    }
+
+    protected <T> T getFromPropertyPath(PropertyKey<MutablePropertyView> outer, PropertyKey<T> inner) {
+        MutablePropertyView holder = this.propertyHolder.get(outer);
+        if (holder != null) {
+            return holder.get(inner);
+        }
+
+        return null;
+    }
+
+    protected <T> void unsetInPropertyPath(PropertyKey<MutablePropertyView> outer, PropertyKey<T> inner) {
+        MutablePropertyView holder = this.propertyHolder.get(outer);
+        if (holder != null) {
+            holder.unset(inner);
+        }
+    }
+
+    protected <T> void setFromPropertyPath(PropertyKey<MutablePropertyView> outer, PropertyKey<T> inner, T value) {
+        MutablePropertyView holder = this.propertyHolder.getOrCreate(outer);
+        holder.set(inner, value);
+    }
+
+    @Override
+    public boolean hasDisplayName() {
+        return this.hasInPropertyPath(DISPLAY, DISPLAY_NAME);
+    }
+
+    @Nullable
+    @Override
+    public Component displayName() {
+        return this.getFromPropertyPath(DISPLAY, DISPLAY_NAME);
+    }
+
+    @Override
+    public void displayName(@Nullable Component displayName) {
+        this.setFromPropertyPath(DISPLAY, DISPLAY_NAME, displayName);
+    }
+
+    @Override
+    public @NotNull String getDisplayName() {
+        Component displayName = this.displayName();
+        if (displayName == null) {
+            return "";
+        }
+        String gson = GsonComponentSerializer.gson().serialize(displayName);
+        return CraftChatMessage.fromJSONComponent(gson);
+    }
+
+    @Override
+    public void setDisplayName(@Nullable String name) {
+        // TODO: test null strings
+        this.displayName(GsonComponentSerializer.gson().deserialize(CraftChatMessage.fromStringOrNullToJSON(name)));
+    }
+
+    @NotNull
+    @Override
+    public BaseComponent[] getDisplayNameComponent() {
+        Component displayName = this.displayName();
+        if (displayName == null) {
+            return new BaseComponent[0];
+        }
+
+        return net.md_5.bungee.chat.ComponentSerializer.parse(GsonComponentSerializer.gson().serialize(displayName));
+    }
+
+    @Override
+    public void setDisplayNameComponent(@Nullable BaseComponent[] component) {
+        String gson = net.md_5.bungee.chat.ComponentSerializer.toString(component);
+        this.displayName(GsonComponentSerializer.gson().deserialize(gson));
+    }
+
+    @Override
+    public boolean hasLocalizedName() {
+        return this.hasInPropertyPath(DISPLAY, LOC_NAME);
+    }
+
+    @Override
+    public @NotNull String getLocalizedName() {
+        return this.getFromPropertyPath(DISPLAY, LOC_NAME);
+    }
+
+    @Override
+    public void setLocalizedName(@Nullable String name) {
+        this.setFromPropertyPath(DISPLAY, LOC_NAME, name);
+    }
+
+    @Override
+    public boolean hasLore() {
+        return this.hasInPropertyPath(DISPLAY, LORE);
+    }
+
+    @Override
+    public @Nullable List<Component> lore() {
+        return this.getFromPropertyPath(DISPLAY, LORE);
+    }
+
+    @Override
+    public void lore(@Nullable List<Component> lore) {
+        this.setFromPropertyPath(DISPLAY, LORE, lore);
+    }
+
+    @Override
+    public @Nullable List<String> getLore() {
+        return null;
+    }
+
+    @Override
+    public void setLore(@Nullable List<String> lore) {
+
+    }
+
+    @Override
+    public @Nullable List<BaseComponent[]> getLoreComponents() {
+        return null;
+    }
+
+    @Override
+    public void setLoreComponents(@Nullable List<BaseComponent[]> lore) {
+
+    }
+
+    @Override
+    public boolean hasCustomModelData() {
+        return this.propertyHolder.hasProperty(CUSTOM_MODEL_DATA);
+    }
+
+    @Override
+    public int getCustomModelData() {
+        return this.propertyHolder.getOrDefault(CUSTOM_MODEL_DATA, 0);
+    }
+
+    @Override
+    public void setCustomModelData(@Nullable Integer data) {
+        this.propertyHolder.set(CUSTOM_MODEL_DATA, data);
+    }
+
+    @Override
+    public boolean hasEnchants() {
+        // Legacy reasons?
+        // TODO: check
+        return this.propertyHolder.hasProperty(ENCHANTMENTS) && !this.propertyHolder.get(ENCHANTMENTS).isEmpty();
+    }
+
+    @Override
+    public boolean hasEnchant(@NotNull Enchantment ench) {
+        List<EnchantmentPair> pairs = this.propertyHolder.get(ENCHANTMENTS);
+        if (pairs == null) {
+            return false;
+        }
+
+        for (EnchantmentPair next : pairs) {
+            if (next.enchantment() == ench) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    public int getEnchantLevel(@NotNull Enchantment ench) {
+        List<EnchantmentPair> pairs = this.propertyHolder.get(ENCHANTMENTS);
+        if (pairs == null) {
+            return 0;
+        }
+
+        for (EnchantmentPair next : pairs) {
+            if (next.enchantment() == ench) {
+                return next.level();
+            }
+        }
+
+        return 0;
+    }
+
+    @Override
+    public @NotNull Map<Enchantment, Integer> getEnchants() {
+        List<EnchantmentPair> pairs = this.propertyHolder.get(ENCHANTMENTS);
+        if (pairs == null) {
+            return Map.of();
+        }
+
+        Map<Enchantment, Integer> enchants = new HashMap<>();
+        for (EnchantmentPair next : pairs) {
+            enchants.put(next.enchantment(), next.level());
+        }
+
+        return enchants;
+    }
+
+    @Override
+    public boolean addEnchant(@NotNull Enchantment ench, int level, boolean ignoreLevelRestriction) {
+        if (ignoreLevelRestriction || level >= ench.getStartLevel() && level <= ench.getMaxLevel()) {
+            List<EnchantmentPair> enchantments = this.propertyHolder.getOrCreate(ENCHANTMENTS);
+
+            EnchantmentPair oldValue = null;
+            int oldIndex = 0;
+            for (int i = 0; i < enchantments.size(); i++) {
+                EnchantmentPair value = enchantments.get(i);
+                if (value.enchantment() == ench) {
+                    oldValue = value;
+                    oldIndex = i;
+                    break;
+                }
+            }
+
+            if (oldValue == null) {
+                enchantments.add(new EnchantmentPair(ench, level));
+                return true;
+            } else {
+                enchantments.set(oldIndex, new EnchantmentPair(ench, level));
+                return oldValue.level() != level;
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    public boolean removeEnchant(@NotNull Enchantment ench) {
+        List<EnchantmentPair> enchantmentMap = this.propertyHolder.get(ENCHANTMENTS);
+        if (enchantmentMap == null) {
+            return false;
+        }
+
+        Iterator<EnchantmentPair> iterator = enchantmentMap.listIterator();
+        while (iterator.hasNext()) {
+            EnchantmentPair next = iterator.next();
+            if (next.enchantment() == ench) {
+                iterator.remove();
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    public boolean hasConflictingEnchant(@NotNull Enchantment ench) {
+        if (!hasEnchants()) {
+            return false;
+        }
+
+        for (EnchantmentPair enchant : this.propertyHolder.getOrDefault(ENCHANTMENTS, List.of())) {
+            if (enchant.enchantment().conflictsWith(ench)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    public void addItemFlags(@NotNull ItemFlag... itemFlags) {
+        Set<ItemFlag> flagSetValue = this.propertyHolder.getOrCreate(HIDE_FLAGS);
+        flagSetValue.addAll(Arrays.asList(itemFlags));
+    }
+
+    @Override
+    public void removeItemFlags(@NotNull ItemFlag... itemFlags) {
+        Set<ItemFlag> flagSetValue = this.propertyHolder.get(HIDE_FLAGS);
+        if (flagSetValue == null) {
+            return;
+        }
+
+        for (ItemFlag flag : itemFlags) {
+            flagSetValue.remove(flag);
+        }
+    }
+
+    @Override
+    public @NotNull Set<ItemFlag> getItemFlags() {
+        return this.propertyHolder.getOrDefault(HIDE_FLAGS, Set.of());
+    }
+
+    @Override
+    public boolean hasItemFlag(@NotNull ItemFlag flag) {
+        return this.propertyHolder.hasProperty(HIDE_FLAGS);
+    }
+
+    @Override
+    public boolean isUnbreakable() {
+        return this.propertyHolder.hasProperty(UNBREAKABLE) && this.propertyHolder.get(UNBREAKABLE);
+    }
+
+    @Override
+    public void setUnbreakable(boolean unbreakable) {
+        this.propertyHolder.set(UNBREAKABLE, unbreakable);
+    }
+
+    @Override
+    public boolean hasAttributeModifiers() {
+        return this.propertyHolder.hasProperty(ATTRIBUTES);
+    }
+
+    @Override
+    public @Nullable Multimap<Attribute, AttributeModifier> getAttributeModifiers() {
+        return null;
+        // return this.propertyHolder.getOrDefault(ATTRIBUTES, LinkedHashMultimap.create());
+    }
+
+    @Override
+    public void setAttributeModifiers(@Nullable Multimap<Attribute, AttributeModifier> attributeModifiers) {
+        //this.propertyHolder.set(ATTRIBUTES, attributeModifiers);
+    }
+
+    @Override
+    public @NotNull Multimap<Attribute, AttributeModifier> getAttributeModifiers(@NotNull EquipmentSlot slot) {
+        SetMultimap<Attribute, AttributeModifier> result = LinkedHashMultimap.create();
+        for (AttributePair entry : this.propertyHolder.getOrCreate(ATTRIBUTES)) {
+            if (entry.modifier().getSlot() == null || entry.modifier().getSlot() == slot) {
+                result.put(entry.attribute(), entry.modifier());
+            }
+        }
+
+        return result;
+    }
+
+    @Override
+    public @Nullable Collection<AttributeModifier> getAttributeModifiers(@NotNull Attribute attribute) {
+        return this.propertyHolder.get(ATTRIBUTES).stream().filter((pair) -> pair.attribute() == attribute).map(AttributePair::modifier).toList();
+    }
+
+    @Override
+    public boolean addAttributeModifier(@NotNull Attribute attribute, @NotNull AttributeModifier modifier) {
+        return false; // TODO
+//        MultiMapValue<Attribute, AttributeModifier> attributes = this.propertyHolder.getOrCreate(ATTRIBUTES);
+//        for (Map.Entry<Attribute, AttributeModifier> entry : attributes.entries()) {
+//            Preconditions.checkArgument(!entry.getValue().getUniqueId().equals(modifier.getUniqueId()), "Cannot register AttributeModifier. Modifier is already applied! %s", modifier);
+//        }
+//
+//        return attributes.put(attribute, modifier);
+    }
+
+    @Override
+    public boolean removeAttributeModifier(@NotNull Attribute attribute) {
+        return false; // TODO
+//        this.propertyHolder.getOrCreate(ATTRIBUTES).
+//        return !this.attributeModifiers.removeAll(attribute).isEmpty();
+    }
+
+    @Override
+    public boolean removeAttributeModifier(@NotNull EquipmentSlot slot) {
+        return false; // TODO
+//        int removed = 0;
+//        Iterator<Map.Entry<Attribute, AttributeModifier>> iter = this.attributeModifiers.entries().iterator();
+//
+//        while (iter.hasNext()) {
+//            Map.Entry<Attribute, AttributeModifier> entry = iter.next();
+//            // Explicitly match against null because (as of MC 1.13) AttributeModifiers without a -
+//            // set slot are active in any slot.
+//            if (entry.getValue().getSlot() == null || entry.getValue().getSlot() == slot) {
+//                iter.remove();
+//                ++removed;
+//            }
+//        }
+//        return removed > 0;
+    }
+
+    @Override
+    public boolean removeAttributeModifier(@NotNull Attribute attribute, @NotNull AttributeModifier modifier) {
+        return false; // TODO
+//        int removed = 0;
+//        Iterator<Map.Entry<Attribute, AttributeModifier>> iter = this.attributeModifiers.entries().iterator();
+//
+//        while (iter.hasNext()) {
+//            Map.Entry<Attribute, AttributeModifier> entry = iter.next();
+//            if (entry.getKey() == null || entry.getValue() == null) {
+//                iter.remove();
+//                ++removed;
+//                continue; // remove all null values while we are here
+//            }
+//
+//            if (entry.getKey() == attribute && entry.getValue().getUniqueId().equals(modifier.getUniqueId())) {
+//                iter.remove();
+//                ++removed;
+//            }
+//        }
+//        return removed > 0;
+    }
+
+    @Override
+    public @NotNull CustomItemTagContainer getCustomTagContainer() {
+        return new DeprecatedCustomTagContainer(this.getPersistentDataContainer());
+    }
+
+    @Override
+    public void setVersion(int version) {
+        // TODO
+    }
+
+    @Override
+    public @NotNull PaperMeta clone() {
+        return new PaperMeta(propertyHolder, this.material);
+    }
+
+    @Override
+    public Set<Material> getCanDestroy() {
+        return null;
+    }
+
+    @Override
+    public void setCanDestroy(Set<Material> canDestroy) {
+
+    }
+
+    @Override
+    public Set<Material> getCanPlaceOn() {
+        return null;
+    }
+
+    @Override
+    public void setCanPlaceOn(Set<Material> canPlaceOn) {
+
+    }
+
+    @Override
+    public @NotNull Set<Namespaced> getDestroyableKeys() {
+        return null;
+    }
+
+    @Override
+    public void setDestroyableKeys(@NotNull Collection<Namespaced> canDestroy) {
+
+    }
+
+    @Override
+    public @NotNull Set<Namespaced> getPlaceableKeys() {
+        return null;
+    }
+
+    @Override
+    public @NotNull void setPlaceableKeys(@NotNull Collection<Namespaced> canPlaceOn) {
+
+    }
+
+    @Override
+    public boolean hasPlaceableKeys() {
+        return false;
+    }
+
+    @Override
+    public boolean hasDestroyableKeys() {
+        return false;
+    }
+
+    @Override
+    public @NotNull PersistentDataContainer getPersistentDataContainer() {
+        return new LivePersistentDataContainer(((NbtPropertyHolder) this.propertyHolder.getOrCreate(PUBLIC_BUKKIT_VALUES)).getCompoundTag(), DATA_TYPE_REGISTRY);
+    }
+
+    @Override
+    public @NotNull String getAsString() {
+        return this.toString();
+    }
+
+    @Overridden
+    boolean isEmpty() {
+        return false; // TODO:
+    }
+
+    public void migrateFrom(MutablePropertyView mutable) {
+    }
+
+    @NotNull
+    public MutablePropertyView getPropertyHolder() {
+        return propertyHolder;
+    }
+
+    // TODO
+
+    @Override
+    public String toString() {
+        return this.getClass().getName() + "{" +
+            "propertyHolder=" + propertyHolder +
+            '}';
+    }
+
+    // Block data meta
+    @Override
+    public boolean hasBlockData() {
+        return this.propertyHolder.hasProperty(BLOCK_STATE);
+    }
+
+    @Override
+    public BlockData getBlockData(Material material) {
+        // Paper start - fix NPE if this.blockData is null
+        final net.minecraft.world.level.block.state.BlockState defaultBlockState = CraftMagicNumbers.getBlock(material).defaultBlockState();
+        MutablePropertyView holder = this.propertyHolder.get(BLOCK_STATE);
+
+        return CraftBlockData.fromData(holder == null ? defaultBlockState : BlockItem.getBlockState(defaultBlockState, ((NbtPropertyHolder) holder).getCompoundTag()));
+        // Paper end
+    }
+
+    @Override
+    public void setBlockData(BlockData blockData) {
+        this.propertyHolder.set(BLOCK_STATE, NbtPropertyHolder.simpleBlob(((CraftBlockData) blockData).toStates(), AdapterContext.empty()));
+    }
+
+    // Damage meta
+
+    @Override
+    public boolean hasDamage() {
+        return this.propertyHolder.hasProperty(DAMAGE);
+    }
+
+    @Override
+    public int getDamage() {
+        return this.propertyHolder.getOrDefault(DAMAGE, 0);
+    }
+
+    @Override
+    public void setDamage(int damage) {
+        this.propertyHolder.set(DAMAGE, damage);
+    }
+
+    // REpair meta
+    @Override
+    public boolean hasRepairCost() {
+        return this.propertyHolder.hasProperty(REPAIR_COST);
+    }
+
+    @Override
+    public int getRepairCost() {
+        return this.propertyHolder.getOrDefault(REPAIR_COST, 0);
+    }
+
+    @Override
+    public void setRepairCost(int cost) {
+        this.propertyHolder.set(REPAIR_COST, cost);
+    }
+
+    // Material should NOT affect equality... legacy reasons
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null) return false;
+        PaperMeta paperMeta = (PaperMeta) o;
+        return Objects.equals(propertyHolder, paperMeta.propertyHolder);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(propertyHolder);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/PaperMetaProperties.java b/src/main/java/io/papermc/paper/item/meta/PaperMetaProperties.java
new file mode 100644
index 0000000000000000000000000000000000000000..6526eb8766d186c9617c59cc95693e984d1808b3
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/PaperMetaProperties.java
@@ -0,0 +1,31 @@
+package io.papermc.paper.item.meta;
+
+import io.leangen.geantyref.TypeFactory;
+import io.papermc.paper.property.PropertyKey;
+import io.papermc.paper.property.nbt.AdapterContext;
+import io.papermc.paper.property.nbt.primitives.StringPrimitive;
+import io.papermc.paper.property.nbt.types.AxolotlVariantNbt;
+import io.papermc.paper.property.nbt.types.DyeColorNbt;
+import org.bukkit.DyeColor;
+import org.bukkit.NamespacedKey;
+import org.bukkit.block.banner.Pattern;
+
+import java.util.List;
+
+class PaperMetaProperties {
+
+    // Banner Block Entity
+    static final PropertyKey<DyeColor> BASE = PropertyKey.of("Base", DyeColor.class);
+    static final PropertyKey<List<Pattern>> PATTERNS = PropertyKey.of("Patterns", TypeFactory.parameterizedClass(List.class, Pattern.class));
+
+    // Block Entity
+    static final PropertyKey<String> IDENTIFIER = PropertyKey.of("id", String.class);
+
+    // Register
+    public static void register(AdapterContext context) {
+        context.register(BASE, new DyeColorNbt());
+        // TODO: Patterns
+        context.register(IDENTIFIER, new StringPrimitive());
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/item/property/ItemPropertyRegistration.java b/src/main/java/io/papermc/paper/item/property/ItemPropertyRegistration.java
new file mode 100644
index 0000000000000000000000000000000000000000..451ad210adfa99f2d818aaee5bf874164146a503
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/property/ItemPropertyRegistration.java
@@ -0,0 +1,97 @@
+package io.papermc.paper.item.property;
+
+import io.papermc.paper.inventory.item.properties.ItemProperties;
+import io.papermc.paper.property.nbt.AdapterContext;
+import io.papermc.paper.property.nbt.primitives.BlockPositionNbtPrimitive;
+import io.papermc.paper.property.nbt.primitives.BooleanPrimitive;
+import io.papermc.paper.property.nbt.primitives.BytePrimitive;
+import io.papermc.paper.property.nbt.primitives.ColorNbtPrimitive;
+import io.papermc.paper.property.nbt.primitives.ComponentNbtPrimitive;
+import io.papermc.paper.property.nbt.primitives.IntegerPrimitive;
+import io.papermc.paper.property.nbt.primitives.ItemStackNbtPrimitive;
+import io.papermc.paper.property.nbt.primitives.KeyedRegistryPrimitive;
+import io.papermc.paper.property.nbt.primitives.NamespaceKeyNbtPrimitive;
+import io.papermc.paper.property.nbt.primitives.StringPrimitive;
+import io.papermc.paper.property.nbt.types.AttributeMap;
+import io.papermc.paper.property.nbt.types.AxolotlVariantNbt;
+import io.papermc.paper.property.nbt.types.CompoundTagNbt;
+import io.papermc.paper.property.nbt.types.EnchantmentList;
+import io.papermc.paper.property.nbt.types.GameProfileNbt;
+import io.papermc.paper.property.nbt.types.ItemFlagBitset;
+import io.papermc.paper.property.nbt.types.StewEffectsListNbt;
+import io.papermc.paper.property.nbt.types.TropicalFishVariantNbt;
+import io.papermc.paper.property.nbt.types.WrappedListNbt;
+import org.bukkit.MusicInstrument;
+
+public class ItemPropertyRegistration {
+
+    public static final AdapterContext ITEM_CONTEXT = new AdapterContext();
+    static  {
+        ITEM_CONTEXT.register(ItemProperties.ENCHANTMENTS, new EnchantmentList());
+        ITEM_CONTEXT.register(ItemProperties.UNBREAKABLE, new BooleanPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.HIDE_FLAGS, new ItemFlagBitset());
+        ITEM_CONTEXT.register(ItemProperties.REPAIR_COST, new IntegerPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.CUSTOM_MODEL_DATA, new IntegerPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.DAMAGE, new IntegerPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.ATTRIBUTES, new AttributeMap());
+        ITEM_CONTEXT.register(ItemProperties.BLOCK_STATE, new CompoundTagNbt(ITEM_CONTEXT));
+        ITEM_CONTEXT.register(ItemProperties.ENTITY_TAG, new CompoundTagNbt(ITEM_CONTEXT));
+
+        ITEM_CONTEXT.register(ItemProperties.DISPLAY, new CompoundTagNbt(ITEM_CONTEXT));
+        ITEM_CONTEXT.register(ItemProperties.DISPLAY_NAME, new ComponentNbtPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.COLOR, new ColorNbtPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.MAP_COLOR, new ColorNbtPrimitive());
+
+        ITEM_CONTEXT.register(ItemProperties.PUBLIC_BUKKIT_VALUES, new CompoundTagNbt(ITEM_CONTEXT));
+        ITEM_CONTEXT.register(ItemProperties.LOC_NAME, new StringPrimitive());
+
+        ITEM_CONTEXT.register(ItemProperties.TROPICAL_FISH_BUCKET_VARIANT, new TropicalFishVariantNbt());
+
+        ITEM_CONTEXT.register(ItemProperties.STEW_EFFECTS, new StewEffectsListNbt());
+
+        ITEM_CONTEXT.register(ItemProperties.SKULL_OWNER, new GameProfileNbt());
+        ITEM_CONTEXT.register(ItemProperties.SKULL_OWNER_NAME, new StringPrimitive());
+
+        // TODO: Potion
+
+        ITEM_CONTEXT.register(ItemProperties.MAP_ID, new IntegerPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.MAP_SCALE_DIRECTION, new BytePrimitive());
+        ITEM_CONTEXT.register(ItemProperties.MAP_TO_LOCK, new BooleanPrimitive());
+
+        ITEM_CONTEXT.register(ItemProperties.RECIPES, new WrappedListNbt<>(new NamespaceKeyNbtPrimitive()));
+
+        ITEM_CONTEXT.register(ItemProperties.FLIGHT, new BytePrimitive());
+
+        // TODO: Firework effect
+
+        ITEM_CONTEXT.register(ItemProperties.STORED_ENCHANTMENTS, new EnchantmentList());
+
+        ITEM_CONTEXT.register(ItemProperties.CHARGED, new BooleanPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.CHARGED_PROJECTILES, new WrappedListNbt<>(new ItemStackNbtPrimitive()));
+
+        ITEM_CONTEXT.register(ItemProperties.LODESTONE_POS, new BlockPositionNbtPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.LODESTONE_DIMENSION, new NamespaceKeyNbtPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.LODESTONE_TRACKED, new BooleanPrimitive());
+
+        ITEM_CONTEXT.register(ItemProperties.ITEMS, new WrappedListNbt<>(new ItemStackNbtPrimitive()));
+
+        ITEM_CONTEXT.register(ItemProperties.TITLE, new StringPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.TITLE_FILTERED, new StringPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.AUTHOR, new StringPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.PAGES, new WrappedListNbt<>(new ComponentNbtPrimitive()));
+        ITEM_CONTEXT.register(ItemProperties.PAGES_FILTERED, new WrappedListNbt<>(new ComponentNbtPrimitive()));
+        ITEM_CONTEXT.register(ItemProperties.GENERATION, new IntegerPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.RESOLVED, new BooleanPrimitive());
+
+        ITEM_CONTEXT.register(ItemProperties.PAGES_WRITTEN, new WrappedListNbt<>(new StringPrimitive()));
+        ITEM_CONTEXT.register(ItemProperties.BLOCK_ENTITY_TAG, new CompoundTagNbt(ITEM_CONTEXT));
+        ITEM_CONTEXT.register(ItemProperties.NOTE_BLOCK_SOUND, new NamespaceKeyNbtPrimitive());
+        ITEM_CONTEXT.register(ItemProperties.VARIANT, new AxolotlVariantNbt());
+
+        ITEM_CONTEXT.register(ItemProperties.INSTRUMENT, new KeyedRegistryPrimitive<>(MusicInstrument::getByKey, MusicInstrument::getKey));
+
+        ITEM_CONTEXT.lockRegistration();
+    }
+
+
+}
diff --git a/src/main/java/io/papermc/paper/property/adapter/TypeAdapter.java b/src/main/java/io/papermc/paper/property/adapter/TypeAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..6f19ef7ac64677b08769c35cd805acb5edff69a7
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/adapter/TypeAdapter.java
@@ -0,0 +1,10 @@
+package io.papermc.paper.property.adapter;
+
+public interface TypeAdapter<PLATFORM_TYPE, RUNTIME_TYPE> {
+
+    PLATFORM_TYPE toPlatform(RUNTIME_TYPE runtimeType);
+
+    RUNTIME_TYPE toRuntime(PLATFORM_TYPE platformType);
+
+
+}
diff --git a/src/main/java/io/papermc/paper/property/adapter/ValueTypeAdapter.java b/src/main/java/io/papermc/paper/property/adapter/ValueTypeAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..16aea9c70aa79fe0120f23354e6a94974c62aeef
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/adapter/ValueTypeAdapter.java
@@ -0,0 +1,13 @@
+package io.papermc.paper.property.adapter;
+
+import io.papermc.paper.property.PropertyKey;
+import io.papermc.paper.property.PropertyView;
+
+public interface ValueTypeAdapter<RUNTIME_TYPE, HOLDER extends PropertyView> {
+
+    RUNTIME_TYPE getValue(HOLDER holder, PropertyKey<RUNTIME_TYPE> propertyKey);
+
+    void writeDirect(HOLDER holder, PropertyKey<?> propertyKey, RUNTIME_TYPE direct);
+
+    RUNTIME_TYPE getNewValue(HOLDER holder, PropertyKey<RUNTIME_TYPE> propertyKey);
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/AdapterContext.java b/src/main/java/io/papermc/paper/property/nbt/AdapterContext.java
new file mode 100644
index 0000000000000000000000000000000000000000..b8f9b584ca86b1348d0980a2ded20a555d36bc5f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/AdapterContext.java
@@ -0,0 +1,45 @@
+package io.papermc.paper.property.nbt;
+
+import io.papermc.paper.property.PropertyKey;
+import org.bukkit.util.Consumer;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class AdapterContext {
+
+    private final Map<PropertyKey<?>, NbtPlatformAdapter<?>> adapters = new HashMap<>();
+    private boolean locked = false;
+
+    public static AdapterContext empty() {
+        return new AdapterContext();
+    }
+
+    public <T> void register(PropertyKey<T> key, NbtPlatformAdapter<T> adapter) {
+        if (locked) {
+            throw new IllegalStateException("Cannot dynamically register property types");
+        }
+
+        this.adapters.put(key, adapter);
+    }
+
+    public void lockRegistration() {
+        this.locked = true;
+    }
+
+    public static AdapterContext of(Consumer<AdapterContext> consumer) {
+        AdapterContext context = new AdapterContext();
+        consumer.accept(context);
+        context.lockRegistration();
+        return context;
+    }
+
+
+    public NbtPlatformAdapter getAdapter(PropertyKey key) {
+        NbtPlatformAdapter adapter = this.adapters.get(key);
+        if (adapter == null) {
+            throw new UnsupportedOperationException("Unimplemented adapter for NBT tag: " + key);
+        }
+        return adapter;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/NbtPlatformAdapter.java b/src/main/java/io/papermc/paper/property/nbt/NbtPlatformAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..661bda75180e9a56ac21ad9b31a7eacae1fd50cf
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/NbtPlatformAdapter.java
@@ -0,0 +1,12 @@
+package io.papermc.paper.property.nbt;
+
+import io.papermc.paper.property.PropertyKey;
+import io.papermc.paper.property.adapter.ValueTypeAdapter;
+
+public interface NbtPlatformAdapter<TYPE> extends ValueTypeAdapter<TYPE, NbtPropertyHolder> {
+    int getTagType();
+
+    default void removeDirect(NbtPropertyHolder nbtPropertyHolder, PropertyKey<TYPE> propertyKey) {
+        nbtPropertyHolder.getCompoundTag().remove(propertyKey.getKey());
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/NbtPropertyHolder.java b/src/main/java/io/papermc/paper/property/nbt/NbtPropertyHolder.java
new file mode 100644
index 0000000000000000000000000000000000000000..8233d63afc559bbe1e36b55e3d0997e187f950ef
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/NbtPropertyHolder.java
@@ -0,0 +1,152 @@
+package io.papermc.paper.property.nbt;
+
+import io.papermc.paper.item.property.ItemPropertyRegistration;
+import io.papermc.paper.property.MutablePropertyView;
+import io.papermc.paper.property.PropertyKey;
+import net.minecraft.nbt.CompoundTag;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Objects;
+import java.util.Set;
+
+@SuppressWarnings("unchecked")
+public class NbtPropertyHolder implements MutablePropertyView {
+
+    private final AdapterContext adapterContext;
+    private final CompoundTag compoundTag;
+
+    // TODO cleanup.
+    // Properly pass a context object in places
+    public static NbtPropertyHolder simpleBlob(CompoundTag compoundTag, AdapterContext context) {
+        return new NbtPropertyHolder(context, compoundTag);
+    }
+
+    NbtPropertyHolder(AdapterContext adapterContext, CompoundTag compoundTag) {
+        if (compoundTag == null) {
+            throw new IllegalArgumentException("Cannot have null compound tag.");
+        }
+
+        this.adapterContext = adapterContext;
+        this.compoundTag = compoundTag;
+    }
+
+    public static MutablePropertyView itemHolder(CompoundTag compoundTag) {
+        return io.papermc.paper.property.nbt.NbtPropertyHolder.simpleBlob(compoundTag, ItemPropertyRegistration.ITEM_CONTEXT);
+    }
+
+    public static MutablePropertyView empty() {
+        return new NbtPropertyHolder(AdapterContext.empty(), new CompoundTag());
+    }
+
+    @Override
+    public <T> void unset(PropertyKey<T> key) {
+        this.compoundTag.remove(key.getKey());
+    }
+
+    @Override
+    public <T> void set(PropertyKey<T> key, T value) {
+        NbtPlatformAdapter adapter = this.getAdapter(key);
+        if (value != null) {
+            adapter.writeDirect(this, key, value);
+        } else {
+            adapter.removeDirect(this, key);
+        }
+    }
+
+    @Override
+    public <T> T create(PropertyKey<T> key) {
+        NbtPlatformAdapter adapter = this.getAdapter(key);
+        return (T) adapter.getNewValue(this, key);
+    }
+
+    @Override
+    public <T> T getOrCreate(PropertyKey<T> key) {
+        NbtPlatformAdapter adapter = this.getAdapter(key);
+
+        if (!this.compoundTag.contains(key.getKey(), adapter.getTagType())) {
+            return (T) adapter.getNewValue(this, key);
+        }
+
+        return (T) adapter.getValue(this, key);
+    }
+
+    @Override
+    public MutablePropertyView clone() {
+        CompoundTag cloned = this.compoundTag.copy();
+        return new NbtPropertyHolder(this.adapterContext, cloned);
+    }
+
+    @Override
+    public void clear() {
+        this.compoundTag.tags.clear();
+    }
+
+    @Override
+    public <T> @Nullable T get(PropertyKey<T> key) {
+        NbtPlatformAdapter adapter = this.getAdapter(key);
+        if (adapter == null) {
+            throw new UnsupportedOperationException("No adapter for: " + key);
+        }
+
+        return (T) adapter.getValue(this, key);
+    }
+
+    @Override
+    public <T> @Nullable T getOrDefault(@NotNull PropertyKey<T> key, T defaultValue) {
+        T returnedValue = this.get(key);
+        if (returnedValue == null) {
+            return defaultValue;
+        }
+
+        return returnedValue;
+    }
+
+    @Override
+    public boolean hasProperty(@NotNull PropertyKey<?> propertyKey) {
+        return this.compoundTag.contains(propertyKey.getKey());
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return this.compoundTag.isEmpty();
+    }
+
+    public @NotNull Set<String> keySet() {
+        return this.compoundTag.getAllKeys();
+    }
+
+
+    public CompoundTag getCompoundTag() {
+        return compoundTag;
+    }
+
+    public NbtPlatformAdapter getAdapter(PropertyKey key) {
+        return this.adapterContext.getAdapter(key);
+    }
+
+    public AdapterContext getContext() {
+        return this.adapterContext;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        NbtPropertyHolder holder = (NbtPropertyHolder) o;
+        return Objects.equals(compoundTag, holder.compoundTag);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(compoundTag);
+    }
+
+    @Override
+    public String toString() {
+        return "NbtPropertyHolder{" +
+            "adapterContext=" + adapterContext +
+            ", compoundTag=" + compoundTag +
+            '}';
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/pdc/LivePersistentDataContainer.java b/src/main/java/io/papermc/paper/property/nbt/pdc/LivePersistentDataContainer.java
new file mode 100644
index 0000000000000000000000000000000000000000..cb596c72d3e141077597b5f35b26a7d33106fe3b
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/pdc/LivePersistentDataContainer.java
@@ -0,0 +1,170 @@
+package io.papermc.paper.property.nbt.pdc;
+
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.Tag;
+import org.apache.commons.lang.Validate;
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataAdapterContext;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry;
+import org.bukkit.persistence.PersistentDataAdapterContext;
+import org.bukkit.persistence.PersistentDataContainer;
+import org.bukkit.persistence.PersistentDataType;
+
+import java.util.HashSet;
+import java.util.Objects;
+import java.util.Set;
+
+public class LivePersistentDataContainer implements PersistentDataContainer {
+
+    private final CompoundTag compoundTag;
+    private final CraftPersistentDataTypeRegistry registry;
+    private final CraftPersistentDataAdapterContext adapterContext;
+
+    public LivePersistentDataContainer(CompoundTag compoundTag, CraftPersistentDataTypeRegistry registry) {
+        this.compoundTag = compoundTag;
+        this.registry = registry;
+        this.adapterContext = new CraftPersistentDataAdapterContext(this.registry);
+    }
+
+
+    @Override
+    public <T, Z> void set(NamespacedKey key, PersistentDataType<T, Z> type, Z value) {
+        Validate.notNull(key, "The provided key for the custom value was null");
+        Validate.notNull(type, "The provided type for the custom value was null");
+        Validate.notNull(value, "The provided value for the custom value was null");
+
+        this.compoundTag.put(key.toString(), this.registry.wrap(type.getPrimitiveType(), type.toPrimitive(value, adapterContext)));
+    }
+
+    @Override
+    public <T, Z> boolean has(NamespacedKey key, PersistentDataType<T, Z> type) {
+        Validate.notNull(key, "The provided key for the custom value was null");
+        Validate.notNull(type, "The provided type for the custom value was null");
+
+        Tag value = this.compoundTag.get(key.toString());
+        if (value == null) {
+            return false;
+        }
+
+        return this.registry.isInstanceOf(type.getPrimitiveType(), value);
+    }
+
+    @Override
+    public <T, Z> Z get(NamespacedKey key, PersistentDataType<T, Z> type) {
+        Validate.notNull(key, "The provided key for the custom value was null");
+        Validate.notNull(type, "The provided type for the custom value was null");
+
+        Tag value = this.compoundTag.get(key.toString());
+        if (value == null) {
+            return null;
+        }
+
+        return type.fromPrimitive(this.registry.extract(type.getPrimitiveType(), value), adapterContext);
+    }
+
+    @Override
+    public <T, Z> Z getOrDefault(NamespacedKey key, PersistentDataType<T, Z> type, Z defaultValue) {
+        Z z = this.get(key, type);
+        return z != null ? z : defaultValue;
+    }
+
+    @Override
+    public Set<NamespacedKey> getKeys() {
+        Set<NamespacedKey> keys = new HashSet<>();
+
+        this.compoundTag.getAllKeys().forEach(key -> {
+            String[] keyData = key.split(":", 2);
+            if (keyData.length == 2) {
+                keys.add(new NamespacedKey(keyData[0], keyData[1]));
+            }
+        });
+
+        return keys;
+    }
+
+    @Override
+    public void remove(NamespacedKey key) {
+        Validate.notNull(key, "The provided key for the custom value was null");
+
+        this.compoundTag.remove(key.toString());
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return this.compoundTag.isEmpty();
+    }
+
+    @Override
+    public PersistentDataAdapterContext getAdapterContext() {
+        return this.adapterContext;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        LivePersistentDataContainer that = (LivePersistentDataContainer) o;
+        return Objects.equals(compoundTag, that.compoundTag);
+    }
+
+    public CompoundTag toTagCompound() {
+        return compoundTag;
+    }
+
+    public void put(String key, Tag base) {
+        this.compoundTag.put(key, base);
+    }
+
+    public void putAll(CompoundTag compound) {
+        for (String key : compound.getAllKeys()) {
+            this.compoundTag.put(key, compound.get(key));
+        }
+    }
+
+
+    public CraftPersistentDataTypeRegistry getDataTagTypeRegistry() {
+        return this.registry;
+    }
+
+    @Override
+    public int hashCode() {
+        int hashCode = 3;
+        hashCode += this.compoundTag.hashCode(); // We will simply add the maps hashcode
+        return hashCode;
+    }
+
+
+    // Paper start
+    public void clear() {
+        this.compoundTag.tags.clear();
+    }
+
+    @Override
+    public boolean has(NamespacedKey key) {
+        Validate.notNull(key, "The provided key for the custom value was null");
+
+        return this.compoundTag.contains(key.toString());
+    }
+
+    @Override
+    public byte[] serializeToBytes() throws java.io.IOException {
+        net.minecraft.nbt.CompoundTag root = this.toTagCompound();
+        java.io.ByteArrayOutputStream byteArrayOutput = new java.io.ByteArrayOutputStream();
+        try (java.io.DataOutputStream dataOutput = new java.io.DataOutputStream(byteArrayOutput)) {
+            net.minecraft.nbt.NbtIo.write(root, dataOutput);
+            return byteArrayOutput.toByteArray();
+        }
+    }
+
+    @Override
+    public void readFromBytes(byte[] bytes, boolean clear) throws java.io.IOException {
+        if (clear) {
+            this.clear();
+        }
+        try (java.io.DataInputStream dataInput = new java.io.DataInputStream(new java.io.ByteArrayInputStream(bytes))) {
+            net.minecraft.nbt.CompoundTag compound = net.minecraft.nbt.NbtIo.read(dataInput);
+            this.putAll(compound);
+        }
+    }
+    // Paper end
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/AbstractListNbtPlatformAdapter.java b/src/main/java/io/papermc/paper/property/nbt/primitives/AbstractListNbtPlatformAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..e40358b3d81d19c172ed6b62eb02637dd5144f5c
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/AbstractListNbtPlatformAdapter.java
@@ -0,0 +1,39 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import io.papermc.paper.util.TransformingRandomAccessList;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.Tag;
+
+import java.util.List;
+
+public abstract class AbstractListNbtPlatformAdapter<T> extends NbtPrimitiveWrapper<List<T>, ListTag> {
+
+    public AbstractListNbtPlatformAdapter() {
+        super(new ListTagPrimitive());
+    }
+
+    @Override
+    public List<T> fromPrimitive(ListTag primitive) {
+        return new TransformingRandomAccessList<>(primitive.list, this::deserialize, this::serialize);
+    }
+
+    @Override
+    public ListTag toPrimitive(List<T> type) {
+        ListTag listTag = new ListTag();
+        for (T object : type) {
+            listTag.add(serialize(object));
+        }
+
+        return listTag;
+    }
+
+    public abstract T deserialize(Tag tag);
+
+    public abstract Tag serialize(T value);
+
+
+    @Override
+    public int getTagType() {
+        return Tag.TAG_LIST;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/BlockPositionNbtPrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/BlockPositionNbtPrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..7eed7ce505090bb1f455976aec256c0f051612f4
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/BlockPositionNbtPrimitive.java
@@ -0,0 +1,26 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import io.papermc.paper.math.Position;
+import net.minecraft.core.BlockPos;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.NbtUtils;
+import net.minecraft.nbt.Tag;
+
+public class BlockPositionNbtPrimitive extends SinglePrimitiveNbtPlatformAdapter<Position> {
+
+    @Override
+    public int getTagType() {
+        return Tag.TAG_COMPOUND;
+    }
+
+    @Override
+    public Position getType(Tag tag) {
+        BlockPos pos = NbtUtils.readBlockPos((CompoundTag) tag);
+        return Position.block(pos.getX(), pos.getY(), pos.getZ());
+    }
+
+    @Override
+    public Tag write(Position type) {
+        return NbtUtils.writeBlockPos(new BlockPos(type.blockZ(), type.blockY(), type.blockZ()));
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/BooleanPrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/BooleanPrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..1b192a7cb4196ad94c8ebbe4590280c103b8de84
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/BooleanPrimitive.java
@@ -0,0 +1,24 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import net.minecraft.nbt.ByteTag;
+import net.minecraft.nbt.IntTag;
+import net.minecraft.nbt.Tag;
+
+public class BooleanPrimitive extends SinglePrimitiveNbtPlatformAdapter<Boolean> {
+
+    @Override
+    public int getTagType() {
+        return IntTag.TAG_BYTE;
+    }
+
+    @Override
+    public Boolean getType(Tag tag) {
+        return ((ByteTag) tag).getAsByte() != 0;
+    }
+
+    @Override
+    public Tag write(Boolean type) {
+        return ByteTag.valueOf(type);
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/BytePrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/BytePrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..70d6603f2d28d93e4b7ae87079199e3160c1d849
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/BytePrimitive.java
@@ -0,0 +1,24 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import net.minecraft.nbt.ByteTag;
+import net.minecraft.nbt.IntTag;
+import net.minecraft.nbt.Tag;
+
+public class BytePrimitive extends SinglePrimitiveNbtPlatformAdapter<Byte> {
+
+    @Override
+    public int getTagType() {
+        return IntTag.TAG_BYTE;
+    }
+
+    @Override
+    public Byte getType(Tag tag) {
+        return ((ByteTag) tag).getAsByte();
+    }
+
+    @Override
+    public Tag write(Byte type) {
+        return ByteTag.valueOf(type);
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/ColorNbtPrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/ColorNbtPrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..65a9fb79a91ade533128d36ef8ac88bbbba27415
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/ColorNbtPrimitive.java
@@ -0,0 +1,20 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import org.bukkit.Color;
+
+public class ColorNbtPrimitive extends NbtPrimitiveWrapper<Color, Integer> {
+
+    public ColorNbtPrimitive() {
+        super(new IntegerPrimitive());
+    }
+
+    @Override
+    public Color fromPrimitive(Integer primitive) {
+        return Color.fromRGB(primitive);
+    }
+
+    @Override
+    public Integer toPrimitive(Color type) {
+        return type.asRGB();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/ComponentNbtPrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/ComponentNbtPrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..fd501ae1b53eacfd1a83d5c8268709333f247b47
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/ComponentNbtPrimitive.java
@@ -0,0 +1,21 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
+
+public class ComponentNbtPrimitive extends NbtPrimitiveWrapper<Component, String> {
+
+    public ComponentNbtPrimitive() {
+        super(new StringPrimitive());
+    }
+
+    @Override
+    public Component fromPrimitive(String primitive) {
+        return GsonComponentSerializer.gson().deserialize(primitive);
+    }
+
+    @Override
+    public String toPrimitive(Component type) {
+        return GsonComponentSerializer.gson().serialize(type);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/CompoundTagPrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/CompoundTagPrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..309327df89e33f021762affb2484fffbf953fac0
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/CompoundTagPrimitive.java
@@ -0,0 +1,23 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.IntTag;
+import net.minecraft.nbt.Tag;
+
+public class CompoundTagPrimitive extends SinglePrimitiveNbtPlatformAdapter<CompoundTag> {
+
+    @Override
+    public int getTagType() {
+        return IntTag.TAG_COMPOUND;
+    }
+
+    @Override
+    public CompoundTag getType(Tag tag) {
+        return (CompoundTag) tag;
+    }
+
+    @Override
+    public Tag write(CompoundTag type) {
+        return type;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/IntegerPrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/IntegerPrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..ca3d8e62c6cf7d16fa6af95a2e37a04550e2f0f2
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/IntegerPrimitive.java
@@ -0,0 +1,23 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import net.minecraft.nbt.IntTag;
+import net.minecraft.nbt.Tag;
+
+public class IntegerPrimitive extends SinglePrimitiveNbtPlatformAdapter<Integer> {
+
+    @Override
+    public int getTagType() {
+        return IntTag.TAG_INT;
+    }
+
+    @Override
+    public Integer getType(Tag tag) {
+        return ((IntTag) tag).getAsInt();
+    }
+
+    @Override
+    public Tag write(Integer type) {
+        return IntTag.valueOf(type);
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/ItemStackNbtPrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/ItemStackNbtPrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..a2f422db63ca15889d66c70072dd7da87a4a2f83
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/ItemStackNbtPrimitive.java
@@ -0,0 +1,24 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.Tag;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.inventory.ItemStack;
+
+public class ItemStackNbtPrimitive extends SinglePrimitiveNbtPlatformAdapter<ItemStack> {
+
+    @Override
+    public int getTagType() {
+        return Tag.TAG_COMPOUND;
+    }
+
+    @Override
+    public ItemStack getType(Tag tag) {
+        return CraftItemStack.asCraftMirror(net.minecraft.world.item.ItemStack.of((CompoundTag) tag));
+    }
+
+    @Override
+    public Tag write(ItemStack type) {
+        return (type instanceof CraftItemStack ? ((CraftItemStack) type).handle : CraftItemStack.asNMSCopy(type)).save(new CompoundTag());
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/KeyedRegistryPrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/KeyedRegistryPrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..6ba22dfca32d26a32838b3fa42c18b4e9d379204
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/KeyedRegistryPrimitive.java
@@ -0,0 +1,28 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import org.bukkit.NamespacedKey;
+
+import java.util.function.Function;
+
+public class KeyedRegistryPrimitive<T> extends NbtPrimitiveWrapper<T, NamespacedKey> {
+
+    private final Function<NamespacedKey, T> consumer;
+    private final Function<T, NamespacedKey> converter;
+
+    public KeyedRegistryPrimitive(Function<NamespacedKey, T> consumer, Function<T, NamespacedKey> converter) {
+        super(new NamespaceKeyNbtPrimitive());
+        this.consumer = consumer;
+        this.converter = converter;
+    }
+
+
+    @Override
+    public T fromPrimitive(NamespacedKey primitive) {
+        return this.consumer.apply(primitive);
+    }
+
+    @Override
+    public NamespacedKey toPrimitive(T type) {
+        return this.converter.apply(type);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/ListTagPrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/ListTagPrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..a090b21fd707f3941f89ffa2657685f268245c9e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/ListTagPrimitive.java
@@ -0,0 +1,23 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import net.minecraft.nbt.IntTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.Tag;
+
+public class ListTagPrimitive extends SinglePrimitiveNbtPlatformAdapter<ListTag> {
+
+    @Override
+    public int getTagType() {
+        return IntTag.TAG_LIST;
+    }
+
+    @Override
+    public ListTag getType(Tag tag) {
+        return (ListTag) tag;
+    }
+
+    @Override
+    public Tag write(ListTag type) {
+        return type;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/NamespaceKeyNbtPrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/NamespaceKeyNbtPrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..c1fe17fd099b09655c36ee1d42385764cfd38816
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/NamespaceKeyNbtPrimitive.java
@@ -0,0 +1,20 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import org.bukkit.NamespacedKey;
+
+public class NamespaceKeyNbtPrimitive extends NbtPrimitiveWrapper<NamespacedKey, String> {
+
+    public NamespaceKeyNbtPrimitive() {
+        super(new StringPrimitive());
+    }
+
+    @Override
+    public NamespacedKey fromPrimitive(String primitive) {
+        return NamespacedKey.fromString(primitive);
+    }
+
+    @Override
+    public String toPrimitive(NamespacedKey type) {
+        return type.toString();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/NbtPrimitiveWrapper.java b/src/main/java/io/papermc/paper/property/nbt/primitives/NbtPrimitiveWrapper.java
new file mode 100644
index 0000000000000000000000000000000000000000..434601041bb94248902f82d9409e6ab1162f9e9f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/NbtPrimitiveWrapper.java
@@ -0,0 +1,41 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import io.papermc.paper.property.PropertyKey;
+import io.papermc.paper.property.nbt.NbtPropertyHolder;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.Tag;
+
+public abstract class NbtPrimitiveWrapper<T, P> extends SinglePrimitiveNbtPlatformAdapter<T> {
+
+    private final SinglePrimitiveNbtPlatformAdapter<P> primitive;
+
+    public NbtPrimitiveWrapper(SinglePrimitiveNbtPlatformAdapter<P> primitive) {
+        this.primitive = primitive;
+    }
+
+    @Override
+    public int getTagType() {
+        return this.primitive.getTagType();
+    }
+
+    @Override
+    public T getType(Tag tag) {
+        return this.fromPrimitive(this.primitive.getType(tag));
+    }
+
+    @Override
+    public Tag write(T type) {
+        return this.primitive.write(this.toPrimitive(type));
+    }
+
+    @Override
+    public T getNewValue(NbtPropertyHolder holder, PropertyKey<T> propertyKey) {
+        holder.getCompoundTag().put(propertyKey.getKey(), new CompoundTag());
+        return this.getValue(holder, propertyKey);
+    }
+
+    public abstract T fromPrimitive(P primitive);
+
+    public abstract P toPrimitive(T type);
+
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/SinglePrimitiveNbtPlatformAdapter.java b/src/main/java/io/papermc/paper/property/nbt/primitives/SinglePrimitiveNbtPlatformAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..7d1e2484459d4ce2ef41df67f8b2ac0113d4e962
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/SinglePrimitiveNbtPlatformAdapter.java
@@ -0,0 +1,44 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import io.papermc.paper.property.PropertyKey;
+import io.papermc.paper.property.nbt.NbtPlatformAdapter;
+import io.papermc.paper.property.nbt.NbtPropertyHolder;
+import net.minecraft.nbt.Tag;
+
+public abstract class SinglePrimitiveNbtPlatformAdapter<T> implements NbtPlatformAdapter<T> {
+
+    @Override
+    public T getValue(NbtPropertyHolder holder, PropertyKey<T> propertyKey) {
+
+        // See get direct
+        Tag tag = holder.getCompoundTag().get(propertyKey.getKey());
+        if (tag != null && tag.getId() == SinglePrimitiveNbtPlatformAdapter.this.getTagType()) {
+            return SinglePrimitiveNbtPlatformAdapter.this.getType(tag);
+        }
+
+        return null;
+    }
+
+    @Override
+    public T getNewValue(NbtPropertyHolder holder, PropertyKey<T> propertyKey) {
+        return null;
+    }
+
+    public T getDirect(NbtPropertyHolder holder, PropertyKey<?> propertyKey) {
+        Tag tag = holder.getCompoundTag().get(propertyKey.getKey());
+        if (tag != null && tag.getId() == SinglePrimitiveNbtPlatformAdapter.this.getTagType()) {
+            return SinglePrimitiveNbtPlatformAdapter.this.getType(tag);
+        }
+
+        return null;
+    }
+
+    @Override
+    public void writeDirect(NbtPropertyHolder holder, PropertyKey<?> propertyKey, T direct) {
+        holder.getCompoundTag().put(propertyKey.getKey(), this.write(direct));
+    }
+
+    public abstract T getType(Tag tag);
+
+    public abstract Tag write(T type);
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/primitives/StringPrimitive.java b/src/main/java/io/papermc/paper/property/nbt/primitives/StringPrimitive.java
new file mode 100644
index 0000000000000000000000000000000000000000..9e4dfed6ac406391ac3205b0e9028ff1607a7f54
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/primitives/StringPrimitive.java
@@ -0,0 +1,24 @@
+package io.papermc.paper.property.nbt.primitives;
+
+import net.minecraft.nbt.IntTag;
+import net.minecraft.nbt.StringTag;
+import net.minecraft.nbt.Tag;
+
+public class StringPrimitive extends SinglePrimitiveNbtPlatformAdapter<String> {
+
+    @Override
+    public int getTagType() {
+        return IntTag.TAG_STRING;
+    }
+
+    @Override
+    public String getType(Tag tag) {
+        return ((StringTag) tag).getAsString();
+    }
+
+    @Override
+    public Tag write(String type) {
+        return StringTag.valueOf(type);
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/AttributeMap.java b/src/main/java/io/papermc/paper/property/nbt/types/AttributeMap.java
new file mode 100644
index 0000000000000000000000000000000000000000..4a46804f74aaa2188313ae5a3dcf856e1e8900ea
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/AttributeMap.java
@@ -0,0 +1,63 @@
+package io.papermc.paper.property.nbt.types;
+
+import io.papermc.paper.inventory.item.properties.AttributePair;
+import io.papermc.paper.property.PropertyKey;
+import io.papermc.paper.property.nbt.AdapterContext;
+import io.papermc.paper.property.nbt.NbtPropertyHolder;
+import io.papermc.paper.property.nbt.primitives.AbstractListNbtPlatformAdapter;
+import io.papermc.paper.property.nbt.primitives.StringPrimitive;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.resources.ResourceLocation;
+import org.bukkit.Registry;
+import org.bukkit.attribute.AttributeModifier;
+import org.bukkit.craftbukkit.CraftEquipmentSlot;
+import org.bukkit.craftbukkit.attribute.CraftAttributeInstance;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+
+import java.util.Optional;
+
+public class AttributeMap extends AbstractListNbtPlatformAdapter<AttributePair> {
+
+    private static final PropertyKey<String> ATTRIBUTE_SLOT = PropertyKey.of("Slot", String.class);
+    private static final PropertyKey<String> ATTRIBUTE_NAME = PropertyKey.of("AttributeName", String.class);
+    private static final StringPrimitive PRIMITIVE = new StringPrimitive();
+
+    @Override
+    public AttributePair deserialize(Tag tag) {
+        CompoundTag compoundTag = (CompoundTag) tag;
+        NbtPropertyHolder holder = NbtPropertyHolder.simpleBlob(compoundTag, AdapterContext.of((context) -> {
+            context.register(ATTRIBUTE_NAME, new StringPrimitive());
+        }));
+
+        ResourceLocation attributeName = ResourceLocation.tryParse(PRIMITIVE.getDirect(holder, ATTRIBUTE_NAME));
+
+        Optional<net.minecraft.world.entity.ai.attributes.Attribute> optional = BuiltInRegistries.ATTRIBUTE.getOptional(attributeName);
+        if (optional.isPresent()) {
+            net.minecraft.world.entity.ai.attributes.AttributeModifier modifier = net.minecraft.world.entity.ai.attributes.AttributeModifier.load(compoundTag);
+            return new AttributePair(Registry.ATTRIBUTE.get(CraftNamespacedKey.fromMinecraft(attributeName)), CraftAttributeInstance.convert(modifier));
+        }
+
+        return null;
+    }
+
+    @Override
+    public Tag serialize(AttributePair value) {
+        AttributeModifier attributeModifier = value.modifier();
+        net.minecraft.world.entity.ai.attributes.AttributeModifier nmsModifier = CraftAttributeInstance.convert(attributeModifier);
+
+        NbtPropertyHolder attributeHolder = NbtPropertyHolder.simpleBlob(nmsModifier.save(), AdapterContext.of((context) -> {
+            context.register(ATTRIBUTE_NAME, new StringPrimitive());
+            context.register(ATTRIBUTE_SLOT, new StringPrimitive());
+        }));
+
+        attributeHolder.set(ATTRIBUTE_NAME, attributeModifier.getName());
+        if (attributeModifier.getSlot() != null) {
+            attributeHolder.set(ATTRIBUTE_SLOT, CraftEquipmentSlot.getNMS(attributeModifier.getSlot()).name());
+        }
+
+        return attributeHolder.getCompoundTag();
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/AxolotlVariantNbt.java b/src/main/java/io/papermc/paper/property/nbt/types/AxolotlVariantNbt.java
new file mode 100644
index 0000000000000000000000000000000000000000..97bedb86cfaeb5cd1f0ea655b04c91a8ec4c0656
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/AxolotlVariantNbt.java
@@ -0,0 +1,22 @@
+package io.papermc.paper.property.nbt.types;
+
+import io.papermc.paper.property.nbt.primitives.IntegerPrimitive;
+import io.papermc.paper.property.nbt.primitives.NbtPrimitiveWrapper;
+import org.bukkit.entity.Axolotl;
+
+public class AxolotlVariantNbt extends NbtPrimitiveWrapper<Axolotl.Variant, Integer> {
+
+    public AxolotlVariantNbt() {
+        super(new IntegerPrimitive());
+    }
+
+    @Override
+    public Axolotl.Variant fromPrimitive(Integer primitive) {
+        return Axolotl.Variant.values()[primitive];
+    }
+
+    @Override
+    public Integer toPrimitive(Axolotl.Variant type) {
+        return type.ordinal();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/CompoundTagNbt.java b/src/main/java/io/papermc/paper/property/nbt/types/CompoundTagNbt.java
new file mode 100644
index 0000000000000000000000000000000000000000..e28cc24a74ea783da94bc8d4d65355cab6880d2c
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/CompoundTagNbt.java
@@ -0,0 +1,33 @@
+package io.papermc.paper.property.nbt.types;
+
+import io.papermc.paper.property.MutablePropertyView;
+import io.papermc.paper.property.nbt.AdapterContext;
+import io.papermc.paper.property.nbt.NbtPropertyHolder;
+import io.papermc.paper.property.nbt.primitives.CompoundTagPrimitive;
+import io.papermc.paper.property.nbt.primitives.NbtPrimitiveWrapper;
+import net.minecraft.nbt.CompoundTag;
+
+public class CompoundTagNbt extends NbtPrimitiveWrapper<MutablePropertyView, CompoundTag> {
+
+    private final AdapterContext context;
+
+    public CompoundTagNbt(AdapterContext context) {
+        super(new CompoundTagPrimitive());
+        this.context = context;
+    }
+
+    @Override
+    public MutablePropertyView fromPrimitive(CompoundTag primitive) {
+        NbtPropertyHolder wrappedholder = NbtPropertyHolder.simpleBlob(primitive, this.context);
+        return wrappedholder;
+    }
+
+    @Override
+    public CompoundTag toPrimitive(MutablePropertyView type) {
+        if (type instanceof NbtPropertyHolder nbtPropertyHolder) {
+            return nbtPropertyHolder.getCompoundTag().copy();
+        } else {
+            throw new UnsupportedOperationException(); // TODO ?
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/DyeColorNbt.java b/src/main/java/io/papermc/paper/property/nbt/types/DyeColorNbt.java
new file mode 100644
index 0000000000000000000000000000000000000000..a6eba8250dbfe31efddc1b6105007b7f192f084f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/DyeColorNbt.java
@@ -0,0 +1,23 @@
+package io.papermc.paper.property.nbt.types;
+
+import io.papermc.paper.property.nbt.primitives.IntegerPrimitive;
+import io.papermc.paper.property.nbt.primitives.NbtPrimitiveWrapper;
+import org.bukkit.DyeColor;
+import org.bukkit.entity.Axolotl;
+
+public class DyeColorNbt extends NbtPrimitiveWrapper<DyeColor, Integer> {
+
+    public DyeColorNbt() {
+        super(new IntegerPrimitive());
+    }
+
+    @Override
+    public DyeColor fromPrimitive(Integer primitive) {
+        return DyeColor.values()[primitive];
+    }
+
+    @Override
+    public Integer toPrimitive(DyeColor type) {
+        return type.ordinal();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/EnchantmentList.java b/src/main/java/io/papermc/paper/property/nbt/types/EnchantmentList.java
new file mode 100644
index 0000000000000000000000000000000000000000..0add0153e4fb04b19b9edc499cadb25d45f53045
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/EnchantmentList.java
@@ -0,0 +1,28 @@
+package io.papermc.paper.property.nbt.types;
+
+import io.papermc.paper.inventory.item.properties.EnchantmentPair;
+import io.papermc.paper.property.nbt.primitives.AbstractListNbtPlatformAdapter;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.world.item.enchantment.EnchantmentHelper;
+import org.bukkit.craftbukkit.enchantments.CraftEnchantment;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.enchantments.Enchantment;
+
+public class EnchantmentList extends AbstractListNbtPlatformAdapter<EnchantmentPair> {
+
+    @Override
+    public EnchantmentPair deserialize(Tag tag) {
+        CompoundTag compoundTag = (CompoundTag) tag;
+        Enchantment enchantment = Enchantment.getByKey(CraftNamespacedKey.fromMinecraft(EnchantmentHelper.getEnchantmentId(compoundTag)));
+        int level = EnchantmentHelper.getEnchantmentLevel(compoundTag);
+
+        return new EnchantmentPair(enchantment, level);
+    }
+
+    @Override
+    public Tag serialize(EnchantmentPair pair) {
+        return EnchantmentHelper.storeEnchantment(EnchantmentHelper.getEnchantmentId(CraftEnchantment.getRaw(pair.enchantment())), pair.level());
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/GameProfileNbt.java b/src/main/java/io/papermc/paper/property/nbt/types/GameProfileNbt.java
new file mode 100644
index 0000000000000000000000000000000000000000..f4b7b0dbfa13aabde5ba75cad31a70de793d3b7a
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/GameProfileNbt.java
@@ -0,0 +1,27 @@
+package io.papermc.paper.property.nbt.types;
+
+import com.destroystokyo.paper.profile.CraftPlayerProfile;
+import com.destroystokyo.paper.profile.PlayerProfile;
+import io.papermc.paper.property.nbt.primitives.CompoundTagPrimitive;
+import io.papermc.paper.property.nbt.primitives.NbtPrimitiveWrapper;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.NbtUtils;
+
+public class GameProfileNbt extends NbtPrimitiveWrapper<PlayerProfile, CompoundTag> {
+
+    public GameProfileNbt() {
+        super(new CompoundTagPrimitive());
+    }
+
+    @Override
+    public PlayerProfile fromPrimitive(CompoundTag primitive) {
+        return new CraftPlayerProfile(NbtUtils.readGameProfile(primitive));
+    }
+
+    @Override
+    public CompoundTag toPrimitive(PlayerProfile type) {
+        CompoundTag profile = new CompoundTag();
+        NbtUtils.writeGameProfile(profile, ((CraftPlayerProfile) type).getGameProfile());
+        return profile;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/ItemFlagBitset.java b/src/main/java/io/papermc/paper/property/nbt/types/ItemFlagBitset.java
new file mode 100644
index 0000000000000000000000000000000000000000..e1cbd547995e543f6221c53d95d4fa1a6b7bfdec
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/ItemFlagBitset.java
@@ -0,0 +1,47 @@
+package io.papermc.paper.property.nbt.types;
+
+import io.papermc.paper.property.nbt.primitives.IntegerPrimitive;
+import io.papermc.paper.property.nbt.primitives.NbtPrimitiveWrapper;
+import org.bukkit.inventory.ItemFlag;
+
+import java.util.EnumSet;
+import java.util.Set;
+
+public class ItemFlagBitset extends NbtPrimitiveWrapper<Set<ItemFlag>, Integer> {
+
+    public ItemFlagBitset() {
+        super(new IntegerPrimitive());
+    }
+
+    @Override
+    public Set<ItemFlag> fromPrimitive(Integer primitive) {
+        Set<ItemFlag> currentFlags = EnumSet.noneOf(ItemFlag.class);
+
+        for (ItemFlag f : ItemFlag.values()) {
+            if (this.contains(f, primitive)) {
+                currentFlags.add(f);
+            }
+        }
+
+        return currentFlags;
+    }
+
+    @Override
+    public Integer toPrimitive(Set<ItemFlag> type) {
+        int flags = 0;
+        for (ItemFlag itemFlag : type) {
+            flags |= this.getBitModifier(itemFlag);
+        }
+        return flags;
+    }
+
+    private boolean contains(ItemFlag itemFlag, int flags) {
+        int bitModifier = ItemFlagBitset.this.getBitModifier(itemFlag);
+        return (flags & bitModifier) == bitModifier;
+    }
+
+    private byte getBitModifier(ItemFlag hideFlag) {
+        return (byte) (1 << hideFlag.ordinal());
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/StewEffectsListNbt.java b/src/main/java/io/papermc/paper/property/nbt/types/StewEffectsListNbt.java
new file mode 100644
index 0000000000000000000000000000000000000000..497d133409358a9b5bf825481e7fe87a8a6fe6e2
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/StewEffectsListNbt.java
@@ -0,0 +1,48 @@
+package io.papermc.paper.property.nbt.types;
+
+import io.papermc.paper.inventory.item.properties.StewEffect;
+import io.papermc.paper.property.PropertyKey;
+import io.papermc.paper.property.nbt.AdapterContext;
+import io.papermc.paper.property.nbt.NbtPropertyHolder;
+import io.papermc.paper.property.nbt.primitives.AbstractListNbtPlatformAdapter;
+import io.papermc.paper.property.nbt.primitives.IntegerPrimitive;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.world.effect.MobEffect;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.potion.PotionEffectType;
+
+public class StewEffectsListNbt extends AbstractListNbtPlatformAdapter<StewEffect> {
+
+    private static final PropertyKey<Integer> EFFECT = PropertyKey.of("EffectId", Integer.class);
+    private static final PropertyKey<Integer> EFFECT_DURATION = PropertyKey.of("EffectDuration", Integer.class);
+
+    private static final AdapterContext CONTEXT = AdapterContext.of((context) -> {
+        context.register(EFFECT, new IntegerPrimitive());
+        context.register(EFFECT_DURATION, new IntegerPrimitive());
+    });
+
+    private static final IntegerPrimitive PRIMITIVE = new IntegerPrimitive();
+
+    @Override
+    public StewEffect deserialize(Tag tag) {
+        NbtPropertyHolder attributeHolder = NbtPropertyHolder.simpleBlob((CompoundTag) tag, CONTEXT);
+
+        int duration = attributeHolder.get(EFFECT_DURATION);
+        MobEffect mobEffect = MobEffect.byId(attributeHolder.get(EFFECT));
+        PotionEffectType type = PotionEffectType.getByKey(CraftNamespacedKey.fromMinecraft(BuiltInRegistries.MOB_EFFECT.getKey(mobEffect)));
+
+        return new StewEffect(type, duration);
+    }
+
+    @Override
+    public Tag serialize(StewEffect type) {
+        NbtPropertyHolder attributeHolder = NbtPropertyHolder.simpleBlob(new CompoundTag(), CONTEXT);
+
+        PRIMITIVE.writeDirect(attributeHolder, EFFECT, BuiltInRegistries.MOB_EFFECT.getId(BuiltInRegistries.MOB_EFFECT.get(CraftNamespacedKey.toMinecraft(type.effect().getKey()))));
+        PRIMITIVE.writeDirect(attributeHolder, EFFECT_DURATION, type.duration());
+
+        return attributeHolder.getCompoundTag();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/TropicalFishVariantNbt.java b/src/main/java/io/papermc/paper/property/nbt/types/TropicalFishVariantNbt.java
new file mode 100644
index 0000000000000000000000000000000000000000..afb1d3dfa407195900708489aab4b5bf5b1c2c96
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/TropicalFishVariantNbt.java
@@ -0,0 +1,24 @@
+package io.papermc.paper.property.nbt.types;
+
+import io.papermc.paper.inventory.item.properties.TropicalFishVariant;
+import io.papermc.paper.property.nbt.primitives.IntegerPrimitive;
+import io.papermc.paper.property.nbt.primitives.NbtPrimitiveWrapper;
+import org.bukkit.Color;
+import org.bukkit.craftbukkit.entity.CraftTropicalFish;
+
+public class TropicalFishVariantNbt extends NbtPrimitiveWrapper<TropicalFishVariant, Integer> {
+
+    public TropicalFishVariantNbt() {
+        super(new IntegerPrimitive());
+    }
+
+    @Override
+    public TropicalFishVariant fromPrimitive(Integer primitive) {
+        return new TropicalFishVariant(CraftTropicalFish.getPatternColor(primitive), CraftTropicalFish.getBodyColor(primitive), CraftTropicalFish.getPattern(primitive));
+    }
+
+    @Override
+    public Integer toPrimitive(TropicalFishVariant type) {
+        return CraftTropicalFish.getData(type.patternColor(), type.bodyColor(), type.type());
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/types/WrappedListNbt.java b/src/main/java/io/papermc/paper/property/nbt/types/WrappedListNbt.java
new file mode 100644
index 0000000000000000000000000000000000000000..040db9232b2e61ded96b6112a64ed84340ad7281
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/types/WrappedListNbt.java
@@ -0,0 +1,29 @@
+package io.papermc.paper.property.nbt.types;
+
+import io.papermc.paper.property.nbt.primitives.AbstractListNbtPlatformAdapter;
+import io.papermc.paper.property.nbt.primitives.SinglePrimitiveNbtPlatformAdapter;
+import net.minecraft.nbt.Tag;
+
+public class WrappedListNbt<T> extends AbstractListNbtPlatformAdapter<T> {
+
+    private final SinglePrimitiveNbtPlatformAdapter<T> wrapper;
+
+    public WrappedListNbt(SinglePrimitiveNbtPlatformAdapter<T> wrapper) {
+        this.wrapper = wrapper;
+    }
+
+    @Override
+    public T deserialize(Tag tag) {
+        return this.wrapper.getType(tag);
+    }
+
+    @Override
+    public Tag serialize(T value) {
+        return this.wrapper.write(value);
+    }
+
+    @Override
+    public int getTagType() {
+        return Tag.TAG_LIST;
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
index 83bbfe1ffd0dc8e168064225a02abcaa49df60ed..b96b1d2880ced6c08ee94d04ba2fc2a581796adf 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
@@ -12,6 +12,7 @@ import org.bukkit.Color;
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.bukkit.craftbukkit.util.CraftLegacy;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.ItemFactory;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
@@ -42,11 +43,11 @@ public final class CraftItemFactory implements ItemFactory {
         if (type == null || meta == null) {
             return false;
         }
-        if (!(meta instanceof CraftMetaItem)) {
+        if (!(meta instanceof io.papermc.paper.item.meta.PaperMeta paperMeta)) { // Paper
             throw new IllegalArgumentException("Meta of " + meta.getClass().toString() + " not created by " + CraftItemFactory.class.getName());
         }
 
-        return ((CraftMetaItem) meta).applicableTo(type);
+        return CraftItemStack.getItemMeta(paperMeta.getPropertyHolder(), type).getClass().isAssignableFrom(meta.getClass()); // Paper
     }
 
     @Override
@@ -57,6 +58,16 @@ public final class CraftItemFactory implements ItemFactory {
 
     private ItemMeta getItemMeta(Material material, CraftMetaItem meta) {
         material = CraftLegacy.fromLegacy(material); // This may be called from legacy item stacks, try to get the right material
+        // Paper start
+        net.minecraft.world.item.ItemStack itemStack = new net.minecraft.world.item.ItemStack(CraftMagicNumbers.getItem(material));
+        if (meta != null) {
+            meta.applyToItem(itemStack.getOrCreateTag());
+        }
+        return CraftItemStack.getItemMeta(itemStack, material);
+    }
+    public ItemMeta getOldItemMeta(Material material, CraftMetaItem meta) {
+    // Paper end
+
         switch (material) {
         case AIR:
             return null;
@@ -341,20 +352,28 @@ public final class CraftItemFactory implements ItemFactory {
         if (meta1 == meta2) {
             return true;
         }
-        if (meta1 != null && !(meta1 instanceof CraftMetaItem)) {
+        if (meta1 != null && !(meta1 instanceof io.papermc.paper.item.meta.PaperMeta)) { // Paper
             throw new IllegalArgumentException("First meta of " + meta1.getClass().getName() + " does not belong to " + CraftItemFactory.class.getName());
         }
-        if (meta2 != null && !(meta2 instanceof CraftMetaItem)) {
+        if (meta2 != null && !(meta2 instanceof io.papermc.paper.item.meta.PaperMeta)) { // Paper
             throw new IllegalArgumentException("Second meta " + meta2.getClass().getName() + " does not belong to " + CraftItemFactory.class.getName());
         }
+        // Paper start
+        io.papermc.paper.property.PropertyView propertyHolder1;
         if (meta1 == null) {
-            return ((CraftMetaItem) meta2).isEmpty();
+            propertyHolder1 = io.papermc.paper.property.nbt.NbtPropertyHolder.empty();
+        } else {
+            propertyHolder1 = ((io.papermc.paper.item.meta.PaperMeta) meta1).getPropertyHolder();
         }
+        io.papermc.paper.property.PropertyView propertyHolder2;
         if (meta2 == null) {
-            return ((CraftMetaItem) meta1).isEmpty();
+            propertyHolder2 = io.papermc.paper.property.nbt.NbtPropertyHolder.empty();
+        } else {
+            propertyHolder2 = ((io.papermc.paper.item.meta.PaperMeta) meta2).getPropertyHolder();
         }
 
-        return this.equals((CraftMetaItem) meta1, (CraftMetaItem) meta2);
+        return propertyHolder1.equals(propertyHolder2);
+        // Paper end
     }
 
     boolean equals(CraftMetaItem meta1, CraftMetaItem meta2) {
@@ -383,10 +402,14 @@ public final class CraftItemFactory implements ItemFactory {
     @Override
     public ItemMeta asMetaFor(ItemMeta meta, Material material) {
         Validate.notNull(material, "Material cannot be null");
-        if (!(meta instanceof CraftMetaItem)) {
+        if (!(meta instanceof io.papermc.paper.item.meta.PaperMeta paperMeta)) { // Paper
             throw new IllegalArgumentException("Meta of " + (meta != null ? meta.getClass().toString() : "null") + " not created by " + CraftItemFactory.class.getName());
         }
-        return this.getItemMeta(material, (CraftMetaItem) meta);
+        // Paper start
+        io.papermc.paper.property.MutablePropertyView holder = paperMeta.getPropertyHolder().clone();
+        paperMeta.migrateFrom(holder);
+        return CraftItemStack.getItemMeta(holder, material);
+        // Paper end
     }
 
     @Override
@@ -415,7 +438,7 @@ public final class CraftItemFactory implements ItemFactory {
 
     @Override
     public Material updateMaterial(ItemMeta meta, Material material) throws IllegalArgumentException {
-        return ((CraftMetaItem) meta).updateMaterial(material);
+        return material; // Paper - not needed on modern
     }
 
     // Paper start
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
index f45e4acee69bd95ff2e41feaf44f5414d2e40df0..5f214f835a38b7be6a897e987c1b4e710cb1e2b6 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
@@ -287,6 +287,280 @@ public final class CraftItemStack extends ItemStack {
         return getItemMeta(item, CraftItemStack.getType(item));
     }
     public static ItemMeta getItemMeta(net.minecraft.world.item.ItemStack item, Material material) {
+        return getItemMeta(io.papermc.paper.property.nbt.NbtPropertyHolder.itemHolder(item.getOrCreateTag()), material);
+    }
+    public static ItemMeta getItemMeta(io.papermc.paper.property.MutablePropertyView propertyHolder, Material material) {
+        switch (material) {
+            case WRITTEN_BOOK:
+                return new io.papermc.paper.item.meta.MetaBookSigned(propertyHolder, material);
+            case WRITABLE_BOOK:
+                return new io.papermc.paper.item.meta.MetaBook(propertyHolder, material);
+            case CREEPER_HEAD:
+            case CREEPER_WALL_HEAD:
+            case DRAGON_HEAD:
+            case DRAGON_WALL_HEAD:
+            case PIGLIN_HEAD:
+            case PIGLIN_WALL_HEAD:
+            case PLAYER_HEAD:
+            case PLAYER_WALL_HEAD:
+            case SKELETON_SKULL:
+            case SKELETON_WALL_SKULL:
+            case WITHER_SKELETON_SKULL:
+            case WITHER_SKELETON_WALL_SKULL:
+            case ZOMBIE_HEAD:
+            case ZOMBIE_WALL_HEAD:
+                return new io.papermc.paper.item.meta.MetaPlayerHead(propertyHolder, material);
+            case LEATHER_HELMET:
+            case LEATHER_HORSE_ARMOR:
+            case LEATHER_CHESTPLATE:
+            case LEATHER_LEGGINGS:
+            case LEATHER_BOOTS:
+                return new io.papermc.paper.item.meta.MetaLeatherArmor(propertyHolder, material);
+            case POTION:
+            case SPLASH_POTION:
+            case LINGERING_POTION:
+            case TIPPED_ARROW:
+                return new io.papermc.paper.item.meta.MetaPotion(propertyHolder, material);
+            case FILLED_MAP:
+                return new io.papermc.paper.item.meta.MetaMap(propertyHolder, material);
+            case FIREWORK_ROCKET:
+                return new io.papermc.paper.item.meta.MetaFirework(propertyHolder, material);
+            case FIREWORK_STAR:
+                return new io.papermc.paper.item.meta.MetaFireworkEffect(propertyHolder, material);
+            case ENCHANTED_BOOK:
+                return new io.papermc.paper.item.meta.MetaEnchantmentStorage(propertyHolder, material);
+            case BLACK_BANNER:
+            case BLACK_WALL_BANNER:
+            case BLUE_BANNER:
+            case BLUE_WALL_BANNER:
+            case BROWN_BANNER:
+            case BROWN_WALL_BANNER:
+            case CYAN_BANNER:
+            case CYAN_WALL_BANNER:
+            case GRAY_BANNER:
+            case GRAY_WALL_BANNER:
+            case GREEN_BANNER:
+            case GREEN_WALL_BANNER:
+            case LIGHT_BLUE_BANNER:
+            case LIGHT_BLUE_WALL_BANNER:
+            case LIGHT_GRAY_BANNER:
+            case LIGHT_GRAY_WALL_BANNER:
+            case LIME_BANNER:
+            case LIME_WALL_BANNER:
+            case MAGENTA_BANNER:
+            case MAGENTA_WALL_BANNER:
+            case ORANGE_BANNER:
+            case ORANGE_WALL_BANNER:
+            case PINK_BANNER:
+            case PINK_WALL_BANNER:
+            case PURPLE_BANNER:
+            case PURPLE_WALL_BANNER:
+            case RED_BANNER:
+            case RED_WALL_BANNER:
+            case WHITE_BANNER:
+            case WHITE_WALL_BANNER:
+            case YELLOW_BANNER:
+            case YELLOW_WALL_BANNER:
+                return new io.papermc.paper.item.meta.MetaBanner(propertyHolder, material);
+            case ALLAY_SPAWN_EGG:
+            case AXOLOTL_SPAWN_EGG:
+            case BAT_SPAWN_EGG:
+            case BEE_SPAWN_EGG:
+            case BLAZE_SPAWN_EGG:
+            case CAT_SPAWN_EGG:
+            case CAMEL_SPAWN_EGG:
+            case CAVE_SPIDER_SPAWN_EGG:
+            case CHICKEN_SPAWN_EGG:
+            case COD_SPAWN_EGG:
+            case COW_SPAWN_EGG:
+            case CREEPER_SPAWN_EGG:
+            case DOLPHIN_SPAWN_EGG:
+            case DONKEY_SPAWN_EGG:
+            case DROWNED_SPAWN_EGG:
+            case ELDER_GUARDIAN_SPAWN_EGG:
+            case ENDER_DRAGON_SPAWN_EGG:
+            case ENDERMAN_SPAWN_EGG:
+            case ENDERMITE_SPAWN_EGG:
+            case EVOKER_SPAWN_EGG:
+            case FOX_SPAWN_EGG:
+            case FROG_SPAWN_EGG:
+            case GHAST_SPAWN_EGG:
+            case GLOW_SQUID_SPAWN_EGG:
+            case GOAT_SPAWN_EGG:
+            case GUARDIAN_SPAWN_EGG:
+            case HOGLIN_SPAWN_EGG:
+            case HORSE_SPAWN_EGG:
+            case HUSK_SPAWN_EGG:
+            case IRON_GOLEM_SPAWN_EGG:
+            case LLAMA_SPAWN_EGG:
+            case MAGMA_CUBE_SPAWN_EGG:
+            case MOOSHROOM_SPAWN_EGG:
+            case MULE_SPAWN_EGG:
+            case OCELOT_SPAWN_EGG:
+            case PANDA_SPAWN_EGG:
+            case PARROT_SPAWN_EGG:
+            case PHANTOM_SPAWN_EGG:
+            case PIGLIN_BRUTE_SPAWN_EGG:
+            case PIGLIN_SPAWN_EGG:
+            case PIG_SPAWN_EGG:
+            case PILLAGER_SPAWN_EGG:
+            case POLAR_BEAR_SPAWN_EGG:
+            case PUFFERFISH_SPAWN_EGG:
+            case RABBIT_SPAWN_EGG:
+            case RAVAGER_SPAWN_EGG:
+            case SALMON_SPAWN_EGG:
+            case SHEEP_SPAWN_EGG:
+            case SHULKER_SPAWN_EGG:
+            case SILVERFISH_SPAWN_EGG:
+            case SKELETON_HORSE_SPAWN_EGG:
+            case SKELETON_SPAWN_EGG:
+            case SLIME_SPAWN_EGG:
+            case SNOW_GOLEM_SPAWN_EGG:
+            case SPIDER_SPAWN_EGG:
+            case SQUID_SPAWN_EGG:
+            case STRAY_SPAWN_EGG:
+            case STRIDER_SPAWN_EGG:
+            case TADPOLE_SPAWN_EGG:
+            case TRADER_LLAMA_SPAWN_EGG:
+            case TROPICAL_FISH_SPAWN_EGG:
+            case TURTLE_SPAWN_EGG:
+            case VEX_SPAWN_EGG:
+            case VILLAGER_SPAWN_EGG:
+            case VINDICATOR_SPAWN_EGG:
+            case WANDERING_TRADER_SPAWN_EGG:
+            case WARDEN_SPAWN_EGG:
+            case WITCH_SPAWN_EGG:
+            case WITHER_SKELETON_SPAWN_EGG:
+            case WITHER_SPAWN_EGG:
+            case WOLF_SPAWN_EGG:
+            case ZOGLIN_SPAWN_EGG:
+            case ZOMBIE_HORSE_SPAWN_EGG:
+            case ZOMBIE_SPAWN_EGG:
+            case ZOMBIE_VILLAGER_SPAWN_EGG:
+            case ZOMBIFIED_PIGLIN_SPAWN_EGG:
+                return new io.papermc.paper.item.meta.MetaSpawnEgg(propertyHolder, material);
+            case ARMOR_STAND:
+                return new io.papermc.paper.item.meta.PaperMeta(propertyHolder, material);
+            case KNOWLEDGE_BOOK:
+                return new io.papermc.paper.item.meta.MetaKnowledgeBook(propertyHolder, material);
+            case FURNACE:
+            case CHEST:
+            case TRAPPED_CHEST:
+            case JUKEBOX:
+            case DISPENSER:
+            case DROPPER:
+            case ACACIA_HANGING_SIGN:
+            case ACACIA_SIGN:
+            case ACACIA_WALL_HANGING_SIGN:
+            case ACACIA_WALL_SIGN:
+            case BAMBOO_HANGING_SIGN:
+            case BAMBOO_SIGN:
+            case BAMBOO_WALL_HANGING_SIGN:
+            case BAMBOO_WALL_SIGN:
+            case BIRCH_HANGING_SIGN:
+            case BIRCH_SIGN:
+            case BIRCH_WALL_HANGING_SIGN:
+            case BIRCH_WALL_SIGN:
+            case CRIMSON_HANGING_SIGN:
+            case CRIMSON_SIGN:
+            case CRIMSON_WALL_HANGING_SIGN:
+            case CRIMSON_WALL_SIGN:
+            case DARK_OAK_HANGING_SIGN:
+            case DARK_OAK_SIGN:
+            case DARK_OAK_WALL_HANGING_SIGN:
+            case DARK_OAK_WALL_SIGN:
+            case JUNGLE_HANGING_SIGN:
+            case JUNGLE_SIGN:
+            case JUNGLE_WALL_HANGING_SIGN:
+            case JUNGLE_WALL_SIGN:
+            case MANGROVE_HANGING_SIGN:
+            case MANGROVE_SIGN:
+            case MANGROVE_WALL_HANGING_SIGN:
+            case MANGROVE_WALL_SIGN:
+            case OAK_HANGING_SIGN:
+            case OAK_SIGN:
+            case OAK_WALL_HANGING_SIGN:
+            case OAK_WALL_SIGN:
+            case SPRUCE_HANGING_SIGN:
+            case SPRUCE_SIGN:
+            case SPRUCE_WALL_HANGING_SIGN:
+            case SPRUCE_WALL_SIGN:
+            case WARPED_HANGING_SIGN:
+            case WARPED_SIGN:
+            case WARPED_WALL_HANGING_SIGN:
+            case WARPED_WALL_SIGN:
+            case SPAWNER:
+            case BREWING_STAND:
+            case ENCHANTING_TABLE:
+            case COMMAND_BLOCK:
+            case REPEATING_COMMAND_BLOCK:
+            case CHAIN_COMMAND_BLOCK:
+            case BEACON:
+            case DAYLIGHT_DETECTOR:
+            case HOPPER:
+            case COMPARATOR:
+            case SHIELD:
+            case STRUCTURE_BLOCK:
+            case SHULKER_BOX:
+            case WHITE_SHULKER_BOX:
+            case ORANGE_SHULKER_BOX:
+            case MAGENTA_SHULKER_BOX:
+            case LIGHT_BLUE_SHULKER_BOX:
+            case YELLOW_SHULKER_BOX:
+            case LIME_SHULKER_BOX:
+            case PINK_SHULKER_BOX:
+            case GRAY_SHULKER_BOX:
+            case LIGHT_GRAY_SHULKER_BOX:
+            case CYAN_SHULKER_BOX:
+            case PURPLE_SHULKER_BOX:
+            case BLUE_SHULKER_BOX:
+            case BROWN_SHULKER_BOX:
+            case GREEN_SHULKER_BOX:
+            case RED_SHULKER_BOX:
+            case BLACK_SHULKER_BOX:
+            case ENDER_CHEST:
+            case BARREL:
+            case BELL:
+            case BLAST_FURNACE:
+            case CAMPFIRE:
+            case SOUL_CAMPFIRE:
+            case JIGSAW:
+            case LECTERN:
+            case SMOKER:
+            case BEEHIVE:
+            case BEE_NEST:
+            case SCULK_CATALYST:
+            case SCULK_SHRIEKER:
+            case SCULK_SENSOR:
+            case CHISELED_BOOKSHELF:
+                return new io.papermc.paper.item.meta.MetaBlockState(propertyHolder, material);
+            case TROPICAL_FISH_BUCKET:
+                return new io.papermc.paper.item.meta.MetaTropicalFishBucket(propertyHolder, material);
+            case AXOLOTL_BUCKET:
+                return new io.papermc.paper.item.meta.MetaAxolotlBucket(propertyHolder, material);
+            case CROSSBOW:
+                return new io.papermc.paper.item.meta.MetaCrossbow(propertyHolder, material);
+            case SUSPICIOUS_STEW:
+                return new io.papermc.paper.item.meta.MetaSuspiciousStew(propertyHolder, material);
+            case COD_BUCKET:
+            case PUFFERFISH_BUCKET:
+            case SALMON_BUCKET:
+            case ITEM_FRAME:
+            case GLOW_ITEM_FRAME:
+            case PAINTING:
+                return new io.papermc.paper.item.meta.PaperMeta(propertyHolder, material);
+            case COMPASS:
+                return new io.papermc.paper.item.meta.MetaCompass(propertyHolder, material);
+            case BUNDLE:
+                return new io.papermc.paper.item.meta.MetaBundle(propertyHolder, material);
+            case GOAT_HORN:
+                return new io.papermc.paper.item.meta.MetaMusicInstrument(propertyHolder, material);
+            default:
+                return new io.papermc.paper.item.meta.PaperMeta(propertyHolder, material);
+        }
+    }
+    public static ItemMeta getItemMetaOld(net.minecraft.world.item.ItemStack item) {
+        Material material = CraftItemStack.getType(item);
         // Paper end
         if (!CraftItemStack.hasItemMeta(item)) {
             return CraftItemFactory.instance().getItemMeta(material); // Paper
@@ -598,11 +872,7 @@ public final class CraftItemStack extends ItemStack {
             item.setItem(newItem);
         }
 
-        CompoundTag tag = new CompoundTag();
-        item.setTag(tag);
-
-        ((CraftMetaItem) itemMeta).applyToItem(tag);
-        item.convertStack(((CraftMetaItem) itemMeta).getVersion());
+        item.setTag(((io.papermc.paper.property.nbt.NbtPropertyHolder) ((io.papermc.paper.item.meta.PaperMeta) itemMeta).getPropertyHolder()).getCompoundTag()); // Paper
         // SpigotCraft#463 this is required now by the Vanilla client, so mimic ItemStack constructor in ensuring it
         if (item.getItem() != null && item.getItem().canBeDepleted()) {
             item.setDamageValue(item.getDamageValue());
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 64c50c52c11214740de7903e5592b8b6b2c170b3..4a682f62c9f6083f8520decbfc98db121d90ee4b 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -54,7 +54,6 @@ import org.bukkit.block.data.BlockData;
 import org.bukkit.craftbukkit.CraftEquipmentSlot;
 import org.bukkit.craftbukkit.attribute.CraftAttributeInstance;
 import org.bukkit.craftbukkit.attribute.CraftAttributeMap;
-import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.legacy.CraftLegacy;
@@ -616,6 +615,21 @@ public final class CraftMagicNumbers implements UnsafeValues {
         net.minecraft.core.Holder<net.minecraft.world.level.biome.Biome> biomeBase = cra.getHandle().registryAccess().registryOrThrow(net.minecraft.core.registries.Registries.BIOME).getHolderOrThrow(net.minecraft.resources.ResourceKey.create(net.minecraft.core.registries.Registries.BIOME, org.bukkit.craftbukkit.util.CraftNamespacedKey.toMinecraft(biomeKey)));
         cra.setBiome(x, y, z, biomeBase);
     }
+
+    @Override
+    public io.papermc.paper.property.MutablePropertyView getPropertyHolder(ItemStack itemStack) {
+        if (itemStack instanceof org.bukkit.craftbukkit.inventory.CraftItemStack craftItemStack) {
+            return io.papermc.paper.property.nbt.NbtPropertyHolder.itemHolder(craftItemStack.handle.getOrCreateTag());
+        }
+
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public ItemStack newItem(Material material, int count) {
+        return CraftItemStack.asCraftCopy(new ItemStack(material, count));
+    }
+
     // Paper end
 
     /**
diff --git a/src/test/java/io/papermc/paper/item/MetaComparisonTest.java b/src/test/java/io/papermc/paper/item/MetaComparisonTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..71c7f54b1af7bd9bef7907ffbe3ce3b76454e7d0
--- /dev/null
+++ b/src/test/java/io/papermc/paper/item/MetaComparisonTest.java
@@ -0,0 +1,67 @@
+package io.papermc.paper.item;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.enchantments.Enchantment;
+import org.bukkit.inventory.meta.ItemMeta;
+import org.bukkit.inventory.meta.PotionMeta;
+import org.bukkit.inventory.meta.SkullMeta;
+import org.bukkit.potion.PotionEffect;
+import org.bukkit.potion.PotionEffectType;
+import org.bukkit.util.Consumer;
+import org.junit.Assert;
+import org.junit.Test;
+
+public class MetaComparisonTest {
+
+    @Test
+    public void testPotionMeta() {
+        PotionEffect potionEffect = new PotionEffect(PotionEffectType.SPEED, 10, 10, false);
+        ItemStack nmsItemStack = new ItemStack(Items.POTION, 1);
+
+        testSetAndGet(nmsItemStack,
+            (meta) -> ((PotionMeta) meta).addCustomEffect(potionEffect, true),
+            (meta) -> Assert.assertEquals(potionEffect, ((PotionMeta) meta).getCustomEffects().get(0))
+        );
+    }
+
+    @Test
+    public void testEnchantment() {
+        ItemStack nmsItemStack = new ItemStack(Items.STICK, 1);
+
+        testSetAndGet(nmsItemStack,
+            (meta) -> meta.addEnchant(Enchantment.DAMAGE_ALL, 1, true),
+            (meta) -> Assert.assertEquals(meta.getEnchantLevel(Enchantment.DAMAGE_ALL), 1)
+        );
+    }
+
+
+    @Test
+    public void testPlayerHead() {
+        PlayerProfile profile = Bukkit.createProfile("Owen1212055");
+        ItemStack nmsItemStack = new ItemStack(Items.PLAYER_HEAD, 1);
+
+        testSetAndGet(nmsItemStack,
+            (meta) -> ((SkullMeta) meta).setPlayerProfile(profile),
+            (meta) -> Assert.assertEquals(profile, ((SkullMeta) meta).getPlayerProfile())
+        );
+    }
+
+    private void testSetAndGet(ItemStack nmsItemStack,
+                               Consumer<ItemMeta> set,
+                               Consumer<ItemMeta> get) {
+        ItemMeta craftMeta = CraftItemStack.getItemMetaOld(nmsItemStack);
+        ItemMeta paperMeta = CraftItemStack.getItemMeta(nmsItemStack);
+        // Test craft meta
+        set.accept(craftMeta);
+        get.accept(craftMeta);
+
+        // Test paper meta
+        set.accept(paperMeta);
+        get.accept(paperMeta);
+    }
+
+}
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java
index e706d547c03f3e07d56fdc7327fadd98f98ccc20..27f95b289538f05c55eb35ce725b467b3682bfb7 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java
@@ -4,6 +4,8 @@ import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.logging.Logger;
+
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemFactory;
 import org.bukkit.inventory.ItemStack;
@@ -67,22 +69,20 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
 
     @Test
     public void generalCase() {
-        CraftMetaItem meta = (CraftMetaItem) FactoryItemMaterialTest.factory.getItemMeta(material);
+        ItemMeta meta = FactoryItemMaterialTest.factory.getItemMeta(material); // Paper
         if (meta == null) {
             assertThat(this.material, is(Material.AIR));
         } else {
             assertTrue(FactoryItemMaterialTest.factory.isApplicable(meta, material));
-            assertTrue(meta.applicableTo(material));
 
             meta = meta.clone();
             assertTrue(FactoryItemMaterialTest.factory.isApplicable(meta, material));
-            assertTrue(meta.applicableTo(material));
         }
     }
 
     @Test
     public void asMetaFor() {
-        final CraftMetaItem baseMeta = (CraftMetaItem) FactoryItemMaterialTest.factory.getItemMeta(material);
+        final ItemMeta baseMeta = FactoryItemMaterialTest.factory.getItemMeta(material);
         if (baseMeta == null) {
             assertThat(this.material, is(Material.AIR));
             return;
@@ -91,7 +91,7 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
         for (Material other : FactoryItemMaterialTest.materials) {
             final ItemStack bukkitStack = new ItemStack(other);
             final CraftItemStack craftStack = CraftItemStack.asCraftCopy(bukkitStack);
-            final CraftMetaItem otherMeta = (CraftMetaItem) FactoryItemMaterialTest.factory.asMetaFor(baseMeta, other);
+            final ItemMeta otherMeta = FactoryItemMaterialTest.factory.asMetaFor(baseMeta, other);
 
             final String testName = FactoryItemMaterialTest.name(this.material, other);
 
@@ -103,7 +103,6 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
             assertTrue(testName, FactoryItemMaterialTest.factory.isApplicable(otherMeta, craftStack));
             assertTrue(testName, FactoryItemMaterialTest.factory.isApplicable(otherMeta, bukkitStack));
             assertTrue(testName, FactoryItemMaterialTest.factory.isApplicable(otherMeta, other));
-            assertTrue(testName, otherMeta.applicableTo(other));
         }
     }
 
@@ -112,8 +111,8 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
         if (this.material == Material.AIR) {
             return;
         }
-        final CraftMetaItem baseMeta = (CraftMetaItem) FactoryItemMaterialTest.factory.getItemMeta(material);
-        final CraftMetaItem baseMetaClone = baseMeta.clone();
+        final ItemMeta baseMeta = FactoryItemMaterialTest.factory.getItemMeta(material); // Paper
+        final ItemMeta baseMetaClone = baseMeta.clone(); // Paper
 
         final ItemStack baseMetaStack = new ItemStack(this.material);
         baseMetaStack.setItemMeta(baseMeta);
@@ -134,7 +133,7 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
         for (Material other : FactoryItemMaterialTest.materials) {
             final String testName = FactoryItemMaterialTest.name(this.material, other);
 
-            final CraftMetaItem otherMeta = (CraftMetaItem) FactoryItemMaterialTest.factory.asMetaFor(baseMetaClone, other);
+            final ItemMeta otherMeta = FactoryItemMaterialTest.factory.asMetaFor(baseMetaClone, other); // Paper
 
             if (otherMeta == null) {
                 assertThat(testName, other, is(Material.AIR));
