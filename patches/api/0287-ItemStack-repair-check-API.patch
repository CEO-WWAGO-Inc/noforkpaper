From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Sat, 15 May 2021 22:10:50 -0700
Subject: [PATCH] ItemStack repair check API


diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index 906f313d8c91e65ce934143208ed281ce02f5354..29a91ec8e97ce66383a1dd1fc3dcbcdcca7cfc41 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -155,6 +155,16 @@ public interface UnsafeValues {
      */
     public io.papermc.paper.inventory.ItemRarity getItemStackRarity(ItemStack itemStack);
 
+    /**
+     * Checks if an itemstack can be repaired with another itemstack.
+     * Returns false if either argument's type is not an item ({@link Material#isItem()}).
+     *
+     * @param itemToBeRepaired the itemstack to be repaired
+     * @param repairMaterial the repair material
+     * @return true if valid repair, false if not
+     */
+    public boolean isValidRepairItemStack(@org.jetbrains.annotations.NotNull ItemStack itemToBeRepaired, @org.jetbrains.annotations.NotNull ItemStack repairMaterial);
+
     /**
      * Returns the server's protocol version.
      *
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index c46875ca06c3baa99235f0293c4b01ba96d1c09f..73b46bd3de323a4413b2b61c6041965a6d7e8c78 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -908,5 +908,27 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
     public io.papermc.paper.inventory.ItemRarity getRarity() {
         return Bukkit.getUnsafe().getItemStackRarity(this);
     }
+
+    /**
+     * Checks if an itemstack can repair this itemstack.
+     * Returns false if {@code this} or {@code repairMaterial}'s type is not an item ({@link Material#isItem()}).
+     *
+     * @param repairMaterial the repair material
+     * @return true if it is repairable by, false if not
+     */
+    public boolean isRepairableBy(@NotNull ItemStack repairMaterial) {
+        return Bukkit.getUnsafe().isValidRepairItemStack(this, repairMaterial);
+    }
+
+    /**
+     * Checks if this itemstack can repair another.
+     * Returns false if {@code this} or {@code toBeRepaired}'s type is not an item ({@link Material#isItem()}).
+     *
+     * @param toBeRepaired the itemstack to be repaired
+     * @return true if it can repair, false if not
+     */
+    public boolean canRepair(@NotNull ItemStack toBeRepaired) {
+        return Bukkit.getUnsafe().isValidRepairItemStack(toBeRepaired, this);
+    }
     // Paper end
 }
