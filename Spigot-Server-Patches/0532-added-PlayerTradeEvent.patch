From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Thu, 2 Jul 2020 16:12:10 -0700
Subject: [PATCH] added PlayerTradeEvent


diff --git a/src/main/java/net/minecraft/server/EntityVillagerAbstract.java b/src/main/java/net/minecraft/server/EntityVillagerAbstract.java
index 81823b5d5ef17479583fda0121c95091175fdf1e..6a309c9d3606186f35a9b3b4d873ca9542441617 100644
--- a/src/main/java/net/minecraft/server/EntityVillagerAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityVillagerAbstract.java
@@ -1,11 +1,13 @@
 package net.minecraft.server;
 
+import com.destroystokyo.paper.event.player.PlayerTradeEvent;
 import com.google.common.collect.Sets;
 import java.util.Iterator;
 import java.util.Set;
 import javax.annotation.Nullable;
 // CraftBukkit start
 import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.craftbukkit.inventory.CraftMerchant;
 import org.bukkit.craftbukkit.inventory.CraftMerchantRecipe;
 import org.bukkit.entity.AbstractVillager;
@@ -101,13 +103,23 @@ public abstract class EntityVillagerAbstract extends EntityAgeable implements NP
 
     @Override
     public void a(MerchantRecipe merchantrecipe) {
-        merchantrecipe.increaseUses();
-        this.e = -this.D();
-        this.b(merchantrecipe);
+        // Paper start
         if (this.tradingPlayer instanceof EntityPlayer) {
-            CriterionTriggers.s.a((EntityPlayer) this.tradingPlayer, this, merchantrecipe.getSellingItem());
+            PlayerTradeEvent event = new PlayerTradeEvent(((EntityPlayer) this.tradingPlayer).getBukkitEntity(), (AbstractVillager) this.getBukkitEntity(), merchantrecipe.asBukkit(), true, true);
+            event.callEvent();
+            if (!event.isCancelled()) {
+                MerchantRecipe recipe = CraftMerchantRecipe.fromBukkit(event.getTrade()).toMinecraft();
+                if (event.willIncreaseTradeUses()) recipe.increaseUses();
+                this.e = -this.D();
+                if (event.isRewardingExp()) this.b(recipe);
+                CriterionTriggers.s.a((EntityPlayer) this.tradingPlayer, this, recipe.getSellingItem());
+            }
+        } else {
+            merchantrecipe.increaseUses();
+            this.e = -this.D();
+            this.b(merchantrecipe);
         }
-
+        // Paper end
     }
 
     protected abstract void b(MerchantRecipe merchantrecipe);
