From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joshua Prince <joshua@jtprince.com>
Date: Sun, 26 May 2024 19:23:43 -0700
Subject: [PATCH] Add EntityScareByEntityEvent


diff --git a/src/main/java/io/papermc/paper/event/entity/EntityScareByEntityEvent.java b/src/main/java/io/papermc/paper/event/entity/EntityScareByEntityEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..d1dc14f0e72d5a33f15f7124ce4cbe4ba352254f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/entity/EntityScareByEntityEvent.java
@@ -0,0 +1,60 @@
+package io.papermc.paper.event.entity;
+
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.EntityEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when an entity is scared by another nearby entity.
+ * <p>
+ * This event is called repeatedly while a scareable entity is within range of
+ * any other living entity. It is cancelled by default if the other entity
+ * does not ordinarily scare this entity.
+ */
+public class EntityScareByEntityEvent extends EntityEvent implements Cancellable {
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    private final @NotNull LivingEntity scaredBy;
+    private boolean cancelled;
+
+    @ApiStatus.Internal
+    public EntityScareByEntityEvent(@NotNull Entity entity, @NotNull LivingEntity scaredBy) {
+        super(entity);
+        this.scaredBy = scaredBy;
+    }
+
+    /**
+     * Gets the entity which scared the affected entity.
+     *
+     * @return the scaring entity
+     */
+    @NotNull
+    public Entity getScaredBy() {
+        return this.scaredBy;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+}
