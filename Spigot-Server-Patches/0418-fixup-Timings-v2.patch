From f619fdea0d173c33c83c15e302400a0862cdcfe1 Mon Sep 17 00:00:00 2001
From: Spottedleaf <Spottedleaf@users.noreply.github.com>
Date: Tue, 27 Aug 2019 10:12:40 -0700
Subject: [PATCH] fixup! Timings v2


diff --git a/src/main/java/co/aikar/timings/MinecraftTimings.java b/src/main/java/co/aikar/timings/MinecraftTimings.java
index c2d261418..c6818bc86 100644
--- a/src/main/java/co/aikar/timings/MinecraftTimings.java
+++ b/src/main/java/co/aikar/timings/MinecraftTimings.java
@@ -12,6 +12,7 @@ import java.util.Map;
 // TODO: Re-implement missing timers
 public final class MinecraftTimings {
 
+    public static final Timing serverOversleep = Timings.ofSafe("Server Oversleep");
     public static final Timing playerListTimer = Timings.ofSafe("Player List");
     public static final Timing commandFunctionsTimer = Timings.ofSafe("Command Functions");
     public static final Timing connectionTimer = Timings.ofSafe("Connection Handler");
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index d2c029973..a256f043a 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -133,8 +133,8 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         });
     });
     private long nextTick = SystemUtils.getMonotonicMillis();
-    private long ab;
-    private boolean ac;
+    private long ab; final long getTickOversleepMaxTime() { return this.ab; } // Paper - OBFHELPER
+    private boolean ac; final boolean hasExecutedTask() { return this.ac; } // Paper - OBFHELPER
     private final IReloadableResourceManager ae;
     private final ResourcePackRepository<ResourcePackLoader> resourcePackRepository;
     @Nullable
@@ -979,6 +979,16 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         return this.forceTicks || this.isEntered() || SystemUtils.getMonotonicMillis() < (this.ac ? this.ab : this.nextTick);
     }
 
+    // Paper start
+    private boolean canOversleep() {
+        return this.hasExecutedTask() && SystemUtils.getMonotonicMillis() < this.getTickOversleepMaxTime();
+    }
+
+    private boolean canSleepForTickNoOversleep() {
+        return this.forceTicks || this.isEntered() || SystemUtils.getMonotonicMillis() < this.nextTick;
+    }
+    // Paper end
+
     private void executeModerately() {
         this.executeAll();
         java.util.concurrent.locks.LockSupport.parkNanos("executing tasks", 1000L);
@@ -988,7 +998,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     protected void sleepForTick() {
         //this.executeAll(); // Paper - move this into the tick method for timings
         this.awaitTasks(() -> {
-            return !this.canSleepForTick();
+            return !this.canSleepForTickNoOversleep(); // Paper - move oversleep into full server tick
         });
     }
 
@@ -1067,6 +1077,13 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
 
     protected void a(BooleanSupplier booleansupplier) {
         co.aikar.timings.TimingsManager.FULL_SERVER_TICK.startTiming(); // Paper
+        // Paper start - move oversleep into full server tick
+        MinecraftTimings.serverOversleep.startTiming();
+        this.awaitTasks(() -> {
+            return !this.canOversleep();
+        });
+        MinecraftTimings.serverOversleep.stopTiming();
+        // Paper end
         this.slackActivityAccountant.tickStarted(); // Spigot
         long i = SystemUtils.getMonotonicNanos();
         new com.destroystokyo.paper.event.server.ServerTickStartEvent(this.ticks+1).callEvent(); // Paper
-- 
2.22.1

