From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Thu, 8 Jul 2021 23:29:19 -0700
Subject: [PATCH] Custom Advancement Triggers


diff --git a/src/main/java/io/papermc/paper/advancement/PaperAdvancementManager.java b/src/main/java/io/papermc/paper/advancement/PaperAdvancementManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..3b8078a9315ed2d7dc92cc93547df647015be320
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancement/PaperAdvancementManager.java
@@ -0,0 +1,30 @@
+package io.papermc.paper.advancement;
+
+import io.papermc.paper.advancement.trigger.CustomAdvancementTrigger;
+import io.papermc.paper.advancement.trigger.PaperCustomAdvancementTrigger;
+import org.bukkit.NamespacedKey;
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.framework.qual.DefaultQualifier;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+@DefaultQualifier(NonNull.class)
+public class PaperAdvancementManager implements AdvancementManager {
+
+    private final Map<NamespacedKey, CustomAdvancementTrigger<?>> customTriggers = new HashMap<>();
+
+    @Override
+    public <T extends CustomAdvancementTrigger<D>, D> T registerCustomTrigger(T trigger) {
+        PaperCustomAdvancementTrigger<T, D> customTrigger = new PaperCustomAdvancementTrigger<>(trigger);
+        customTrigger.register();
+        this.customTriggers.put(trigger.getKey(), trigger);
+        return trigger;
+    }
+
+    @Override
+    public Map<NamespacedKey, CustomAdvancementTrigger<?>> getCustomTriggers() {
+        return Collections.unmodifiableMap(customTriggers);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/advancement/trigger/PaperCustomAdvancementTrigger.java b/src/main/java/io/papermc/paper/advancement/trigger/PaperCustomAdvancementTrigger.java
new file mode 100644
index 0000000000000000000000000000000000000000..67d0df665990dd6b4c60e27cc808ad8d073e8289
--- /dev/null
+++ b/src/main/java/io/papermc/paper/advancement/trigger/PaperCustomAdvancementTrigger.java
@@ -0,0 +1,65 @@
+package io.papermc.paper.advancement.trigger;
+
+import com.google.common.base.Preconditions;
+import com.google.gson.JsonObject;
+import net.minecraft.advancements.CriteriaTriggers;
+import net.minecraft.advancements.critereon.AbstractCriterionTriggerInstance;
+import net.minecraft.advancements.critereon.DeserializationContext;
+import net.minecraft.advancements.critereon.EntityPredicate;
+import net.minecraft.advancements.critereon.SimpleCriterionTrigger;
+import net.minecraft.resources.ResourceLocation;
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.entity.Player;
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.framework.qual.DefaultQualifier;
+
+import java.util.function.Predicate;
+
+@DefaultQualifier(NonNull.class)
+public class PaperCustomAdvancementTrigger<T extends CustomAdvancementTrigger<D>, D> extends SimpleCriterionTrigger<PaperCustomAdvancementTrigger.TriggerInstance<D>> {
+
+    private final ResourceLocation key;
+    private final T trigger;
+
+    public PaperCustomAdvancementTrigger(T trigger) {
+        this.key = CraftNamespacedKey.toMinecraft(trigger.getKey());
+        this.trigger = trigger;
+    }
+
+    public void register() {
+        Preconditions.checkArgument(this.trigger.triggerConsumer == null, this.trigger + " has already been registered");
+        CriteriaTriggers.register(this);
+        this.trigger.triggerConsumer = this::trigger;
+    }
+
+    @Override
+    public ResourceLocation getId() {
+        return this.key;
+    }
+
+    public void trigger(Player player, Predicate<D> instancePredicate) {
+        this.trigger(((CraftPlayer) player).getHandle(), triggerInstance -> instancePredicate.test(triggerInstance.data));
+    }
+
+    @Override
+    protected TriggerInstance<D> createInstance(JsonObject conditionsObject, EntityPredicate.Composite playerPredicate, DeserializationContext deserializationContext) {
+        return new TriggerInstance<>(this.key, playerPredicate, this.trigger.createInstance(conditionsObject));
+    }
+
+    @Override
+    public String toString() {
+        return "wrapped(" + this.trigger + ")";
+    }
+
+    public static class TriggerInstance<D> extends AbstractCriterionTriggerInstance {
+
+        private final D data;
+
+        public TriggerInstance(ResourceLocation resourceLocation, EntityPredicate.Composite playerPredicate, D data) {
+            super(resourceLocation, playerPredicate);
+            this.data = data;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index e2c8f716af55ebb7e4233c2a3d6515f8f4a239fa..c793b147aff4824c08c60395fa10724225d21ac0 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -194,6 +194,7 @@ public class Main {
             }
             // CraftBukkit end
             DataPackConfig datapackconfiguration1 = MinecraftServer.configurePackRepository(resourcepackrepository, datapackconfiguration == null ? DataPackConfig.DEFAULT : datapackconfiguration, flag);
+            /* Paper start - move loading datapacks until after plugins so datapacks that use custom triggers added by plugins don't fail to load
             CompletableFuture completablefuture = ServerResources.loadResources(resourcepackrepository.openAllSelected(), iregistrycustom_dimension, Commands.CommandSelection.DEDICATED, dedicatedserversettings.getProperties().functionPermissionLevel, Util.backgroundExecutor(), Runnable::run);
 
             ServerResources datapackresources;
@@ -205,7 +206,9 @@ public class Main {
                 resourcepackrepository.close();
                 return;
             }
+            */ // Paper end
 
+            ServerResources datapackresources = ServerResources.createResources(iregistrycustom_dimension, Commands.CommandSelection.DEDICATED, dedicatedserversettings.getProperties().functionPermissionLevel); // Paper - create ServerResources an alternate way
             datapackresources.updateGlobals();
             /*
             RegistryReadOps<NBTBase> registryreadops = RegistryReadOps.createAndLoad(DynamicOpsNBT.INSTANCE, datapackresources.getResourceManager(), iregistrycustom_dimension);
diff --git a/src/main/java/net/minecraft/server/ServerResources.java b/src/main/java/net/minecraft/server/ServerResources.java
index 83e8f192b23b28a1ee5884b2e990c012e396c429..acb0dfd68d16e0f36eaa7385943299334c88fe95 100644
--- a/src/main/java/net/minecraft/server/ServerResources.java
+++ b/src/main/java/net/minecraft/server/ServerResources.java
@@ -79,6 +79,11 @@ public class ServerResources implements AutoCloseable {
         return this.resources;
     }
 
+    // Paper start
+    public static ServerResources createResources(RegistryAccess registryManager, Commands.CommandSelection commandEnvironment, int functionPermissionLevel) {
+        return new ServerResources(registryManager, commandEnvironment, functionPermissionLevel);
+    }
+    // Paper end
     public static CompletableFuture<ServerResources> loadResources(List<PackResources> packs, RegistryAccess registryManager, Commands.CommandSelection commandEnvironment, int functionPermissionLevel, Executor prepareExecutor, Executor applyExecutor) {
         ServerResources serverResources = new ServerResources(registryManager, commandEnvironment, functionPermissionLevel);
         CompletableFuture<Unit> completableFuture = serverResources.resources.reload(prepareExecutor, applyExecutor, packs, DATA_RELOAD_INITIAL_TASK);
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 38a0fb9a7c4ade9cacfd30dffabfea7e6b773981..497b6e31c58d11b80f654736fb2815ba3d821d42 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -285,6 +285,23 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         server.loadPlugins();
         server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
         // CraftBukkit end
+        // Paper start - load datapacks (moved from Main)
+        try {
+            java.util.concurrent.CompletableFuture<Void> loadDatapacks = java.util.concurrent.CompletableFuture.supplyAsync(() -> {
+                return this.getPackRepository().openAllSelected();
+            }, this).thenCompose((list) -> {
+                return this.resources.resources.reload(Util.backgroundExecutor(), this, list, ServerResources.DATA_RELOAD_INITIAL_TASK);
+            }).thenAcceptAsync((unit) -> {
+                this.resources.updateGlobals();
+            }, this);
+            this.managedBlock(loadDatapacks::isDone);
+        } catch (Exception exception) {
+            DedicatedServer.LOGGER.warn("Failed to load datapacks, can't proceed with server load. You can either fix your datapacks or reset to vanilla with --safeMode", exception);
+            this.resources.close();
+            this.getPackRepository().close();
+            return false;
+        }
+        // Paper end
 
         if (!this.usesAuthentication()) {
             DedicatedServer.LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 51f67a2944034552d57b939ef29e0249e74383b9..70ae4e227e0fd9b5bf68251b008880f4e99e7fa4 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -288,6 +288,7 @@ public final class CraftServer implements Server {
     public static Exception excessiveVelEx; // Paper - Velocity warnings
     private final io.papermc.paper.logging.SysoutCatcher sysoutCatcher = new io.papermc.paper.logging.SysoutCatcher(); // Paper
     private final CraftPotionBrewer potionBrewer = new CraftPotionBrewer(); // Paper
+    public io.papermc.paper.advancement.PaperAdvancementManager advancementManager; // Paper
 
     static {
         ConfigurationSerialization.registerClass(CraftOfflinePlayer.class);
@@ -369,6 +370,7 @@ public final class CraftServer implements Server {
         this.minimumAPI = this.configuration.getString("settings.minimum-api");
         this.loadIcon();
         datapackManager = new io.papermc.paper.datapack.PaperDatapackManager(console.getPackRepository()); // Paper
+        advancementManager = new io.papermc.paper.advancement.PaperAdvancementManager(); // Paper
     }
 
     public boolean getCommandBlockOverride(String command) {
@@ -2856,5 +2858,9 @@ public final class CraftServer implements Server {
         return this.potionBrewer;
     }
 
+    @Override
+    public io.papermc.paper.advancement.PaperAdvancementManager getAdvancementManager() {
+        return this.advancementManager;
+    }
     // Paper end
 }
