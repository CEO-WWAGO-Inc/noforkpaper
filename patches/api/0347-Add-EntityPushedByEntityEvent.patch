From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: aerulion <aerulion@gmail.com>
Date: Fri, 17 Dec 2021 04:35:27 +0100
Subject: [PATCH] Add EntityPushedByEntityEvent


diff --git a/src/main/java/io/papermc/paper/event/entity/EntityPushedByEntityEvent.java b/src/main/java/io/papermc/paper/event/entity/EntityPushedByEntityEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..0de0c5faa0240ae77944f323cf666fb1f267a2f2
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/entity/EntityPushedByEntityEvent.java
@@ -0,0 +1,68 @@
+package io.papermc.paper.event.entity;
+
+import org.bukkit.entity.Entity;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.EntityEvent;
+import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Fired when an entity is pushed by another entity. If this event is cancelled, the entity is not
+ * pushed.
+ */
+public class EntityPushedByEntityEvent extends EntityEvent implements Cancellable {
+
+    private static final HandlerList handlers = new HandlerList();
+    private final @NotNull Entity pushedBy;
+    private final @NotNull Vector acceleration;
+    private final @NotNull PushReason pushReason;
+    private boolean cancelled;
+
+    public EntityPushedByEntityEvent(@NotNull Entity entity, @NotNull Entity pushedBy, @NotNull Vector acceleration, @NotNull PushReason pushReason) {
+        super(entity);
+        this.pushedBy = pushedBy;
+        this.acceleration = acceleration;
+        this.pushReason = pushReason;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+    @NotNull
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        cancelled = cancel;
+    }
+
+    @NotNull
+    public Entity getPushedBy() {
+        return pushedBy;
+    }
+
+    @NotNull
+    public Vector getAcceleration() {
+        return acceleration;
+    }
+
+    @NotNull
+    public PushReason getPushReason() {
+        return pushReason;
+    }
+
+    public enum PushReason {
+        ATTACK,
+        COLLISION
+    }
+}
