From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Janmm14 <gitconfig1@janmm14.de>
Date: Fri, 25 Jun 2021 23:20:19 +0200
Subject: [PATCH] Add Entity Visibility API


diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 7f7bc04a30a0422b2d589adb488082c0aa5326dc..7c32f439078b787bd28407d479530b445e49af6d 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -2277,7 +2277,7 @@ Sections go from 0..16. Now whenever a section is not empty, it can potentially
         // Paper start - use distance map to optimise tracker
         com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> lastTrackerCandidates;
 
-        final void updatePlayers(com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> newTrackerCandidates) {
+        public final void updatePlayers(com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> newTrackerCandidates) {
             com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> oldTrackerCandidates = this.lastTrackerCandidates;
             this.lastTrackerCandidates = newTrackerCandidates;
 
@@ -2368,6 +2368,13 @@ Sections go from 0..16. Now whenever a section is not empty, it can potentially
                 int i = Math.min(this.getEffectiveRange(), (ChunkMap.this.viewDistance - 1) * 16);
                 boolean flag = vec3d_dx >= (double) (-i) && vec3d_dx <= (double) i && vec3d_dz >= (double) (-i) && vec3d_dz <= (double) i && this.entity.broadcastToPlayer(player); // Paper - remove allocation of Vec3D here
 
+                // Paper start - Entity Visibility API
+                if (!(this.entity instanceof ServerPlayer) && flag) {
+                    org.bukkit.craftbukkit.entity.CraftEntity ce = this.entity.getBukkitEntity();
+                    flag = player.getBukkitEntity().canSee(ce);
+                }
+                // Paper end
+
                 // CraftBukkit start - respect vanish API
                 if (this.entity instanceof ServerPlayer) {
                     Player player1 = ((ServerPlayer) this.entity).getBukkitEntity();
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 14bea212adbfa341ca6080a01f87b51891808d2a..97f660510a41b679560ae375760a1b012feb01d1 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1293,7 +1293,7 @@ public class ServerLevel extends net.minecraft.world.level.Level implements Worl
                 double d2 = (double) pos.getZ() - entityplayer.getZ();
 
                 // CraftBukkit start
-                if (entityhuman != null && entityhuman instanceof ServerPlayer && !entityplayer.getBukkitEntity().canSee(((ServerPlayer) entityhuman).getBukkitEntity())) {
+                if (entityhuman != null && !entityplayer.getBukkitEntity().canSee(entityhuman.getBukkitEntity())) { // Paper - Entity Visibility API
                     continue;
                 }
                 // CraftBukkit end
@@ -1313,7 +1313,7 @@ public class ServerLevel extends net.minecraft.world.level.Level implements Worl
 
     @Override
     public void playSound(@Nullable Player player, Entity entity, SoundEvent sound, SoundSource category, float volume, float pitch) {
-        this.server.getPlayerList().broadcast(player, entity.getX(), entity.getY(), entity.getZ(), volume > 1.0F ? (double) (16.0F * volume) : 16.0D, this.dimension(), new ClientboundSoundEntityPacket(sound, category, entity, volume, pitch));
+        this.server.getPlayerList().broadcast(player, entity, entity.getX(), entity.getY(), entity.getZ(), volume > 1.0F ? (double) (16.0F * volume) : 16.0D, this.dimension(), new ClientboundSoundEntityPacket(sound, category, entity, volume, pitch)); // Paper - add entity argument - Entity Visibility API
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index a6ecbb7eb1df7923d58366327e0f00512a3a1677..07b5b3ffedd70872442a0d64f4f2ad3f0dd789ad 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -1035,7 +1035,7 @@ public abstract class PlayerList {
     public void sendAll(Packet packet, net.minecraft.world.entity.player.Player entityhuman) {
         for (int i = 0; i < this.players.size(); ++i) {
             ServerPlayer entityplayer =  this.players.get(i);
-            if (entityhuman != null && entityhuman instanceof ServerPlayer && !entityplayer.getBukkitEntity().canSee(((ServerPlayer) entityhuman).getBukkitEntity())) {
+            if (entityhuman != null && !entityplayer.getBukkitEntity().canSee(entityhuman.getBukkitEntity())) {
                 continue;
             }
             ((ServerPlayer) this.players.get(i)).connection.send(packet);
@@ -1193,6 +1193,12 @@ public abstract class PlayerList {
     }
 
     public void broadcast(@Nullable net.minecraft.world.entity.player.Player player, double x, double y, double z, double distance, ResourceKey<Level> worldKey, Packet<?> packet) {
+        // Paper start - Entity Visibility API
+        broadcast(player, null, x, y, z, distance, worldKey, packet);
+    }
+
+    public void broadcast(@Nullable net.minecraft.world.entity.player.Player player, @Nullable Entity source, double x, double y, double z, double distance, ResourceKey<Level> worldKey, Packet<?> packet) {
+        // Paper end
         ServerLevel world = null;
         if (player != null && player.level instanceof ServerLevel) {
             world = (ServerLevel) player.level;
@@ -1226,7 +1232,15 @@ public abstract class PlayerList {
             //} // Paper
             // CraftBukkit end
 
-            if (entityplayer != player && entityplayer.level.dimension() == worldKey && (!(player instanceof ServerPlayer) || entityplayer.getBukkitEntity().canSee(((ServerPlayer) player).getBukkitEntity()))) { // Paper
+            if (entityplayer != player && entityplayer.level.dimension() == worldKey) { // Paper
+                // Paper start - Entity Visibility API
+                if (player != null && !entityplayer.getBukkitEntity().canSee(player.getBukkitEntity())) {
+                    continue;
+                }
+                if (source != null && !entityplayer.getBukkitEntity().canSee(source.getBukkitEntity())) {
+                    continue;
+                }
+                // Paper end
                 double d4 = x - entityplayer.getX();
                 double d5 = y - entityplayer.getY();
                 double d6 = z - entityplayer.getZ();
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 4fd030ef9537d9b31c6167d73349f4c4a6b33a15..b4cd407dc0984f4ae342edb741fc4fc271e5aa28 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -1291,7 +1291,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, n
 
     public void playSound(SoundEvent sound, float volume, float pitch) {
         if (!this.isSilent()) {
-            this.level.playSound((Player) null, this.getX(), this.getY(), this.getZ(), sound, this.getSoundSource(), volume, pitch);
+            this.level.playSound((Player) null, this, sound, this.getSoundSource(), volume, pitch); // Paper - use method with Entity argument - Entity Visibility API
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 57c448ee93df76fc2a17c75fafc78408d720ced3..a398808c73746a35b658f886d3d79dc219e64f38 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -4071,7 +4071,7 @@ public abstract class LivingEntity extends Entity {
     public ItemStack eat(Level world, ItemStack stack) {
         if (stack.isEdible()) {
             world.gameEvent((Entity) this, GameEvent.EAT, this.eyeBlockPosition());
-            world.playSound((net.minecraft.world.entity.player.Player) null, this.getX(), this.getY(), this.getZ(), this.getEatingSound(stack), SoundSource.NEUTRAL, 1.0F, 1.0F + (world.random.nextFloat() - world.random.nextFloat()) * 0.4F);
+            world.playSound((net.minecraft.world.entity.player.Player) null, this, this.getEatingSound(stack), SoundSource.NEUTRAL, 1.0F, 1.0F + (world.random.nextFloat() - world.random.nextFloat()) * 0.4F); // Paper - use method with Entity argument - Entity Visibility API
             this.addEatEffect(stack, world, this);
             if (!(this instanceof net.minecraft.world.entity.player.Player) || !((net.minecraft.world.entity.player.Player) this).getAbilities().instabuild) {
                 stack.shrink(1);
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 9da5b7b54c91894b379d41fb8d2b24f7c1c9d96f..69ded56254dbae2865e188470e1e0a270910cad7 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -292,8 +292,8 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         for (int i = 0, len = entities.size(); i < len; ++i) {
             Entity entity = entities.get(i);
 
-            if (checkCanSee && source instanceof net.minecraft.server.level.ServerPlayer && entity instanceof net.minecraft.server.level.ServerPlayer
-                && !((net.minecraft.server.level.ServerPlayer) source).getBukkitEntity().canSee(((net.minecraft.server.level.ServerPlayer) entity).getBukkitEntity())) {
+            if (checkCanSee && source instanceof net.minecraft.server.level.ServerPlayer
+                && !((net.minecraft.server.level.ServerPlayer) source).getBukkitEntity().canSee(entity.getBukkitEntity())) { // Paper - Entity Visibility API
                 continue;
             }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 8246ad7ebecdfc0b7519fe4412fef7b07407e850..40eb71c060c11d95e3c4962712d178a83fe2212e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1207,4 +1207,23 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return getHandle().isTicking();
     }
     // Paper end
+
+    // Paper start - Entity Visibility API
+    public boolean shownByDefault = true;
+    public final java.util.Set<CraftEntity> visibilityOverrides = java.util.Collections.newSetFromMap(new java.util.WeakHashMap<>());
+
+    @Override
+    public boolean isShownByDefault() {
+        return shownByDefault;
+    }
+
+    @Override
+    public void resetAndSetShownByDefault(boolean shownByDefault) {
+        this.shownByDefault = shownByDefault;
+        visibilityOverrides.clear();
+        if (isValid()) { // only update tracking if spawned
+            getHandle().tracker.updatePlayers(getHandle().getPlayersInTrackRange());
+        }
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 76e2ae09855e0efaaa0856d2f49e4968adbccbdc..ad974da3a046ffa7342fca037bca11f9c10e0cc9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -2473,4 +2473,63 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         return this.spigot;
     }
     // Spigot end
+
+    // Paper start - Entity Visibility API
+    @Override
+    public boolean canSee(org.bukkit.entity.Entity entity) {
+        if (entity instanceof Player) {
+            return canSee((Player) entity);
+        }
+        CraftEntity ce = (CraftEntity) entity;
+        return Boolean.logicalXor(ce.shownByDefault, ce.visibilityOverrides.contains(this));
+    }
+
+    @Override
+    public void showEntity(org.bukkit.entity.Entity entity) {
+        if (entity instanceof Player) {
+            showPlayer((Player) entity);
+        } else {
+            CraftEntity ce = (CraftEntity) entity;
+            boolean nowShown;
+            if (ce.shownByDefault) {
+                nowShown = ce.visibilityOverrides.remove(this);
+            } else {
+                nowShown = ce.visibilityOverrides.add(this);
+            }
+            if (nowShown) {
+                registerEntity(ce.getHandle());
+            }
+        }
+    }
+
+    @Override
+    public void hideEntity(org.bukkit.entity.Entity entity) {
+        if (entity instanceof Player) {
+            hidePlayer((Player) entity);
+        } else {
+            CraftEntity ce = (CraftEntity) entity;
+            boolean nowHidden;
+            if (ce.shownByDefault) {
+                nowHidden = ce.visibilityOverrides.add(this);
+            } else {
+                nowHidden = ce.visibilityOverrides.remove(this);
+            }
+            if (nowHidden) {
+                unregisterEntity(ce.getHandle());
+            }
+        }
+    }
+
+    private void registerEntity(Entity other) {
+        if (other.tracker != null && !other.tracker.seenBy.contains(this.getHandle().connection)) {
+            other.tracker.updatePlayer(this.getHandle());
+        }
+    }
+
+    private void unregisterEntity(Entity other) {
+        if (other.tracker != null) {
+            other.tracker.removePlayer(this.getHandle());
+        }
+    }
+    // Paper end
 }
