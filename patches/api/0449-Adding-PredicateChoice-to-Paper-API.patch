From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derverdox <mail.ysp@web.de>
Date: Sun, 3 Dec 2023 02:39:02 +0100
Subject: [PATCH] Adding PredicateChoice to Paper API


diff --git a/src/main/java/de/verdox/predicatechoice/ItemPredicate.java b/src/main/java/de/verdox/predicatechoice/ItemPredicate.java
new file mode 100644
index 0000000000000000000000000000000000000000..cbddd2e8f5d8a1c19c56029af5608ed8f2e8cc6c
--- /dev/null
+++ b/src/main/java/de/verdox/predicatechoice/ItemPredicate.java
@@ -0,0 +1,95 @@
+package de.verdox.predicatechoice;
+
+import com.google.common.base.Preconditions;
+import org.bukkit.Material;
+import org.bukkit.Tag;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.function.Predicate;
+import java.util.stream.Collectors;
+
+public interface ItemPredicate extends Predicate<ItemStack> {
+    List<ItemStack> recipeBookExamples();
+
+    class MaterialPredicate implements ItemPredicate {
+        private final List<Material> choices;
+
+        public MaterialPredicate(@NotNull List<Material> choices) {
+            Preconditions.checkArgument(choices != null, "choices");
+            Preconditions.checkArgument(!choices.isEmpty(), "Must have at least one choice");
+            for (Material choice : choices) {
+                Preconditions.checkArgument(choice != null, "Cannot have null choice");
+            }
+            this.choices = choices;
+        }
+
+        public MaterialPredicate(@NotNull Material choice) {
+            this(Arrays.asList(choice));
+        }
+
+        public MaterialPredicate(@NotNull Material... choices) {
+            this(Arrays.asList(choices));
+        }
+
+        public MaterialPredicate(@NotNull Tag<Material> choices) {
+            Preconditions.checkArgument(choices != null, "choices");
+            this.choices = new ArrayList<>(choices.getValues());
+        }
+
+        @Override
+        public List<ItemStack> recipeBookExamples() {
+            return choices.stream().map(ItemStack::new).collect(Collectors.toList());
+        }
+
+        @Override
+        public boolean test(final ItemStack stack) {
+            for (Material match : choices) {
+                if (stack.getType() == match) {
+                    return true;
+                }
+            }
+            return false;
+        }
+    }
+
+    class ExactItemPredicate implements ItemPredicate {
+        private List<ItemStack> choices;
+
+        public ExactItemPredicate(@NotNull ItemStack stack) {
+            this(Arrays.asList(stack));
+        }
+
+        public ExactItemPredicate(@NotNull ItemStack... stacks) {
+            this(Arrays.asList(stacks));
+        }
+
+        public ExactItemPredicate(@NotNull List<ItemStack> choices) {
+            Preconditions.checkArgument(choices != null, "choices");
+            Preconditions.checkArgument(!choices.isEmpty(), "Must have at least one choice");
+            for (ItemStack choice : choices) {
+                Preconditions.checkArgument(choice != null, "Cannot have null choice");
+            }
+
+            this.choices = new ArrayList<>(choices);
+        }
+
+        @Override
+        public List<ItemStack> recipeBookExamples() {
+            return choices;
+        }
+
+        @Override
+        public boolean test(final ItemStack stack) {
+            for (ItemStack match : choices) {
+                if (stack.isSimilar(match)) {
+                    return true;
+                }
+            }
+            return false;
+        }
+    }
+}
diff --git a/src/main/java/de/verdox/predicatechoice/PredicateChoice.java b/src/main/java/de/verdox/predicatechoice/PredicateChoice.java
new file mode 100644
index 0000000000000000000000000000000000000000..6e83917aa79d9d5e3fd121dd961097a5a01d14ba
--- /dev/null
+++ b/src/main/java/de/verdox/predicatechoice/PredicateChoice.java
@@ -0,0 +1,50 @@
+package de.verdox.predicatechoice;
+
+import com.google.common.base.Preconditions;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.RecipeChoice;
+import org.jetbrains.annotations.NotNull;
+import java.util.Collections;
+import java.util.List;
+import java.util.Objects;
+
+public record PredicateChoice(ItemPredicate itemPredicate) implements RecipeChoice {
+    public PredicateChoice {
+        Preconditions.checkArgument(itemPredicate != null, "itemPredicate");
+        Preconditions.checkArgument(!itemPredicate.recipeBookExamples().isEmpty(), "Must have at least one template");
+    }
+
+    @Override
+    public final boolean test(final ItemStack stack) {
+        return itemPredicate.test(stack);
+    }
+
+    @Override
+    public @NotNull ItemStack getItemStack() {
+        ItemStack stack = new ItemStack(itemPredicate.recipeBookExamples().get(0));
+        // For compat
+        if (itemPredicate.recipeBookExamples().size() > 1) {
+            stack.setDurability(Short.MAX_VALUE);
+        }
+
+        return stack;
+    }
+
+    @Override
+    public PredicateChoice clone() {
+        return new PredicateChoice(itemPredicate);
+    }
+
+    @NotNull
+    public List<ItemStack> getRecipeBookTemplates() {
+        return Collections.unmodifiableList(itemPredicate.recipeBookExamples());
+    }
+
+    @Override
+    public boolean equals(final Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        PredicateChoice that = (PredicateChoice) o;
+        return Objects.equals(itemPredicate, that.itemPredicate);
+    }
+}
diff --git a/src/main/java/org/bukkit/inventory/RecipeChoice.java b/src/main/java/org/bukkit/inventory/RecipeChoice.java
index 523818cbb0d6c90481ec97123e7fe0e2ff4eea14..62883850b9d1887708a56eca2d17959c98acc9fe 100644
--- a/src/main/java/org/bukkit/inventory/RecipeChoice.java
+++ b/src/main/java/org/bukkit/inventory/RecipeChoice.java
@@ -37,7 +37,9 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
 
     /**
      * Represents a choice of multiple matching Materials.
+     * Deprecated - Use {@link de.verdox.predicatechoice.PredicateChoice instead}
      */
+    @Deprecated
     public static class MaterialChoice implements RecipeChoice {
 
         private List<Material> choices;
@@ -146,7 +148,9 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
     /**
      * Represents a choice that will be valid only one of the stacks is exactly
      * matched (aside from stack size).
+     * Deprecated - Use {@link de.verdox.predicatechoice.PredicateChoice instead}
      */
+    @Deprecated
     public static class ExactChoice implements RecipeChoice {
 
         private List<ItemStack> choices;
