From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tassu <git@tassu.me>
Date: Thu, 13 Sep 2018 08:45:21 +0300
Subject: [PATCH] Implement furnace cook speed multiplier API

Signed-off-by: Tassu <git@tassu.me>

Fixed an issue where a furnace's cook-speed multiplier rounds down
to the nearest Integer when updating its current cook time.

Instead of incrementing the cookTime counter by the current cookSpeedMultiplier (which is causing 
the loss in precision issue due to double -> integer casting), I have instead modified an internal function,
getRecipeCookingTime(), to scale the total cooking time of the current item to the current cookSpeedMultiplier.

This is done through dividing the total cook time of the item by the set multiplier, and taking the ceiling
of the final output (ceiling is used here to replicate the behavior of this previous patch, otherwise items smelted
in furnaces with odd multipliers will finish cooking at least 1 tick earlier).

I also changed the access modifier for the getRecipeCookingTime() function to public, as it allows
the setCookSpeedMultiplier API call to immediately adjust the current cooking time to the newly set multiplier.
Please let me know if this is a safe change or not.

This patch is tested by a small test plugin that I wrote yesterday. I can confirm that it works for
all blast furnaces, smokers, and normal furnaces!

This plugin can be found at:
https://github.com/ericsu14/furnacetest

Modified by: Eric Su <ericsu@alumni.usc.edu>

diff --git a/src/main/java/net/minecraft/server/TileEntityFurnace.java b/src/main/java/net/minecraft/server/TileEntityFurnace.java
index 99b20fa5feff0f766124d4ec9474852e33e329f2..ac098e9005bf491b40d988512b19da2c1a8cfb1a 100644
--- a/src/main/java/net/minecraft/server/TileEntityFurnace.java
+++ b/src/main/java/net/minecraft/server/TileEntityFurnace.java
@@ -10,6 +10,8 @@ import java.util.List;
 import java.util.Map;
 import javax.annotation.Nullable;
 // CraftBukkit start
+import java.util.List;
+
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
@@ -28,6 +30,7 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I
     protected NonNullList<ItemStack> items;
     public int burnTime;
     private int ticksForCurrentFuel;
+    public double cookSpeedMultiplier = 1.0; // Paper - cook speed multiplier API
     public int cookTime;
     public int cookTimeTotal;
     protected final IContainerProperties b;
@@ -228,6 +231,11 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I
             this.n.put(new MinecraftKey(s), nbttagcompound1.getInt(s));
         }
 
+        // Paper start - cook speed API
+        if (nbttagcompound.hasKey("Paper.CookSpeedMultiplier")) {
+            this.cookSpeedMultiplier = nbttagcompound.getDouble("Paper.CookSpeedMultiplier");
+        }
+        // Paper end
     }
 
     @Override
@@ -236,6 +244,7 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I
         nbttagcompound.setShort("BurnTime", (short) this.burnTime);
         nbttagcompound.setShort("CookTime", (short) this.cookTime);
         nbttagcompound.setShort("CookTimeTotal", (short) this.cookTimeTotal);
+        nbttagcompound.setDouble("Paper.CookSpeedMultiplier", this.cookSpeedMultiplier); // Paper - cook speed multiplier API
         ContainerUtil.a(nbttagcompound, this.items);
         NBTTagCompound nbttagcompound1 = new NBTTagCompound();
 
@@ -296,7 +305,7 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I
 
                 if (this.isBurning() && this.canBurn(irecipe)) {
                     ++this.cookTime;
-                    if (this.cookTime == this.cookTimeTotal) {
+                    if (this.cookTime >= this.cookTimeTotal) { // Paper - cook speed multiplier API
                         this.cookTime = 0;
                         this.cookTimeTotal = this.getRecipeCookingTime();
                         this.burn(irecipe);
@@ -396,9 +405,13 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I
         }
     }
 
-    protected int getRecipeCookingTime() {
-        return (this.hasWorld()) ? (Integer) this.world.getCraftingManager().craft((Recipes<RecipeCooking>) this.c, this, this.world).map(RecipeCooking::getCookingTime).orElse(200) : 200; // CraftBukkit - SPIGOT-4302 // Eclipse fail
+    // Paper begin - Expose this function so CraftFurnace can correctly scale the total cooking time to a new multiplier
+    public int getRecipeCookingTime() {
+        /* Scale the recipe's cooking time to the current cookSpeedMultiplier */
+        Integer cookTime = (this.hasWorld()) ? (Integer) this.world.getCraftingManager().craft((Recipes<RecipeCooking>) this.c, this, this.world).map(RecipeCooking::getCookingTime).orElse(200) : 200; // CraftBukkit - SPIGOT-4302 // Eclipse fail
+        return (int) Math.ceil (cookTime.doubleValue() / this.cookSpeedMultiplier);
     }
+    // Paper end
 
     public static boolean isFuel(ItemStack itemstack) {
         return f().containsKey(itemstack.getItem());
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java b/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
index 27c8cc130e7466c396b514dd77f1385f967bebdb..298e75d72b889396a15907e713c29430c168b915 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
@@ -63,4 +63,20 @@ public abstract class CraftFurnace<T extends TileEntityFurnace> extends CraftCon
     public void setCookTimeTotal(int cookTimeTotal) {
         this.getSnapshot().cookTimeTotal = cookTimeTotal;
     }
+
+    // Paper start - cook speed multiplier API
+    @Override
+    public double getCookSpeedMultiplier() {
+        return this.getSnapshot().cookSpeedMultiplier;
+    }
+
+    @Override
+    public void setCookSpeedMultiplier(double multiplier) {
+        com.google.common.base.Preconditions.checkArgument(multiplier >= 0, "Furnace speed multiplier cannot be negative");
+        com.google.common.base.Preconditions.checkArgument(multiplier <= 200, "Furnace speed multiplier cannot more than 200");
+        T snapshot = this.getSnapshot();
+        snapshot.cookSpeedMultiplier = multiplier;
+        snapshot.cookTimeTotal = snapshot.getRecipeCookingTime(); // Update the snapshot's current total cook time to scale with the newly set multiplier
+    }
+    // Paper end
 }
