From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrPowerGamerBR <git@mrpowergamerbr.com>
Date: Sun, 26 Nov 2023 13:02:16 -0300
Subject: [PATCH] Fix MC-117075: Block Entities Unload Lag Spike

We replaced the `blockEntityTickers` list with a custom list based on fastutil's `ObjectArrayList` with a small yet huge change for us: A method that allows us to remove a list of indexes from the list.

This is WAY FASTER than using `removeAll` with a list of entries to be removed, because we don't need to calculate the identity of each block entity to be removed, and we can jump directly to where the search should begin, giving a performance boost for small removals (because we don't need to loop thru the entire list to find what element should be removed) and a performance boost for big removals (no need to calculate the identity of each block entity).

diff --git a/src/main/java/io/papermc/paper/util/BlockEntityTickersList.java b/src/main/java/io/papermc/paper/util/BlockEntityTickersList.java
new file mode 100644
index 0000000000000000000000000000000000000000..f65b2a536b7ef65f457388ae44168d4a7f8ba61e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/util/BlockEntityTickersList.java
@@ -0,0 +1,105 @@
+package io.papermc.paper.util;
+
+import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
+import it.unimi.dsi.fastutil.ints.IntSet;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
+import net.minecraft.world.level.block.entity.TickingBlockEntity;
+
+import java.util.Arrays;
+import java.util.Collection;
+
+/**
+ * A list for ServerLevel's blockEntityTickers
+ *
+ * This list is behaves identically to ObjectArrayList, but it has an additional method, `removeAllByIndex`, that allows a list of integers to be passed indicating what
+ * indexes should be deleted from the list
+ *
+ * This is faster than using removeAll, since we don't need to compare the identity of each block entity, and faster than looping thru each index manually and deleting with remove,
+ * since we don't need to resize the array every single remove.
+ */
+public final class BlockEntityTickersList extends ObjectArrayList<TickingBlockEntity> {
+    private final IntOpenHashSet toRemove = new IntOpenHashSet();
+    private int startSearchFromIndex = Integer.MAX_VALUE;
+
+    /** Creates a new array list with {@link #DEFAULT_INITIAL_CAPACITY} capacity. */
+    public BlockEntityTickersList() {
+        super();
+    }
+
+    /**
+     * Creates a new array list and fills it with a given collection.
+     *
+     * @param c a collection that will be used to fill the array list.
+     */
+    public BlockEntityTickersList(final Collection<? extends TickingBlockEntity> c) {
+        super(c);
+    }
+
+    /**
+     * Marks an entry as removed
+     *
+     * @param index the index of the item on the list to be marked as removed
+     */
+    public void markAsRemoved(final int index) {
+        if (this.startSearchFromIndex > index) {
+            this.startSearchFromIndex = index;
+        }
+
+        this.toRemove.add(index);
+    }
+
+    /**
+     * Removes elements that have been marked as removed.
+     */
+    public void removeMarkedEntries() {
+        if (this.startSearchFromIndex == Integer.MAX_VALUE) { // No entries in the list, skip
+            return;
+        }
+
+        removeAllByIndex(startSearchFromIndex, toRemove);
+        toRemove.clear();
+        this.startSearchFromIndex = Integer.MAX_VALUE; // Reset the start search index
+    }
+
+    /**
+     * Removes elements by their index.
+     *
+     * @param startSearchFromIndex from where the search should start
+     * @param indexesToBeRemoved list of indexes to be removed
+     */
+    private void removeAllByIndex(final int startSearchFromIndex, final IntSet indexesToBeRemoved) { // can't use Set<Integer> because we want to avoid autoboxing when using contains
+        final int requiredMatches = indexesToBeRemoved.size();
+        if (requiredMatches == 0) {
+            return; // exit early, we don't need to do anything
+        }
+        
+        final Object[] elements = this.a;
+        int newIndex = startSearchFromIndex;
+        int matches = 0;
+        for (int i = startSearchFromIndex; i < size; i++) { // If the user knows the first index to be removed, we can skip elements lot of unnecessary comparsions
+            if (!indexesToBeRemoved.contains(i)) {
+                // TODO: It can be possible to optimize this loop by tracking the start/finish and then using arraycopy to "skip" the elements,
+                //  this would optimize cases where the index to be removed are far apart, HOWEVER it does have elements big performance impact if you are doing
+                //  "arraycopy" for each element
+                elements[newIndex++] = elements[i];
+            } else {
+                matches++;
+            }
+
+            if (matches == requiredMatches) { // Exit the loop if we already removed everything, we don't need to check anything else
+                // We need to update the final size here, because we know that we already found everything!
+                // Because we know that the size must be currentSize - requiredMatches (because we have matched everything), let's update the value
+                // However, we need to copy the rest of the stuff over
+                if (i != (size - 1)) { // If it isn't the last index...
+                    // i + 1 because we want to copy the *next* element over
+                    // and the size - i - 1 is because we want to get the current size, minus the current index (which is i), and then - 1 because we want to copy -1 ahead (remember, we are adding +1 to copy the *next* element)
+                    System.arraycopy(elements, i + 1, elements, newIndex, size - i - 1);
+                }
+                newIndex = size - requiredMatches;
+                break;
+            }
+        }
+        Arrays.fill(elements, newIndex, size, null);
+        size = newIndex;
+    }
+}
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 407607babfb200152bb0e5c6d56bb66c82217077..c40ffbe8f29c93606401dc1db786fde7a232b422 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -116,7 +116,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     public static final int TICKS_PER_DAY = 24000;
     public static final int MAX_ENTITY_SPAWN_Y = 20000000;
     public static final int MIN_ENTITY_SPAWN_Y = -20000000;
-    protected final List<TickingBlockEntity> blockEntityTickers = Lists.newArrayList(); public final int getTotalTileEntityTickers() { return this.blockEntityTickers.size(); } // Paper
+    protected final io.papermc.paper.util.BlockEntityTickersList blockEntityTickers = new io.papermc.paper.util.BlockEntityTickersList(); public final int getTotalTileEntityTickers() { return this.blockEntityTickers.size(); } // Paper
     protected final NeighborUpdater neighborUpdater;
     private final List<TickingBlockEntity> pendingBlockEntityTickers = Lists.newArrayList();
     private boolean tickingBlockEntities;
@@ -812,7 +812,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
             if (tickingblockentity == null) {
                 this.getCraftServer().getLogger().severe("Spigot has detected a null entity and has removed it, preventing a crash");
                 tilesThisCycle--;
-                this.blockEntityTickers.remove(this.tileTickPosition--);
+                this.blockEntityTickers.markAsRemoved(this.tileTickPosition); // this.blockEntityTickers.remove(this.tileTickPosition--); // Paper
                 continue;
             }
             // Spigot end
@@ -820,13 +820,13 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
             if (tickingblockentity.isRemoved()) {
                 // Spigot start
                 tilesThisCycle--;
-                this.blockEntityTickers.remove(this.tileTickPosition--);
+                this.blockEntityTickers.markAsRemoved(this.tileTickPosition); // this.blockEntityTickers.remove(this.tileTickPosition--); // Paper
                 // Spigot end
             } else if (this.shouldTickBlocksAt(tickingblockentity.getPos())) {
                 tickingblockentity.tick();
             }
         }
-
+        this.blockEntityTickers.removeMarkedEntries(); // Paper
         this.timings.tileEntityTick.stopTiming(); // Spigot
         this.tickingBlockEntities = false;
         co.aikar.timings.TimingHistory.tileEntityTicks += this.blockEntityTickers.size(); // Paper
