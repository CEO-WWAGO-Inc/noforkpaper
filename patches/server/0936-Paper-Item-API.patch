From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Owen1212055 <23108066+Owen1212055@users.noreply.github.com>
Date: Mon, 17 Oct 2022 18:00:34 -0400
Subject: [PATCH] Paper Item API


diff --git a/src/main/java/io/papermc/paper/inventory/item/PaperItemStack.java b/src/main/java/io/papermc/paper/inventory/item/PaperItemStack.java
new file mode 100644
index 0000000000000000000000000000000000000000..1d8b4b61099fd41520534fc00c3b9f819a28520d
--- /dev/null
+++ b/src/main/java/io/papermc/paper/inventory/item/PaperItemStack.java
@@ -0,0 +1,11 @@
+package io.papermc.paper.inventory.item;
+
+import net.minecraft.world.item.Items;
+
+public class PaperItemStack {
+
+
+    public static net.minecraft.world.item.ItemStack asVanillaCopy(io.papermc.paper.inventory.item.ItemStack paperItemStack) {
+        return new net.minecraft.world.item.ItemStack(Items.STONE);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/inventory/item/VanillaItemStack.java b/src/main/java/io/papermc/paper/inventory/item/VanillaItemStack.java
new file mode 100644
index 0000000000000000000000000000000000000000..2a65181da52bfdb986b12d355e76a3c675d3f89d
--- /dev/null
+++ b/src/main/java/io/papermc/paper/inventory/item/VanillaItemStack.java
@@ -0,0 +1,59 @@
+package io.papermc.paper.inventory.item;
+
+import io.papermc.paper.adventure.PaperAdventure;
+import net.kyori.adventure.key.Key;
+import net.kyori.adventure.text.event.HoverEvent;
+import net.minecraft.world.item.Item;
+import org.bukkit.Material;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.inventory.meta.ItemMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.function.UnaryOperator;
+
+public class VanillaItemStack implements ItemStack {
+
+    private final net.minecraft.world.item.ItemStack itemStack;
+
+    public VanillaItemStack(@NotNull net.minecraft.world.item.ItemStack vanilla) {
+        this.itemStack = vanilla;
+    }
+
+    @Override
+    public @NotNull Material getMaterial() {
+        return CraftMagicNumbers.getMaterial(this.itemStack.getItem());
+    }
+
+    @Override
+    public void setMaterial(@NotNull Material material) {
+        this.itemStack.setItem(CraftMagicNumbers.getItem(material));
+    }
+
+    @Override
+    public int getSize() {
+        return this.itemStack.getCount();
+    }
+
+    @Override
+    public void setSize(int size) {
+        this.itemStack.setCount(size);
+    }
+
+    @Override
+    public @Nullable ItemMeta getMeta() {
+        return null;
+    }
+
+    @Override
+    public void setMeta(@Nullable ItemMeta meta) {
+
+    }
+
+    @Override
+    public @NotNull HoverEvent<HoverEvent.ShowItem> asHoverEvent(@NotNull UnaryOperator<HoverEvent.ShowItem> op) {
+        Key key = CraftMagicNumbers.getMaterial(this.itemStack.getItem()).getKey();
+
+        return HoverEvent.showItem(op.apply(HoverEvent.ShowItem.of(key, this.itemStack.getCount(), PaperAdventure.asBinaryTagHolder(this.itemStack.getTag()))));
+    }
+}
diff --git a/src/main/java/io/papermc/paper/item/MetaPropertySkeletons.java b/src/main/java/io/papermc/paper/item/MetaPropertySkeletons.java
new file mode 100644
index 0000000000000000000000000000000000000000..9996c1a03edf168e8339a07b271fb25b7dac6465
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/MetaPropertySkeletons.java
@@ -0,0 +1,49 @@
+package io.papermc.paper.item;
+
+import io.papermc.paper.property.PropertyHolder;
+import io.papermc.paper.property.PropertyKey;
+import io.papermc.paper.property.value.Value;
+import org.bukkit.potion.PotionData;
+import org.bukkit.potion.PotionType;
+
+import java.util.List;
+
+import static io.papermc.paper.inventory.item.properties.ItemProperties.*;
+
+public interface MetaPropertySkeletons {
+
+    // CraftMetaPotion
+    PropertyHolder.Immutable DEFAULT_STATE = PropertyHolder.Immutable.builder()
+        .of(DEFAULT_POTION_TYPE, Value.of(DEFAULT_POTION_TYPE, new PotionData(PotionType.UNCRAFTABLE, false, false)))
+        .build();
+
+    List<PropertyKey<?>> CRAFT_META_POTION = List.of(
+        DEFAULT_POTION_TYPE,
+        CUSTOM_POTION_EFFECTS,
+        COLOR
+    );
+
+    // CraftMetaSkull
+    List<PropertyKey<?>> CRAFT_META_SKULL = List.of(
+        SKULL_OWNER
+    );
+
+    // CraftMetaSpawnEgg
+    List<PropertyKey<?>> CRAFT_META_SPAWN_EGG = List.of(
+        ENTITY_TAG
+    );
+
+    // CraftMetaSuspiciousStew
+    List<PropertyKey<?>> CRAFT_META_SUSPICIOUS_STEW = List.of(
+        STEW_EFFECTS
+    );
+
+    // CraftMetaTropicalFishBucket
+    List<PropertyKey<?>> CRAFT_META_TROPICAL_FISH_BUCKET = List.of(
+        BUCKET_VARIANT,
+        ENTITY_TAG
+    );
+
+
+
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/MetaTropicalFishBucket.java b/src/main/java/io/papermc/paper/item/meta/MetaTropicalFishBucket.java
new file mode 100644
index 0000000000000000000000000000000000000000..dd033049663c084cb6e4d2ea4e2ade0d13f4095f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/MetaTropicalFishBucket.java
@@ -0,0 +1,6 @@
+package io.papermc.paper.item.meta;
+
+import org.bukkit.inventory.meta.TropicalFishBucketMeta;
+
+public class MetaTropicalFishBucket implements TropicalFishBucketMeta {
+}
diff --git a/src/main/java/io/papermc/paper/item/meta/PaperMeta.java b/src/main/java/io/papermc/paper/item/meta/PaperMeta.java
new file mode 100644
index 0000000000000000000000000000000000000000..65d6c57b5aea2e3890d640f26160680bd3476aa7
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/meta/PaperMeta.java
@@ -0,0 +1,479 @@
+package io.papermc.paper.item.meta;
+
+import com.destroystokyo.paper.Namespaced;
+import com.google.common.base.Preconditions;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.LinkedHashMultimap;
+import com.google.common.collect.Multimap;
+import com.google.common.collect.SetMultimap;
+import io.papermc.paper.property.PropertyHolder;
+import io.papermc.paper.property.PropertyKey;
+import io.papermc.paper.property.StoredPropertyHolder;
+import io.papermc.paper.property.value.MapValue;
+import io.papermc.paper.property.value.MultiMapValue;
+import io.papermc.paper.property.value.SetValue;
+import io.papermc.paper.property.value.Value;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
+import net.md_5.bungee.api.chat.BaseComponent;
+import org.bukkit.Material;
+import org.bukkit.attribute.Attribute;
+import org.bukkit.attribute.AttributeModifier;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.enchantments.Enchantment;
+import org.bukkit.inventory.EquipmentSlot;
+import org.bukkit.inventory.ItemFlag;
+import org.bukkit.inventory.meta.ItemMeta;
+import org.bukkit.inventory.meta.tags.CustomItemTagContainer;
+import org.bukkit.persistence.PersistentDataContainer;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Set;
+
+import static io.papermc.paper.inventory.item.properties.ItemProperties.ATTRIBUTES;
+import static io.papermc.paper.inventory.item.properties.ItemProperties.CUSTOM_MODEL_DATA;
+import static io.papermc.paper.inventory.item.properties.ItemProperties.DISPLAY;
+import static io.papermc.paper.inventory.item.properties.ItemProperties.DISPLAY_NAME;
+import static io.papermc.paper.inventory.item.properties.ItemProperties.ENCHANTMENTS;
+import static io.papermc.paper.inventory.item.properties.ItemProperties.HIDE_FLAGS;
+import static io.papermc.paper.inventory.item.properties.ItemProperties.LOC_NAME;
+import static io.papermc.paper.inventory.item.properties.ItemProperties.LORE;
+import static io.papermc.paper.inventory.item.properties.ItemProperties.UNBREAKABLE;
+
+public class PaperMeta implements ItemMeta {
+
+    private final PropertyHolder.Mutable propertyHolder;
+
+    public PaperMeta(PropertyHolder.Mutable propertyHolder) {
+        this.propertyHolder = propertyHolder;
+    }
+
+    @Override
+    public @NotNull Map<String, Object> serialize() {
+        return null;
+    }
+
+    private boolean hasInPropertyPath(PropertyKey<StoredPropertyHolder> outer, PropertyKey<?> inner) {
+        PropertyHolder holder = this.propertyHolder.get(outer);
+        if (holder != null) {
+            return holder.hasProperty(inner);
+        }
+
+        return false;
+    }
+
+    private <T, V extends Value<T>> T getFromPropertyPath(PropertyKey<StoredPropertyHolder> outer, PropertyKey<V> inner) {
+        PropertyHolder holder = this.propertyHolder.get(outer);
+        if (holder != null) {
+            return holder.get(inner);
+        }
+
+        return null;
+    }
+
+    private <T, V extends Value<T>> void setFromPropertyPath(PropertyKey<StoredPropertyHolder> outer, PropertyKey<V> inner, T value) {
+        PropertyHolder.Mutable holder = this.propertyHolder.get(outer);
+        if (holder != null) {
+            holder = PropertyHolder.Mutable.of(); // TODO nbt backed
+            this.propertyHolder.set(outer, holder);
+        }
+
+        holder.
+    }
+
+    @Override
+    public boolean hasDisplayName() {
+        return this.hasInPropertyPath(DISPLAY, DISPLAY_NAME);
+    }
+
+    @Nullable
+    @Override
+    public Component displayName() {
+        return this.getFromPropertyPath(DISPLAY, DISPLAY_NAME);
+    }
+
+    @Override
+    public void displayName(@Nullable Component displayName) {
+        this.setFromPropertyPath(DISPLAY, DISPLAY_NAME, displayName);
+    }
+
+    @Override
+    public @NotNull String getDisplayName() {
+        Component displayName = this.displayName();
+        if (displayName == null) {
+            return "";
+        }
+        String gson = GsonComponentSerializer.gson().serialize(displayName);
+        return CraftChatMessage.fromJSONComponent(gson);
+    }
+
+    @Override
+    public void setDisplayName(@Nullable String name) {
+        // TODO: test null strings
+        this.displayName(GsonComponentSerializer.gson().deserialize(CraftChatMessage.fromStringOrNullToJSON(name)));
+    }
+
+    @NotNull
+    @Override
+    public BaseComponent[] getDisplayNameComponent() {
+        Component displayName = this.displayName();
+        if (displayName == null) {
+            return new BaseComponent[0];
+        }
+
+        return net.md_5.bungee.chat.ComponentSerializer.parse(GsonComponentSerializer.gson().serialize(displayName));
+    }
+
+    @Override
+    public void setDisplayNameComponent(@Nullable BaseComponent[] component) {
+        String gson = net.md_5.bungee.chat.ComponentSerializer.toString(component);
+        this.displayName(GsonComponentSerializer.gson().deserialize(gson));
+    }
+
+    @Override
+    public boolean hasLocalizedName() {
+        return this.hasInPropertyPath(DISPLAY, LOC_NAME);
+    }
+
+    @Override
+    public @NotNull String getLocalizedName() {
+        return this.getFromPropertyPath(DISPLAY, LOC_NAME);
+    }
+
+    @Override
+    public void setLocalizedName(@Nullable String name) {
+        this.setFromPropertyPath(DISPLAY, LOC_NAME, name);
+    }
+
+    @Override
+    public boolean hasLore() {
+        return this.hasInPropertyPath(DISPLAY, LORE);
+    }
+
+    @Override
+    public @Nullable List<Component> lore() {
+        return this.getFromPropertyPath(DISPLAY, LORE);
+    }
+
+    @Override
+    public void lore(@Nullable List<Component> lore) {
+        this.setFromPropertyPath(DISPLAY, LORE, lore);
+    }
+
+    @Override
+    public @Nullable List<String> getLore() {
+        return null;
+    }
+
+    @Override
+    public void setLore(@Nullable List<String> lore) {
+
+    }
+
+    @Override
+    public @Nullable List<BaseComponent[]> getLoreComponents() {
+        return null;
+    }
+
+    @Override
+    public void setLoreComponents(@Nullable List<BaseComponent[]> lore) {
+
+    }
+
+    @Override
+    public boolean hasCustomModelData() {
+        return this.propertyHolder.hasProperty(CUSTOM_MODEL_DATA);
+    }
+
+    @Override
+    public int getCustomModelData() {
+        return Objects.requireNonNullElse(this.propertyHolder.get(CUSTOM_MODEL_DATA), 0);
+    }
+
+    @Override
+    public void setCustomModelData(@Nullable Integer data) {
+        this.propertyHolder.set(CUSTOM_MODEL_DATA, data);
+    }
+
+    @Override
+    public boolean hasEnchants() {
+        // Legacy reasons?
+        // TODO: check
+        return this.propertyHolder.hasProperty(ENCHANTMENTS) && !this.propertyHolder.getValue(ENCHANTMENTS).isEmpty();
+    }
+
+    @Override
+    public boolean hasEnchant(@NotNull Enchantment ench) {
+        MapValue<Enchantment, Integer> mapValue = this.propertyHolder.getValue(ENCHANTMENTS);
+        if (mapValue == null) {
+            return false;
+        }
+
+        return mapValue.has(ench);
+    }
+
+    @Override
+    public int getEnchantLevel(@NotNull Enchantment ench) {
+        MapValue<Enchantment, Integer> mapValue = this.propertyHolder.getValue(ENCHANTMENTS);
+        if (mapValue == null) {
+            return 0;
+        }
+
+        return mapValue.getEntry(ench);
+    }
+
+    @Override
+    public @NotNull Map<Enchantment, Integer> getEnchants() {
+        return this.propertyHolder.getOrCreate(ENCHANTMENTS).cloneValue();
+    }
+
+    @Override
+    public boolean addEnchant(@NotNull Enchantment ench, int level, boolean ignoreLevelRestriction) {
+        if (ignoreLevelRestriction || level >= ench.getStartLevel() && level <= ench.getMaxLevel()) {
+            MapValue<Enchantment, Integer> enchantmentMap = this.propertyHolder.getOrCreate(ENCHANTMENTS);
+
+            Integer old = enchantmentMap.put(ench, level);
+            return old == null || old != level;
+        }
+
+        return false;
+    }
+
+    @Override
+    public boolean removeEnchant(@NotNull Enchantment ench) {
+        MapValue<Enchantment, Integer> enchantmentMap = this.propertyHolder.getValue(ENCHANTMENTS);
+        if (enchantmentMap == null) {
+            return false;
+        }
+
+        return enchantmentMap.removeEntry(ench);
+    }
+
+    @Override
+    public boolean hasConflictingEnchant(@NotNull Enchantment ench) {
+        if (!hasEnchants()) {
+            return false;
+        }
+
+        Map<Enchantment, Integer> enchantments = this.propertyHolder.getValue(ENCHANTMENTS).getValue();
+        for (Enchantment enchant : enchantments.keySet()) {
+            if (enchant.conflictsWith(ench)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    public void addItemFlags(@NotNull ItemFlag... itemFlags) {
+        SetValue<ItemFlag> flagSetValue = this.propertyHolder.getOrCreateAndSet(HIDE_FLAGS);
+        for (ItemFlag flag : itemFlags) {
+            flagSetValue.add(flag);
+        }
+    }
+
+    @Override
+    public void removeItemFlags(@NotNull ItemFlag... itemFlags) {
+        SetValue<ItemFlag> flagSetValue = this.propertyHolder.getOrCreateAndSet(HIDE_FLAGS);
+        for (ItemFlag flag : itemFlags) {
+            flagSetValue.remove(flag);
+        }
+    }
+
+    @Override
+    public @NotNull Set<ItemFlag> getItemFlags() {
+        return this.propertyHolder.getOrCreate(HIDE_FLAGS).cloneValue();
+    }
+
+    @Override
+    public boolean hasItemFlag(@NotNull ItemFlag flag) {
+        return this.propertyHolder.hasProperty(HIDE_FLAGS);
+    }
+
+    @Override
+    public boolean isUnbreakable() {
+        return this.propertyHolder.hasProperty(UNBREAKABLE) && this.propertyHolder.get(UNBREAKABLE);
+    }
+
+    @Override
+    public void setUnbreakable(boolean unbreakable) {
+        this.propertyHolder.set(UNBREAKABLE, unbreakable);
+    }
+
+    @Override
+    public boolean hasAttributeModifiers() {
+        return this.propertyHolder.hasProperty(ATTRIBUTES);
+    }
+
+    @Override
+    public @Nullable Multimap<Attribute, AttributeModifier> getAttributeModifiers() {
+        return this.propertyHolder.getOrCreate(ATTRIBUTES).cloneValue();
+    }
+
+    @Override
+    public void setAttributeModifiers(@Nullable Multimap<Attribute, AttributeModifier> attributeModifiers) {
+        this.propertyHolder.set(ATTRIBUTES, attributeModifiers);
+    }
+
+    @Override
+    public @NotNull Multimap<Attribute, AttributeModifier> getAttributeModifiers(@NotNull EquipmentSlot slot) {
+        SetMultimap<Attribute, AttributeModifier> result = LinkedHashMultimap.create();
+        for (Map.Entry<Attribute, AttributeModifier> entry : this.propertyHolder.getOrCreate(ATTRIBUTES).getValue().entries()) {
+            if (entry.getValue().getSlot() == null || entry.getValue().getSlot() == slot) {
+                result.put(entry.getKey(), entry.getValue());
+            }
+        }
+
+        return result;
+    }
+
+    @Override
+    public @Nullable Collection<AttributeModifier> getAttributeModifiers(@NotNull Attribute attribute) {
+        Multimap<Attribute, AttributeModifier> attributes = this.propertyHolder.get(ATTRIBUTES);
+
+        return attributes != null && attributes.containsKey(attribute) ? ImmutableList.copyOf(attributes.get(attribute)) : null;
+    }
+
+    @Override
+    public boolean addAttributeModifier(@NotNull Attribute attribute, @NotNull AttributeModifier modifier) {
+        Multimap<Attribute, AttributeModifier> attributes = this.propertyHolder.getOrCreateAndSet(ATTRIBUTES).getValue();
+        for (Map.Entry<Attribute, AttributeModifier> entry : attributes.entries()) {
+            Preconditions.checkArgument(!entry.getValue().getUniqueId().equals(modifier.getUniqueId()), "Cannot register AttributeModifier. Modifier is already applied! %s", modifier);
+        }
+
+        return attributes.put(attribute, modifier);
+    }
+
+    @Override
+    public boolean removeAttributeModifier(@NotNull Attribute attribute) {
+        return !this.attributeModifiers.removeAll(attribute).isEmpty();
+    }
+
+    @Override
+    public boolean removeAttributeModifier(@NotNull EquipmentSlot slot) {
+        int removed = 0;
+        Iterator<Map.Entry<Attribute, AttributeModifier>> iter = this.attributeModifiers.entries().iterator();
+
+        while (iter.hasNext()) {
+            Map.Entry<Attribute, AttributeModifier> entry = iter.next();
+            // Explicitly match against null because (as of MC 1.13) AttributeModifiers without a -
+            // set slot are active in any slot.
+            if (entry.getValue().getSlot() == null || entry.getValue().getSlot() == slot) {
+                iter.remove();
+                ++removed;
+            }
+        }
+        return removed > 0;
+    }
+
+    @Override
+    public boolean removeAttributeModifier(@NotNull Attribute attribute, @NotNull AttributeModifier modifier) {
+        int removed = 0;
+        Iterator<Map.Entry<Attribute, AttributeModifier>> iter = this.attributeModifiers.entries().iterator();
+
+        while (iter.hasNext()) {
+            Map.Entry<Attribute, AttributeModifier> entry = iter.next();
+            if (entry.getKey() == null || entry.getValue() == null) {
+                iter.remove();
+                ++removed;
+                continue; // remove all null values while we are here
+            }
+
+            if (entry.getKey() == attribute && entry.getValue().getUniqueId().equals(modifier.getUniqueId())) {
+                iter.remove();
+                ++removed;
+            }
+        }
+        return removed > 0;
+    }
+
+    @Override
+    public @NotNull CustomItemTagContainer getCustomTagContainer() {
+        return null;
+    }
+
+    @Override
+    public void setVersion(int version) {
+        // TODO
+    }
+
+    @Override
+    public @NotNull ItemMeta clone() {
+        return new PaperMeta(propertyHolder.clone());
+    }
+
+    @Override
+    public Set<Material> getCanDestroy() {
+        return null;
+    }
+
+    @Override
+    public void setCanDestroy(Set<Material> canDestroy) {
+
+    }
+
+    @Override
+    public Set<Material> getCanPlaceOn() {
+        return null;
+    }
+
+    @Override
+    public void setCanPlaceOn(Set<Material> canPlaceOn) {
+
+    }
+
+    @Override
+    public @NotNull Set<Namespaced> getDestroyableKeys() {
+        return null;
+    }
+
+    @Override
+    public void setDestroyableKeys(@NotNull Collection<Namespaced> canDestroy) {
+
+    }
+
+    @Override
+    public @NotNull Set<Namespaced> getPlaceableKeys() {
+        return null;
+    }
+
+    @Override
+    public @NotNull void setPlaceableKeys(@NotNull Collection<Namespaced> canPlaceOn) {
+
+    }
+
+    @Override
+    public boolean hasPlaceableKeys() {
+        return false;
+    }
+
+    @Override
+    public boolean hasDestroyableKeys() {
+        return false;
+    }
+
+    @Override
+    public @NotNull PersistentDataContainer getPersistentDataContainer() {
+        return null;
+    }
+
+    @Override
+    public @NotNull String getAsString() {
+        return this.toString();
+    }
+
+    @Override
+    public String toString() {
+        return "PaperMeta{" +
+            "propertyHolder=" + propertyHolder +
+            '}';
+    }
+}
diff --git a/src/main/java/io/papermc/paper/item/property/ItemPropertyRegistration.java b/src/main/java/io/papermc/paper/item/property/ItemPropertyRegistration.java
new file mode 100644
index 0000000000000000000000000000000000000000..e651a794a41cccd56a73a35448919838347b6333
--- /dev/null
+++ b/src/main/java/io/papermc/paper/item/property/ItemPropertyRegistration.java
@@ -0,0 +1,37 @@
+package io.papermc.paper.item.property;
+
+import io.papermc.paper.inventory.item.properties.ItemProperties;
+import io.papermc.paper.property.SimpleValuePlatformAdapter;
+import io.papermc.paper.property.nbt.NbtPropertyHolder;
+import io.papermc.paper.property.value.Value;
+import net.minecraft.nbt.IntTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.world.item.ItemStack;
+import org.bukkit.Color;
+
+public class ItemPropertyRegistration {
+
+    public NbtPropertyHolder newHolder(ItemStack itemStack) {
+        NbtPropertyHolder tag = new NbtPropertyHolder(itemStack.getOrCreateTag());
+
+        tag.register(
+                ItemProperties.COLOR, new SimpleValuePlatformAdapter<>() {
+                    @Override
+                    public Tag fromValue(Color data) {
+                        return IntTag.valueOf(data.asRGB());
+                    }
+
+                    @Override
+                    public Value<Color> toValue(Tag to) {
+                        return null;
+                    }
+                })
+            .register(
+
+
+            )
+
+        ;
+
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/AbstractMutablePropertyHolder.java b/src/main/java/io/papermc/paper/property/AbstractMutablePropertyHolder.java
new file mode 100644
index 0000000000000000000000000000000000000000..566b9aeeb4113b6f3ac93a2fbda897f95275f729
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/AbstractMutablePropertyHolder.java
@@ -0,0 +1,79 @@
+package io.papermc.paper.property;
+
+import io.papermc.paper.property.value.Value;
+import io.papermc.paper.property.value.provider.ValueProvider;
+import org.bukkit.util.Consumer;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.function.BiConsumer;
+
+
+public abstract class AbstractMutablePropertyHolder implements PropertyHolder.Mutable {
+
+    private final Map<PropertyKey<?>, Value<?>> values = new HashMap<>();
+    private final Map<PropertyKey<?>, ValueProvider<?, ?>> valueProviders = new HashMap<>();
+
+    public AbstractMutablePropertyHolder() {
+        registerProviders(this.valueProviders::put);
+    }
+
+    @Override
+    public <T> @Nullable T get(PropertyKey<? extends Value<T>> property) {
+        Value<T> value = this.getValue(property);
+        return value == null ? null : value.getValue();
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public <E, V extends Value<E>> @Nullable V getValue(PropertyKey<V> property) {
+        return (V) this.values.get(property);
+    }
+
+    @Override
+    public boolean hasProperty(PropertyKey<?> propertyKey) {
+        return this.values.containsKey(propertyKey);
+    }
+
+    @Override
+    public void set(Value<?> value) {
+        this.values.put(value.getKey(), value);
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public <T> void set(PropertyKey<? extends Value<T>> key, T value) {
+        ValueProvider provider = this.valueProviders.get(key);
+
+        this.values.put(key, provider.wrapValue(value));
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public <V, T extends Value<V>> T getOrCreate(PropertyKey<T> key) {
+        Value<?> value = this.values.get(key);
+        if (value == null) {
+            return (T) this.valueProviders.get(key).createNew();
+        }
+
+        return (T) value;
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public <V, T extends Value<V>> T getOrCreateAndSet(PropertyKey<T> key) {
+        Value<?> provider = this.values.get(key);
+        if (provider == null) {
+            T value = (T) this.valueProviders.get(key).createNew();
+            this.values.put(key, value);
+
+            return value;
+        }
+
+        return (T) provider;
+    }
+
+    public abstract void registerProviders(BiConsumer<PropertyKey<?>, ValueProvider<?, ?>> providerConsumer);
+
+}
diff --git a/src/main/java/io/papermc/paper/property/MutablePropertyHolderImpl.java b/src/main/java/io/papermc/paper/property/MutablePropertyHolderImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..137bd355459bd8185413aca30fc7796bc0f43480
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/MutablePropertyHolderImpl.java
@@ -0,0 +1,33 @@
+package io.papermc.paper.property;
+
+import io.papermc.paper.property.value.Value;
+import org.jetbrains.annotations.Nullable;
+
+public class MutablePropertyHolderImpl implements PropertyHolder.Mutable {
+
+    @Override
+    public void set(Value<?> value) {
+
+    }
+
+
+    @Override
+    public <T> void set(PropertyKey<? extends Value<T>> key, T value) {
+
+    }
+
+    @Override
+    public <T> @Nullable T get(PropertyKey<? extends Value<T>> property) {
+        return null;
+    }
+
+    @Override
+    public <E, V extends Value<E>> @Nullable V getValue(PropertyKey<V> property) {
+        return null;
+    }
+
+    @Override
+    public boolean hasProperty(PropertyKey<?> propertyKey) {
+        return false;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/NbtPropertyHolder.java b/src/main/java/io/papermc/paper/property/NbtPropertyHolder.java
new file mode 100644
index 0000000000000000000000000000000000000000..92aff68063b604b84b8ed6fdfdef3c714614c20b
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/NbtPropertyHolder.java
@@ -0,0 +1,41 @@
+package io.papermc.paper.property;
+
+import io.papermc.paper.property.value.Value;
+import org.jetbrains.annotations.Nullable;
+
+public class NbtPropertyHolder implements PropertyHolder.Mutable {
+    @Override
+    public void set(Value<?> value) {
+
+    }
+
+    @Override
+    public <T> void set(PropertyKey<? extends Value<T>> key, T value) {
+
+    }
+
+    @Override
+    public <V, T extends Value<V>> T getOrCreate(PropertyKey<T> key) {
+        return null;
+    }
+
+    @Override
+    public <V, T extends Value<V>> T getOrCreateAndSet(PropertyKey<T> key) {
+        return null;
+    }
+
+    @Override
+    public <T> @Nullable T get(PropertyKey<? extends Value<T>> property) {
+        return null;
+    }
+
+    @Override
+    public <E, V extends Value<E>> @Nullable V getValue(PropertyKey<V> property) {
+        return null;
+    }
+
+    @Override
+    public boolean hasProperty(PropertyKey<?> propertyKey) {
+        return false;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/SimpleValuePlatformAdapter.java b/src/main/java/io/papermc/paper/property/SimpleValuePlatformAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..177af60f918ec1208ed72cd365b6d9f48ee59f12
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/SimpleValuePlatformAdapter.java
@@ -0,0 +1,16 @@
+package io.papermc.paper.property;
+
+import io.papermc.paper.property.value.Value;
+
+public interface SimpleValuePlatformAdapter<T, PLATFORMTYPE> extends ValuePlatformAdapter<Value<T>, PLATFORMTYPE> {
+
+
+    PLATFORMTYPE fromValue(T data);
+
+
+    @Override
+    default PLATFORMTYPE fromValue(Value<T> from) {
+        return this.fromValue(from.getValue());
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/property/ValuePlatformAdapter.java b/src/main/java/io/papermc/paper/property/ValuePlatformAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..c98dd791591e40ad9f7ec8b4e76aa164f554c956
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/ValuePlatformAdapter.java
@@ -0,0 +1,12 @@
+package io.papermc.paper.property;
+
+import io.papermc.paper.property.value.Value;
+
+public interface ValuePlatformAdapter<VALUE extends Value<?>, PLATFORMTYPE> {
+
+
+    PLATFORMTYPE fromValue(VALUE from);
+
+    VALUE toValue(PLATFORMTYPE to);
+
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/NbtPlatformAdapter.java b/src/main/java/io/papermc/paper/property/nbt/NbtPlatformAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..aba9ede569f8cfa45c36224be8dd83d89261c3a4
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/NbtPlatformAdapter.java
@@ -0,0 +1,49 @@
+package io.papermc.paper.property.nbt;
+
+import io.leangen.geantyref.GenericTypeReflector;
+import io.papermc.paper.property.ValuePlatformAdapter;
+import io.papermc.paper.property.value.Value;
+import net.minecraft.nbt.ByteTag;
+import net.minecraft.nbt.DoubleTag;
+import net.minecraft.nbt.FloatTag;
+import net.minecraft.nbt.IntTag;
+import net.minecraft.nbt.LongTag;
+import net.minecraft.nbt.ShortTag;
+import net.minecraft.nbt.StringTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.nbt.TagTypes;
+
+public interface NbtPlatformAdapter<RUNTIME, SERIALIZED> extends ValuePlatformAdapter<Value<RUNTIME>, Tag> {
+
+    SERIALIZED toNbtValue(RUNTIME runtime);
+
+    RUNTIME fromNbtValue(SERIALIZED serialized);
+
+    @Override
+    default Tag fromValue(Value<RUNTIME> from) {
+        RUNTIME value = from.getValue();
+
+        SERIALIZED serialized = toNbtValue(value);
+        if (serialized instanceof Byte nbt) {
+            return ByteTag.valueOf(nbt);
+        } else if (serialized instanceof Double nbt) {
+            return DoubleTag.valueOf(nbt);
+        } else if (serialized instanceof Float nbt) {
+            return FloatTag.valueOf(nbt);
+        } else if (serialized instanceof Integer nbt) {
+            return IntTag.valueOf(nbt);
+        } else if (serialized instanceof Long nbt) {
+            return LongTag.valueOf(nbt);
+        } else if (serialized instanceof Short nbt) {
+            return ShortTag.valueOf(nbt);
+        } else if (serialized instanceof String nbt) {
+            return StringTag.valueOf(nbt);
+        }
+
+    }
+
+    @Override
+    default Value<RUNTIME> toValue(Tag to) {
+        return null;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/nbt/NbtPropertyHolder.java b/src/main/java/io/papermc/paper/property/nbt/NbtPropertyHolder.java
new file mode 100644
index 0000000000000000000000000000000000000000..d6b16d49923c81cd9c3b2b005aa0e9f73e18cde5
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/nbt/NbtPropertyHolder.java
@@ -0,0 +1,63 @@
+package io.papermc.paper.property.nbt;
+
+import io.papermc.paper.property.PropertyHolder;
+import io.papermc.paper.property.PropertyKey;
+import io.papermc.paper.property.ValuePlatformAdapter;
+import io.papermc.paper.property.value.Value;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.Tag;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.function.Function;
+
+public class NbtPropertyHolder implements PropertyHolder.Mutable {
+
+    private final CompoundTag compoundTag;
+
+    public NbtPropertyHolder(CompoundTag compoundTag) {
+        this.compoundTag = compoundTag;
+    }
+
+    public <V, T extends Value<V>> NbtPropertyHolder register(PropertyKey<T> key, ValuePlatformAdapter<T, Tag> adapter) {
+
+        return this;
+    }
+
+    @Override
+    public void set(Value<?> value) {
+
+    }
+
+    @Override
+    public <T> void set(PropertyKey<? extends Value<T>> key, T value) {
+
+    }
+
+    @Override
+    public <V, T extends Value<V>> T getOrCreate(PropertyKey<T> key) {
+        return null;
+    }
+
+    @Override
+    public <V, T extends Value<V>> T getOrCreateAndSet(PropertyKey<T> key) {
+        return null;
+    }
+
+    @Override
+    public <T> @Nullable T get(PropertyKey<? extends Value<T>> property) {
+        return null;
+    }
+
+    @Override
+    public <E, V extends Value<E>> @Nullable V getValue(PropertyKey<V> property) {
+        return this.compoundTag.get(propertyKey.getKey());
+    }
+
+    @Override
+    public boolean hasProperty(PropertyKey<?> propertyKey) {
+        return this.compoundTag.contains(propertyKey.getKey());
+    }
+
+
+
+}
diff --git a/src/main/java/io/papermc/paper/property/value/MutableMapValueImpl.java b/src/main/java/io/papermc/paper/property/value/MutableMapValueImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..ae2e98022fed151809f49f97e4e09816f948412c
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/value/MutableMapValueImpl.java
@@ -0,0 +1,26 @@
+package io.papermc.paper.property.value;
+
+import io.papermc.paper.property.PropertyKey;
+import io.papermc.paper.property.PropertyKeyImpl;
+import io.papermc.paper.property.value.MapValue;
+import io.papermc.paper.property.value.Value;
+import io.papermc.paper.property.value.ValueImpl;
+
+import java.util.Map;
+
+public class MutableMapValueImpl<T, K> extends ValueImpl<Map<T, K>, MapValue<T, K>> implements MapValue<T, K> {
+
+    protected MutableMapValueImpl(PropertyKeyImpl<Map<T, K>, MapValue<T, K>> key, Map<T, K> value) {
+        super(key, value);
+    }
+
+    @Override
+    public Map<T, K> getValue() {
+        return this.;
+    }
+
+    @Override
+    public PropertyKey<? extends Value<Map<T, K>>> getKey() {
+        return null;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/value/SimpleValueImpl.java b/src/main/java/io/papermc/paper/property/value/SimpleValueImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..1eee2b7b0ac43fbd99a17cbb6929d92ff17b95bc
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/value/SimpleValueImpl.java
@@ -0,0 +1,14 @@
+package io.papermc.paper.property.value;
+
+import io.papermc.paper.property.PropertyKey;
+
+public class SimpleValueImpl<T> extends ValueImpl<T, Value<T>> {
+
+    SimpleValueImpl(PropertyKey<Value<T>> key, T value) {
+        super(key, value);
+    }
+
+    static <T> Value<T> of(PropertyKey<Value<T>> key, T value) {
+        return new SimpleValueImpl<>(key, value);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/value/ValueImpl.java b/src/main/java/io/papermc/paper/property/value/ValueImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..4c385cfbc0402bf3119d30b3f0f1bc4b40eeae8a
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/value/ValueImpl.java
@@ -0,0 +1,32 @@
+package io.papermc.paper.property.value;
+
+import io.papermc.paper.property.PropertyKey;
+
+public abstract class ValueImpl<V, T extends Value<V>> implements Value<V> {
+
+    protected final PropertyKey<T> key;
+    protected V value;
+
+    protected ValueImpl(PropertyKey<T> key, V value) {
+        this.key = key;
+        this.value = value;
+    }
+
+    @Override
+    public PropertyKey<T> getKey() {
+        return this.key;
+    }
+
+    @Override
+    public V getValue() {
+        return this.value;
+    }
+
+    @Override
+    public String toString() {
+        return "ValueImpl{" +
+            "key=" + key +
+            ", value=" + value +
+            '}';
+    }
+}
diff --git a/src/main/java/io/papermc/paper/property/value/provider/ValueProvider.java b/src/main/java/io/papermc/paper/property/value/provider/ValueProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..d3a511b306bf29c3dd6afa73fedbf480a1eb2ae1
--- /dev/null
+++ b/src/main/java/io/papermc/paper/property/value/provider/ValueProvider.java
@@ -0,0 +1,13 @@
+package io.papermc.paper.property.value.provider;
+
+import io.papermc.paper.property.value.Value;
+
+public interface ValueProvider<T, V extends Value<T>> {
+
+    V createNew();
+
+    V wrapValue(T data);
+
+
+
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 3c4dadd0012c11191c873fe25a7625193563915d..a389e82a825973bb6570e7e34c46fe075a40869c 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -1592,7 +1592,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     public static Set<String> getHandledTags() {
-        synchronized (CraftMetaItem.HANDLED_TAGS) {
+        synchronized (CraftMetaItem.HANDLED_\TAGS) {
             if (CraftMetaItem.HANDLED_TAGS.isEmpty()) {
                 CraftMetaItem.HANDLED_TAGS.addAll(Arrays.asList(
                         DISPLAY.NBT,
